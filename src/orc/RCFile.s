;File RCFile.s
;Compiler version OCC Version 6.0.50.1
        section code align=2        use32
        section data align=8        use32
        section bss  align=8        use32
        section const  align=8        use32
        section string  align=2        use32
        section tls  align=8 use32
        section cstartup align=2 use32
        section crundown align=2 use32
        section tstartup align=2 use32
        section trundown align=2 use32
section code
        section vsc@$xt@8bad_cast virtual
        [bits 32]
@$xt@8bad_cast:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      064h
        db      05fh
        db      063h
        db      061h
        db      073h
        db      074h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@9exception virtual
        [bits 32]
@$xt@9exception:
        dd      @std@exception@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      065h
        db      078h
        db      063h
        db      065h
        db      070h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@18__libcpp_refstring virtual
        [bits 32]
@$xt@18__libcpp_refstring:
        dd      @std@__1@__libcpp_refstring@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      06ch
        db      069h
        db      062h
        db      063h
        db      070h
        db      070h
        db      05fh
        db      072h
        db      065h
        db      066h
        db      073h
        db      074h
        db      072h
        db      069h
        db      06eh
        db      067h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@11logic_error virtual
        [bits 32]
@$xt@11logic_error:
        dd      @std@logic_error@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      06ch
        db      06fh
        db      067h
        db      069h
        db      063h
        db      05fh
        db      065h
        db      072h
        db      072h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@9exception+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@12domain_error virtual
        [bits 32]
@$xt@12domain_error:
        dd      @std@domain_error@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      064h
        db      06fh
        db      06dh
        db      061h
        db      069h
        db      06eh
        db      05fh
        db      065h
        db      072h
        db      072h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@11logic_error+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@16invalid_argument virtual
        [bits 32]
@$xt@16invalid_argument:
        dd      @std@invalid_argument@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      069h
        db      06eh
        db      076h
        db      061h
        db      06ch
        db      069h
        db      064h
        db      05fh
        db      061h
        db      072h
        db      067h
        db      075h
        db      06dh
        db      065h
        db      06eh
        db      074h
        db      00h
        dd      0800h
        dd      @$xt@11logic_error+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@12length_error virtual
        [bits 32]
@$xt@12length_error:
        dd      @std@length_error@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      06ch
        db      065h
        db      06eh
        db      067h
        db      074h
        db      068h
        db      05fh
        db      065h
        db      072h
        db      072h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@11logic_error+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@12out_of_range virtual
        [bits 32]
@$xt@12out_of_range:
        dd      @std@out_of_range@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      06fh
        db      075h
        db      074h
        db      05fh
        db      06fh
        db      066h
        db      05fh
        db      072h
        db      061h
        db      06eh
        db      067h
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@11logic_error+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@13runtime_error virtual
        [bits 32]
@$xt@13runtime_error:
        dd      @std@runtime_error@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      072h
        db      075h
        db      06eh
        db      074h
        db      069h
        db      06dh
        db      065h
        db      05fh
        db      065h
        db      072h
        db      072h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@9exception+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@11range_error virtual
        [bits 32]
@$xt@11range_error:
        dd      @std@range_error@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      072h
        db      061h
        db      06eh
        db      067h
        db      065h
        db      05fh
        db      065h
        db      072h
        db      072h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@13runtime_error+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@14overflow_error virtual
        [bits 32]
@$xt@14overflow_error:
        dd      @std@overflow_error@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      06fh
        db      076h
        db      065h
        db      072h
        db      066h
        db      06ch
        db      06fh
        db      077h
        db      05fh
        db      065h
        db      072h
        db      072h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@13runtime_error+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@15underflow_error virtual
        [bits 32]
@$xt@15underflow_error:
        dd      @std@underflow_error@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      064h
        db      065h
        db      072h
        db      066h
        db      06ch
        db      06fh
        db      077h
        db      05fh
        db      065h
        db      072h
        db      072h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@13runtime_error+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@12bad_weak_ptr virtual
        [bits 32]
@$xt@12bad_weak_ptr:
        dd      @std@__1@bad_weak_ptr@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      064h
        db      05fh
        db      077h
        db      065h
        db      061h
        db      06bh
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@9exception+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@17bad_function_call virtual
        [bits 32]
@$xt@17bad_function_call:
        dd      @std@__1@bad_function_call@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      062h
        db      061h
        db      064h
        db      05fh
        db      066h
        db      075h
        db      06eh
        db      063h
        db      074h
        db      069h
        db      06fh
        db      06eh
        db      05fh
        db      063h
        db      061h
        db      06ch
        db      06ch
        db      00h
        dd      0800h
        dd      @$xt@9exception+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@10error_code virtual
        [bits 32]
@$xt@10error_code:
        dd      @std@__1@error_code@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      065h
        db      072h
        db      072h
        db      06fh
        db      072h
        db      05fh
        db      063h
        db      06fh
        db      064h
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@12system_error virtual
        [bits 32]
@$xt@12system_error:
        dd      @std@__1@system_error@$bdtr$qv+0
        dd      010h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      073h
        db      079h
        db      073h
        db      074h
        db      065h
        db      06dh
        db      05fh
        db      065h
        db      072h
        db      072h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@13runtime_error+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@17@ios_base@failure virtual
        [bits 32]
@$xt@17@ios_base@failure:
        dd      @std@__1@ios_base@failure@$bdtr$qv+0
        dd      010h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      069h
        db      06fh
        db      073h
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      066h
        db      061h
        db      069h
        db      06ch
        db      075h
        db      072h
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@12system_error+0
        dd      00h
        dd      00h
section code
section code
[global @RCFile@CvtString$qrx#basic_string$C#char_traits$C~#allocator$C~~]
@RCFile@CvtString$qrx#basic_string$C#char_traits$C~#allocator$C~~:
; Line 50: { 
        add     esp,0fffffb9ch
        push    ebx
L_4:
        mov     ebx,dword [esp+04h+0468h]
        mov     ecx,dword [esp+0ch+0468h]
; Line 51:     char buf[1024], *q = buf; 
        lea     eax,[esp-0400h+0468h]
; Line 52:     const wchar_t* p = str.c_str(); 
        mov     edx,ecx
        add     edx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-045ch+0468h],edx
        and     edx,edx
        je      L_123
        mov     edx,dword [esp-045ch+0468h]
        jmp     L_124
L_123:
        mov     edx,dword [esp-045ch+0468h]
L_124:
; Line 2310:   } 
        movzx   edx,byte [edx]
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_76
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-045ch+0468h],ecx
        and     ecx,ecx
        je      L_173
        mov     ecx,dword [esp-045ch+0468h]
        jmp     L_174
L_173:
        mov     ecx,dword [esp-045ch+0468h]
L_174:
; Line 2310:   } 
        mov     edx,dword [ecx+08h]
        jmp     L_77
L_76:
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-045ch+0468h],ecx
        and     ecx,ecx
        je      L_238
        mov     ecx,dword [esp-045ch+0468h]
        jmp     L_239
L_238:
        mov     ecx,dword [esp-045ch+0468h]
L_239:
; Line 2310:   } 
        add     ecx,dword 02h
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     edx,ecx
L_77:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        cmp     word [edx],byte 00h
        je      L_8
L_7:
        mov     cl,byte [edx]
        mov     byte [eax],cl
        add     edx,byte 02h
        inc     eax
L_9:
; Line 53:     while (*p) 
        cmp     word [edx],byte 00h
        jne     L_7
L_8:
        mov     byte [eax],00h
; Line 812:     basic_string(basic_string&& __str, const allocator_type& __a); 
; Line 816:     _LIBCPP_INLINE_VISIBILITY 
; Line 817:     basic_string(const _CharT* __s) : __r_(__default_init_tag(), __default_init_tag()) { 
; Line 817:     basic_string(const _CharT* __s) : __r_(__default_init_tag(), __default_init_tag()) { 
        mov     eax,ebx
        push    eax
        call    @std@__1@#__basic_string_common$4bool?1?~@$bctr$qv
        pop     ecx
        mov     dword [esp-0460h+0468h],00h
        lea     eax,[esp-0460h+0468h]
        push    eax
        mov     dword [esp-0464h+046ch],00h
        lea     eax,[esp-0464h+046ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair$51@#basic_string$c#char_traits$c~#allocator$c~~@__rep#allocator$c~~@$bctr$r18__default_init_tagrn1~$qrn1rn1
        add     esp,byte 0ch
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
        lea     eax,[esp-0400h+0468h]
        push    eax
        call    _strlen
        pop     ecx
        push    eax
        lea     eax,[esp-0400h+046ch]
        push    eax
        push    ebx
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@__init$qpxcui
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
L_340:
L_354:
        mov     eax,dword [esp+04h+0468h]
; Line 57: } 
L_5:
        pop     ebx
        add     esp,0464h
        ret
[global @RCFile@CvtString$qrx#basic_string$c#char_traits$c~#allocator$c~~]
@RCFile@CvtString$qrx#basic_string$c#char_traits$c~#allocator$c~~:
; Line 59: { 
        add     esp,0fffff79ch
        push    ebx
L_361:
        mov     ebx,dword [esp+04h+0868h]
        mov     ecx,dword [esp+0ch+0868h]
; Line 60:     wchar_t buf[1024], *q = buf; 
        lea     eax,[esp-0800h+0868h]
; Line 61:     const char* p = str.c_str(); 
        mov     edx,ecx
        add     edx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-085ch+0868h],edx
        and     edx,edx
        je      L_480
        mov     edx,dword [esp-085ch+0868h]
        jmp     L_481
L_480:
        mov     edx,dword [esp-085ch+0868h]
L_481:
; Line 2310:   } 
        movzx   edx,byte [edx]
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_433
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-085ch+0868h],ecx
        and     ecx,ecx
        je      L_530
        mov     ecx,dword [esp-085ch+0868h]
        jmp     L_531
L_530:
        mov     ecx,dword [esp-085ch+0868h]
L_531:
; Line 2310:   } 
        mov     edx,dword [ecx+08h]
        jmp     L_434
L_433:
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-085ch+0868h],ecx
        and     ecx,ecx
        je      L_595
        mov     ecx,dword [esp-085ch+0868h]
        jmp     L_596
L_595:
        mov     ecx,dword [esp-085ch+0868h]
L_596:
; Line 2310:   } 
        inc     ecx
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        mov     edx,ecx
L_434:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        cmp     byte [edx],byte 00h
        je      L_365
L_364:
        movsx   ecx,byte [edx]
        mov     word [eax],cx
        inc     edx
        add     eax,byte 02h
L_366:
; Line 62:     while (*p) 
        cmp     byte [edx],byte 00h
        jne     L_364
L_365:
        mov     word [eax],00h
; Line 812:     basic_string(basic_string&& __str, const allocator_type& __a); 
; Line 816:     _LIBCPP_INLINE_VISIBILITY 
; Line 817:     basic_string(const _CharT* __s) : __r_(__default_init_tag(), __default_init_tag()) { 
; Line 817:     basic_string(const _CharT* __s) : __r_(__default_init_tag(), __default_init_tag()) { 
        mov     eax,ebx
        push    eax
        call    @std@__1@#__basic_string_common$4bool?1?~@$bctr$qv
        pop     ecx
        mov     dword [esp-0860h+0868h],00h
        lea     eax,[esp-0860h+0868h]
        push    eax
        mov     dword [esp-0864h+086ch],00h
        lea     eax,[esp-0864h+086ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair$51@#basic_string$C#char_traits$C~#allocator$C~~@__rep#allocator$C~~@$bctr$r18__default_init_tagrn1~$qrn1rn1
        add     esp,byte 0ch
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 430: { 
; Line 432:     return __builtin_wcslen(__s); 
; Line 436:     size_t __len = 0; 
; Line 437:     for (; !eq(*__s, char_type(0)); ++__s) 
; Line 438:         ++__len; 
; Line 439:     return __len; 
; Line 441: } 
        lea     eax,[esp-0800h+0868h]
        push    eax
        call    _wcslen
        pop     ecx
; Line 434:     return wcslen(__s); 
        push    eax
        lea     eax,[esp-0800h+086ch]
        push    eax
        push    ebx
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__init$qpxCui
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
L_697:
L_711:
        mov     eax,dword [esp+04h+0868h]
; Line 66: } 
L_362:
        pop     ebx
        add     esp,0864h
        ret
[global @RCFile@IsKeyword$qv]
@RCFile@IsKeyword$qv:
; Line 68: { 
        add     esp,byte 0ffffffe8h
L_718:
        mov     eax,dword [esp+04h+018h]
; Line 69:     bool rv = GetToken() && GetToken()->IsKeyword(); 
        mov     ecx,eax
        add     ecx,byte 08h
        mov     ecx,dword [ecx+0ch]
        and     ecx,ecx
        je      L_725
        mov     ecx,eax
        add     ecx,byte 08h
        mov     ecx,dword [ecx+0ch]
        push    ecx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+08h]
        pop     ecx
        and     al,al
        jne     L_723
L_725:
        xor     eax,eax
        jmp     L_724
L_723:
        mov     eax,01h
L_724:
        and     eax,eax
        setne   al
; Line 70:     return rv; 
; Line 71: } 
L_719:
        add     esp,byte 018h
        ret
[global @RCFile@GetTokenId$qv]
@RCFile@GetTokenId$qv:
; Line 73: { 
        add     esp,byte 0ffffffe8h
        push    ebx
L_825:
        mov     ebx,dword [esp+04h+01ch]
; Line 74:     kw rv = (kw)0; 
        mov     dword [esp-04h+01ch],00h
; Line 75:     if (IsKeyword()) 
        mov     eax,ebx
        push    eax
        call    @RCFile@IsKeyword$qv
        pop     ecx
        and     al,al
        je      L_828
; Line 76:     { 
; Line 77:         rv = GetToken()->GetKeyword(); 
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        pop     ecx
        mov     dword [esp-04h+01ch],eax
; Line 78:         NextToken(); 
        mov     eax,ebx
        add     eax,byte 08h
        push    eax
        call    @Lexer@NextToken$qv
        pop     ecx
L_914:
; Line 79:     } 
L_828:
; Line 80:     return rv; 
        mov     eax,dword [esp-04h+01ch]
; Line 81: } 
L_826:
        pop     ebx
        add     esp,byte 018h
        ret
[global @RCFile@IsNumber$qv]
@RCFile@IsNumber$qv:
; Line 83: { 
        add     esp,0ffffff78h
        push    ebx
L_920:
        mov     ebx,dword [esp+04h+08ch]
; Line 84:     bool rv = GetToken() && 
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        and     eax,eax
        je      L_927
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax]
        pop     ecx
        and     al,al
        jne     L_925
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+08h]
        pop     ecx
        and     al,al
        je      L_1024
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        pop     ecx
        cmp     eax,byte 01h
        je      L_925
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        pop     ecx
        cmp     eax,byte 03h
        je      L_925
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        pop     ecx
        cmp     eax,byte 04h
        je      L_925
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        pop     ecx
        cmp     eax,byte 05h
        je      L_925
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        pop     ecx
        cmp     eax,byte 06h
        je      L_925
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        pop     ecx
        cmp     eax,byte 019h
        je      L_925
L_1024:
L_927:
        xor     eax,eax
        jmp     L_926
L_925:
        mov     eax,01h
L_926:
        and     eax,eax
        setne   al
; Line 88:                                             GetToken()->GetKeyword() == kw::bcompl || GetToken()->GetKeyword() == kw::comma))); 
; Line 90: } 
L_921:
        pop     ebx
        add     esp,088h
        ret
[global @RCFile@GetNumber$qv]
@RCFile@GetNumber$qv:
; Line 92: { 
        add     esp,byte 0ffffffech
        push    ebx
L_1476:
        mov     ebx,dword [esp+04h+018h]
; Line 93:     if (GetToken()->GetKeyword() == kw::comma) 
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        pop     ecx
        cmp     eax,byte 019h
        jne     L_1479
; Line 94:         return 0; 
        xor     eax,eax
        jmp     L_1477
L_1479:
; Line 95:     return expr.Eval(); 
        mov     eax,ebx
        add     eax,byte 018h
        push    eax
        call    @Expression@conditional$qv
        pop     ecx
; Line 96: } 
L_1477:
        pop     ebx
        add     esp,byte 014h
        ret
[global @RCFile@IsString$qv]
@RCFile@IsString$qv:
; Line 98: { 
        add     esp,byte 0ffffffe8h
L_1569:
        mov     eax,dword [esp+04h+018h]
; Line 99:     bool rv = GetToken() && GetToken()->IsString(); 
        mov     ecx,eax
        add     ecx,byte 08h
        mov     ecx,dword [ecx+0ch]
        and     ecx,ecx
        je      L_1576
        mov     ecx,eax
        add     ecx,byte 08h
        mov     ecx,dword [ecx+0ch]
        push    ecx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+010h]
        pop     ecx
        and     al,al
        jne     L_1574
L_1576:
        xor     eax,eax
        jmp     L_1575
L_1574:
        mov     eax,01h
L_1575:
        and     eax,eax
        setne   al
; Line 100:     return rv; 
; Line 101: } 
L_1570:
        add     esp,byte 018h
        ret
[global @RCFile@GetString$qv]
@RCFile@GetString$qv:
; Line 103: { 
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff6ch
        push    ebx
        push    esi
        push    edi
L_1678:
        mov     edi,dword [ebp+08h]
        mov     esi,dword [ebp+0ch]
        push    dword @$xc@RCFile@GetString$qv
        lea     eax,[ebp-078h]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_1702:
; Line 104:     std::wstring rv; 
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        lea     eax,[ebp-014h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        lea     ebx,[ebp-078h+014h]
        mov     dword [ebp-078h+014h],01h
; Line 105:     if (IsString()) 
        mov     eax,esi
        push    eax
        call    @RCFile@IsString$qv
        pop     ecx
        and     al,al
        je      L_1681
; Line 106:     { 
; Line 107:         while (IsString()) 
        mov     eax,esi
        push    eax
        call    @RCFile@IsString$qv
        pop     ecx
        and     al,al
        je      L_1695
L_1685:
; Line 108:         { 
; Line 109:             rv += GetToken()->GetString(); 
        mov     eax,esi
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        lea     eax,[ebp-054h]
        push    eax
        mov     eax,esi
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+024h]
        pop     ecx
        pop     ecx
        push    eax
        lea     eax,[ebp-014h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@append$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 110:             NextToken(); 
        mov     eax,esi
        add     eax,byte 08h
        push    eax
        call    @Lexer@NextToken$qv
        pop     ecx
L_1799:
; Line 111:         } 
L_1687:
        mov     eax,esi
        push    eax
        call    @RCFile@IsString$qv
        pop     ecx
        and     al,al
        jne     L_1685
L_1686:
; Line 112:     } 
        jmp     L_1695
L_1681:
; Line 113:     else 
; Line 114:     { 
; Line 115:         throw std::runtime_error("String expected"); 
        push    dword @$xt@13runtime_error
        push    dword @std@runtime_error@$bctr$qrx13runtime_error
        push    byte 01h
        push    dword L_1677
        lea     eax,[ebp-040h]
        push    eax
        call    @std@runtime_error@$bctr$qpxc
        pop     ecx
        pop     ecx
        mov     dword [ebp-078h+014h],02h
        push    eax
        lea     eax,[ebp-078h]
        push    eax
        call    @_ThrowException$qpvpvipvpv
        add     esp,byte 014h
; Line 116:     } 
        lea     ebx,[ebp-078h+014h]
        mov     dword [ebp-078h+014h],03h
        lea     eax,[ebp-040h]
        push    eax
        call    @std@runtime_error@$bdtr$qv
        pop     ecx
L_1695:
        lea     eax,[ebp-014h]
        push    eax
        push    edi
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qR#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
        mov     dword [ebx],04h
        mov     eax,dword [ebp+08h]
; Line 118: } 
L_1679:
        call    @_RundownException$qv
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
        section vsc@$xc@RCFile@GetString$qv virtual
        [bits 32]
@$xc@RCFile@GetString$qv:
        dd      00h
        dd      0ffffff88h
        dd      0400h
        dd      @$xt@#basic_string$C#char_traits$C~#allocator$C~~+0
        dd      0ffffffech
        dd      01h
        dd      00h
        dd      0400h
        dd      @$xt@13runtime_error+0
        dd      0ffffffc0h
        dd      02h
        dd      03h
        dd      00h
section code
section code
[global @RCFile@IsIdentifier$qv]
@RCFile@IsIdentifier$qv:
; Line 120: { 
        add     esp,byte 0ffffffe8h
L_1805:
        mov     eax,dword [esp+04h+018h]
; Line 121:     bool rv = GetToken() && GetToken()->IsIdentifier(); 
        mov     ecx,eax
        add     ecx,byte 08h
        mov     ecx,dword [ecx+0ch]
        and     ecx,ecx
        je      L_1812
        mov     ecx,eax
        add     ecx,byte 08h
        mov     ecx,dword [ecx+0ch]
        push    ecx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+014h]
        pop     ecx
        and     al,al
        jne     L_1810
L_1812:
        xor     eax,eax
        jmp     L_1811
L_1810:
        mov     eax,01h
L_1811:
        and     eax,eax
        setne   al
; Line 122:     return rv; 
; Line 123: } 
L_1806:
        add     esp,byte 018h
        ret
[global @RCFile@GetId$qv]
@RCFile@GetId$qv:
; Line 125: { 
        push    ebp
        mov     ebp,esp
        add     esp,0ffffff18h
        push    ebx
        push    esi
        push    edi
L_1913:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0e8h],eax
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-0e4h],eax
        push    dword @$xc@RCFile@GetId$qv
        lea     eax,[ebp-078h]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_1936:
; Line 126:     std::wstring rv; 
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        lea     eax,[ebp-014h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        lea     esi,[ebp-078h+014h]
        mov     dword [ebp-078h+014h],01h
; Line 127:     if (IsIdentifier()) 
        mov     eax,dword [ebp-0e4h]
        push    eax
        call    @RCFile@IsIdentifier$qv
        pop     ecx
        and     al,al
        je      L_1916
; Line 128:     { 
; Line 129:         rv = CvtString(GetToken()->GetId()); 
        mov     eax,dword [ebp-0e4h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,dword [ebp-0e4h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+03ch]
        pop     ecx
        push    eax
        mov     eax,dword [ebp-0e4h]
        push    eax
        lea     eax,[ebp-054h]
        push    eax
        call    @RCFile@CvtString$qrx#basic_string$c#char_traits$c~#allocator$c~~
        add     esp,byte 0ch
        mov     dword [ebp-078h+014h],02h
        push    eax
        lea     eax,[ebp-014h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qR#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 130:         for (int i = 0; i < rv.size(); i++) 
        xor     eax,eax
        lea     ecx,[ebp-014h+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [ebp-0e0h],ecx
        and     ecx,ecx
        je      L_2066
        mov     ecx,dword [ebp-0e0h]
        jmp     L_2067
L_2066:
        mov     ecx,dword [ebp-0e0h]
L_2067:
; Line 2310:   } 
        movzx   ecx,byte [ecx]
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_2019
        lea     ecx,[ebp-014h+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [ebp-0e0h],ecx
        and     ecx,ecx
        je      L_2116
        mov     ecx,dword [ebp-0e0h]
        jmp     L_2117
L_2116:
        mov     ecx,dword [ebp-0e0h]
L_2117:
; Line 2310:   } 
        mov     edx,dword [ecx+04h]
        jmp     L_2020
L_2019:
        lea     ecx,[ebp-014h+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [ebp-0e0h],ecx
        and     ecx,ecx
        je      L_2166
        mov     ecx,dword [ebp-0e0h]
        jmp     L_2167
L_2166:
        mov     ecx,dword [ebp-0e0h]
L_2167:
; Line 2310:   } 
        movzx   ecx,byte [ecx]
        shr     ecx,01h
        mov     edx,ecx
L_2020:
        mov     ebx,eax
        cmp     eax,edx
        jnc     L_1922
L_1920:
; Line 131:             rv[i] = toupper(rv[i]); 
        mov     eax,ebx
        push    eax
        lea     eax,[ebp-014h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$barray$qui
        pop     ecx
        pop     ecx
        movzx   eax,word [eax]
        push    eax
        call    _toupper
        pop     ecx
        mov     edi,eax
        mov     eax,ebx
        push    eax
        lea     eax,[ebp-014h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$barray$qui
        pop     ecx
        pop     ecx
        mov     word [eax],di
L_1923:
        mov     eax,ebx
        inc     eax
L_1921:
        lea     ecx,[ebp-014h+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [ebp-0e0h],ecx
        and     ecx,ecx
        je      L_2234
        mov     ecx,dword [ebp-0e0h]
        jmp     L_2235
L_2234:
        mov     ecx,dword [ebp-0e0h]
L_2235:
; Line 2310:   } 
        movzx   ecx,byte [ecx]
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_2187
        lea     ecx,[ebp-014h+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [ebp-0e0h],ecx
        and     ecx,ecx
        je      L_2284
        mov     ecx,dword [ebp-0e0h]
        jmp     L_2285
L_2284:
        mov     ecx,dword [ebp-0e0h]
L_2285:
; Line 2310:   } 
        mov     edx,dword [ecx+04h]
        jmp     L_2188
L_2187:
        lea     ecx,[ebp-014h+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [ebp-0e0h],ecx
        and     ecx,ecx
        je      L_2334
        mov     ecx,dword [ebp-0e0h]
        jmp     L_2335
L_2334:
        mov     ecx,dword [ebp-0e0h]
L_2335:
; Line 2310:   } 
        movzx   ecx,byte [ecx]
        shr     ecx,01h
        mov     edx,ecx
L_2188:
        mov     ebx,eax
        cmp     eax,edx
        jc      L_1920
L_1922:
; Line 132:         NextToken(); 
        mov     eax,dword [ebp-0e4h]
        add     eax,byte 08h
        push    eax
        call    @Lexer@NextToken$qv
        pop     ecx
L_2353:
; Line 133:     } 
        mov     dword [ebp-078h+014h],03h
        lea     eax,[ebp-054h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bdtr$qv
        pop     ecx
        jmp     L_1929
L_1916:
; Line 134:     else 
; Line 135:     { 
; Line 136:         throw std::runtime_error("identifier expected"); 
        push    dword @$xt@13runtime_error
        push    dword @std@runtime_error@$bctr$qrx13runtime_error
        push    byte 01h
        push    dword L_1912
        lea     eax,[ebp-040h]
        push    eax
        call    @std@runtime_error@$bctr$qpxc
        pop     ecx
        pop     ecx
        mov     dword [ebp-078h+014h],04h
        push    eax
        lea     eax,[ebp-078h]
        push    eax
        call    @_ThrowException$qpvpvipvpv
        add     esp,byte 014h
; Line 137:     } 
        lea     eax,[ebp-078h+014h]
        mov     esi,eax
        mov     dword [ebp-078h+014h],05h
        lea     eax,[ebp-040h]
        push    eax
        call    @std@runtime_error@$bdtr$qv
        pop     ecx
L_1929:
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        lea     eax,[ebp-014h]
        push    eax
        mov     eax,dword [ebp-0e8h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qR#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
        mov     eax,esi
        mov     dword [eax],06h
        mov     eax,dword [ebp+08h]
; Line 139: } 
L_1914:
        call    @_RundownException$qv
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
        section vsc@$xc@RCFile@GetId$qv virtual
        [bits 32]
@$xc@RCFile@GetId$qv:
        dd      00h
        dd      0ffffff88h
        dd      0400h
        dd      @$xt@#basic_string$C#char_traits$C~#allocator$C~~+0
        dd      0ffffffech
        dd      01h
        dd      00h
        dd      0400h
        dd      @$xt@#basic_string$C#char_traits$C~#allocator$C~~+0
        dd      0ffffffach
        dd      02h
        dd      03h
        dd      0400h
        dd      @$xt@13runtime_error+0
        dd      0ffffffc0h
        dd      04h
        dd      05h
        dd      00h
section code
section code
[global @RCFile@NeedEol$qv]
@RCFile@NeedEol$qv:
; Line 141: { 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffa8h
        push    ebx
L_2360:
        mov     ebx,dword [ebp+08h]
        push    dword @$xc@RCFile@NeedEol$qv
        lea     eax,[ebp-050h]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_2368:
; Line 142:     if (!AtEol()) 
        mov     eax,ebx
        add     eax,byte 08h
        mov     al,byte [eax+04h]
        and     al,al
        jne     L_2363
        push    dword @$xt@13runtime_error
        push    dword @std@runtime_error@$bctr$qrx13runtime_error
        push    byte 01h
        push    dword L_2359
        lea     eax,[ebp-02ch]
        push    eax
        call    @std@runtime_error@$bctr$qpxc
        pop     ecx
        pop     ecx
        mov     dword [ebp-050h+014h],01h
        push    eax
        lea     eax,[ebp-050h]
        push    eax
        call    @_ThrowException$qpvpvipvpv
        add     esp,byte 014h
        mov     dword [ebp-050h+014h],02h
        lea     eax,[ebp-02ch]
        push    eax
        call    @std@runtime_error@$bdtr$qv
        pop     ecx
L_2363:
; Line 143:         throw std::runtime_error("End of line expected"); 
; Line 144: } 
; Line 144: } 
L_2361:
        call    @_RundownException$qv
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
        section vsc@$xc@RCFile@NeedEol$qv virtual
        [bits 32]
@$xc@RCFile@NeedEol$qv:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @$xt@13runtime_error+0
        dd      0ffffffd4h
        dd      01h
        dd      02h
        dd      00h
section code
section code
[global @RCFile@SkipComma$qv]
@RCFile@SkipComma$qv:
; Line 146: { 
        add     esp,byte 0ffffffech
        push    ebx
L_2407:
        mov     ebx,dword [esp+04h+018h]
; Line 147:     if (IsKeyword() && GetToken()->GetKeyword() == kw::comma) 
        mov     eax,ebx
        push    eax
        call    @RCFile@IsKeyword$qv
        pop     ecx
        and     al,al
        je      L_2410
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        pop     ecx
        cmp     eax,byte 019h
        jne     L_2410
; Line 148:         NextToken(); 
        mov     eax,ebx
        add     eax,byte 08h
        push    eax
        call    @Lexer@NextToken$qv
        pop     ecx
L_2494:
L_2410:
; Line 149: } 
L_2408:
        pop     ebx
        add     esp,byte 014h
        ret
[global @RCFile@NeedBegin$qv]
@RCFile@NeedBegin$qv:
; Line 151: { 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff8ch
        push    ebx
L_2501:
        mov     ebx,dword [ebp+08h]
        push    dword @$xc@RCFile@NeedBegin$qv
        lea     eax,[ebp-050h]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_2511:
; Line 152:     if (!IsKeyword() || (GetToken()->GetKeyword() != kw::openbr && GetToken()->GetKeyword() != kw::BEGIN)) 
        mov     eax,ebx
        push    eax
        call    @RCFile@IsKeyword$qv
        pop     ecx
        and     al,al
        je      L_2515
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        pop     ecx
        cmp     eax,byte 01ah
        je      L_2504
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        pop     ecx
        cmp     eax,byte 022h
        je      L_2504
L_2515:
; Line 153:     { 
; Line 154:         throw std::runtime_error("Begin expected"); 
        push    dword @$xt@13runtime_error
        push    dword @std@runtime_error@$bctr$qrx13runtime_error
        push    byte 01h
        push    dword L_2500
        lea     eax,[ebp-02ch]
        push    eax
        call    @std@runtime_error@$bctr$qpxc
        pop     ecx
        pop     ecx
        mov     dword [ebp-050h+014h],01h
        push    eax
        lea     eax,[ebp-050h]
        push    eax
        call    @_ThrowException$qpvpvipvpv
        add     esp,byte 014h
; Line 155:     } 
        mov     dword [ebp-050h+014h],02h
        lea     eax,[ebp-02ch]
        push    eax
        call    @std@runtime_error@$bdtr$qv
        pop     ecx
L_2504:
; Line 156:     NextToken(); 
        mov     eax,ebx
        add     eax,byte 08h
        push    eax
        call    @Lexer@NextToken$qv
        pop     ecx
L_2657:
; Line 157: } 
L_2502:
        call    @_RundownException$qv
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
        section vsc@$xc@RCFile@NeedBegin$qv virtual
        [bits 32]
@$xc@RCFile@NeedBegin$qv:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @$xt@13runtime_error+0
        dd      0ffffffd4h
        dd      01h
        dd      02h
        dd      00h
section code
section code
[global @RCFile@NeedEnd$qv]
@RCFile@NeedEnd$qv:
; Line 159: { 
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff8ch
        push    ebx
L_2664:
        mov     ebx,dword [ebp+08h]
        push    dword @$xc@RCFile@NeedEnd$qv
        lea     eax,[ebp-050h]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_2672:
; Line 160:     if (!IsKeyword() || (GetToken()->GetKeyword() != kw::closebr && GetToken()->GetKeyword() != kw::END)) 
        mov     eax,ebx
        push    eax
        call    @RCFile@IsKeyword$qv
        pop     ecx
        and     al,al
        je      L_2676
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        pop     ecx
        cmp     eax,byte 01bh
        je      L_2667
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        pop     ecx
        cmp     eax,byte 034h
        je      L_2667
L_2676:
        push    dword @$xt@13runtime_error
        push    dword @std@runtime_error@$bctr$qrx13runtime_error
        push    byte 01h
        push    dword L_2663
        lea     eax,[ebp-02ch]
        push    eax
        call    @std@runtime_error@$bctr$qpxc
        pop     ecx
        pop     ecx
        mov     dword [ebp-050h+014h],01h
        push    eax
        lea     eax,[ebp-050h]
        push    eax
        call    @_ThrowException$qpvpvipvpv
        add     esp,byte 014h
        mov     dword [ebp-050h+014h],02h
        lea     eax,[ebp-02ch]
        push    eax
        call    @std@runtime_error@$bdtr$qv
        pop     ecx
L_2667:
; Line 161:         throw std::runtime_error("End expected"); 
; Line 162:     NextToken(); 
; Line 162:     NextToken(); 
        mov     eax,ebx
        add     eax,byte 08h
        push    eax
        call    @Lexer@NextToken$qv
        pop     ecx
L_2818:
; Line 163: } 
L_2665:
        call    @_RundownException$qv
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
        section vsc@$xc@RCFile@NeedEnd$qv virtual
        [bits 32]
@$xc@RCFile@NeedEnd$qv:
        dd      00h
        dd      0ffffffb0h
        dd      0400h
        dd      @$xt@13runtime_error+0
        dd      0ffffffd4h
        dd      01h
        dd      02h
        dd      00h
section code
section code
[global @RCFile@GetFileName$qv]
@RCFile@GetFileName$qv:
; Line 165: { 
        push    ebp
        mov     ebp,esp
        add     esp,0fffffe9ch
        push    ebx
        push    esi
        push    edi
L_2826:
        mov     ebx,dword [ebp+08h]
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0164h],eax
        mov     eax,dword [ebp+0ch]
        mov     dword [ebp-0160h],eax
        push    dword @$xc@RCFile@GetFileName$qv
        lea     eax,[ebp-0104h]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_2851:
; Line 166:     if (GetToken()->IsString()) 
        mov     eax,dword [ebp-0160h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,dword [ebp-0160h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+010h]
        pop     ecx
        and     al,al
        je      L_2829
; Line 167:     { 
; Line 168:         std::string rv = CvtString(GetToken()->GetRawString()); 
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        mov     eax,dword [ebp-0160h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        lea     eax,[ebp-0b8h]
        push    eax
        mov     eax,dword [ebp-0160h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+028h]
        pop     ecx
        pop     ecx
        push    eax
        mov     eax,dword [ebp-0160h]
        push    eax
        lea     eax,[ebp-0a4h]
        push    eax
        call    @RCFile@CvtString$qrx#basic_string$C#char_traits$C~#allocator$C~~
        add     esp,byte 0ch
        mov     dword [ebp-0104h+014h],01h
; Line 169:         NextToken(); 
        mov     eax,dword [ebp-0160h]
        add     eax,byte 08h
        push    eax
        call    @Lexer@NextToken$qv
        pop     ecx
L_2996:
; Line 170:         rv = Utils::SearchForFile(includePath, rv); 
        lea     eax,[ebp-0a4h]
        push    eax
        mov     eax,dword [ebp-0160h]
        add     eax,byte 028h
        push    eax
        lea     eax,[ebp-0e0h]
        push    eax
        call    @Utils@SearchForFile$qrx#basic_string$c#char_traits$c~#allocator$c~~rx#basic_string$c#char_traits$c~#allocator$c~~
        add     esp,byte 0ch
        mov     dword [ebp-0104h+014h],02h
        push    eax
        lea     eax,[ebp-0a4h]
        push    eax
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@$basn$qR#basic_string$c#char_traits$c~#allocator$c~~
        pop     ecx
        pop     ecx
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        lea     eax,[ebp-0a4h]
        push    eax
        push    ebx
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@$bctr$qR#basic_string$c#char_traits$c~#allocator$c~~
        pop     ecx
        pop     ecx
        mov     dword [ebp-0104h+014h],03h
        mov     ebx,dword [ebp+08h]
        mov     dword [ebp-0104h+014h],04h
        lea     eax,[ebp-0e0h]
        push    eax
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@$bdtr$qv
        pop     ecx
        mov     eax,ebx
        jmp     L_2827
; Line 172:     } 
L_2829:
; Line 173:     else 
; Line 174:     { 
; Line 175:         std::string line = lexer.GetRestOfLine(); 
        mov     eax,dword [ebp-0160h]
        add     eax,byte 08h
        push    eax
        lea     eax,[ebp-014h]
        push    eax
        call    @Lexer@GetRestOfLine$qv
        pop     ecx
        pop     ecx
        lea     eax,[ebp-0104h+014h]
        mov     ebx,eax
        mov     dword [ebp-0104h+014h],06h
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        push    byte 00h
        push    dword L_2824
        lea     eax,[ebp-014h]
        push    eax
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@find_first_not_of$xqpxcui
        add     esp,byte 0ch
        mov     edi,eax
; Line 177:         if (s == std::string::npos) 
        cmp     edi,byte 0ffffffffh
        jne     L_2838
        push    dword @$xt@13runtime_error
        push    dword @std@runtime_error@$bctr$qrx13runtime_error
        push    byte 01h
        push    dword L_2825
        lea     eax,[ebp-090h]
        push    eax
        call    @std@runtime_error@$bctr$qpxc
        pop     ecx
        pop     ecx
        mov     dword [ebp-0104h+014h],07h
        push    eax
        lea     eax,[ebp-0104h]
        push    eax
        call    @_ThrowException$qpvpvipvpv
        add     esp,byte 014h
        lea     eax,[ebp-0104h+014h]
        mov     ebx,eax
        mov     dword [ebp-0104h+014h],08h
        lea     eax,[ebp-090h]
        push    eax
        call    @std@runtime_error@$bdtr$qv
        pop     ecx
L_2838:
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        mov     eax,edi
        push    eax
        push    dword L_2824
        lea     eax,[ebp-014h]
        push    eax
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@find_first_of$xqpxcui
        add     esp,byte 0ch
        mov     esi,eax
; Line 180:         if (e == std::string::npos) 
        cmp     esi,byte 0ffffffffh
        jne     L_2843
; Line 181:             e = line.size(); 
        lea     eax,[ebp-014h+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [ebp-015ch],eax
        and     eax,eax
        je      L_3061
        mov     eax,dword [ebp-015ch]
        jmp     L_3062
L_3061:
        mov     eax,dword [ebp-015ch]
L_3062:
; Line 2310:   } 
        movzx   eax,byte [eax]
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_3014
        lea     eax,[ebp-014h+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [ebp-015ch],eax
        and     eax,eax
        je      L_3111
        mov     eax,dword [ebp-015ch]
        jmp     L_3112
L_3111:
        mov     eax,dword [ebp-015ch]
L_3112:
; Line 2310:   } 
        mov     esi,dword [eax+04h]
        jmp     L_3015
L_3014:
        lea     eax,[ebp-014h+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [ebp-015ch],eax
        and     eax,eax
        je      L_3161
        mov     eax,dword [ebp-015ch]
        jmp     L_3162
L_3161:
        mov     eax,dword [ebp-015ch]
L_3162:
; Line 2310:   } 
        movzx   eax,byte [eax]
        shr     eax,01h
        mov     esi,eax
L_3015:
L_2843:
; Line 182:         std::string rv = line.substr(s, e - s); 
        mov     eax,esi
        sub     eax,edi
        push    eax
        push    edi
        lea     eax,[ebp-014h]
        push    eax
        lea     eax,[ebp-0a4h]
        push    eax
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@substr$xquiui
        add     esp,byte 010h
        mov     dword [ebx],09h
; Line 183:         line.erase(0, e); 
        push    esi
        push    byte 00h
        lea     eax,[ebp-014h]
        push    eax
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@erase$quiui
        add     esp,byte 0ch
; Line 184:         lexer.Reset(line); 
        mov     esi,dword [ebp-0160h]
        add     esi,byte 08h
; Line 48:         tokenizer->Reset(line); 
        lea     eax,[ebp-014h]
        push    eax
        mov     eax,dword [esi+08h]
        push    eax
        call    @Tokenizer@Reset$qrx#basic_string$c#char_traits$c~#allocator$c~~
        pop     ecx
        pop     ecx
        push    esi
        call    @Lexer@NextToken$qv
        pop     ecx
; Line 50:     } 
; Line 51:     bool AtEol() { return atEol; } 
; Line 51:     bool AtEol() { return atEol; } 
L_3180:
; Line 185:         rv = Utils::SearchForFile(includePath, rv); 
        lea     eax,[ebp-0a4h]
        push    eax
        mov     eax,dword [ebp-0160h]
        add     eax,byte 028h
        push    eax
        lea     eax,[ebp-064h]
        push    eax
        call    @Utils@SearchForFile$qrx#basic_string$c#char_traits$c~#allocator$c~~rx#basic_string$c#char_traits$c~#allocator$c~~
        add     esp,byte 0ch
        mov     dword [ebx],0ah
        push    eax
        lea     eax,[ebp-0a4h]
        push    eax
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@$basn$qR#basic_string$c#char_traits$c~#allocator$c~~
        pop     ecx
        pop     ecx
; Line 851:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
        lea     eax,[ebp-0a4h]
        push    eax
        mov     eax,dword [ebp-0164h]
        push    eax
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@$bctr$qR#basic_string$c#char_traits$c~#allocator$c~~
        pop     ecx
        pop     ecx
        mov     dword [ebx],0bh
        mov     esi,dword [ebp+08h]
        mov     dword [ebx],0ch
        lea     eax,[ebp-064h]
        push    eax
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@$bdtr$qv
        pop     ecx
        mov     dword [ebx],0dh
        lea     eax,[ebp-014h]
        push    eax
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@$bdtr$qv
        pop     ecx
        mov     eax,esi
; Line 187:     } 
L_2834:
L_2827:
        call    @_RundownException$qv
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
        section vsc@$xc@RCFile@GetFileName$qv virtual
        [bits 32]
@$xc@RCFile@GetFileName$qv:
        dd      00h
        dd      0fffffefch
        dd      0400h
        dd      @$xt@#basic_string$c#char_traits$c~#allocator$c~~+0
        dd      0ffffff20h
        dd      02h
        dd      05h
        dd      0400h
        dd      @$xt@13runtime_error+0
        dd      0ffffff70h
        dd      07h
        dd      08h
        dd      0400h
        dd      @$xt@#basic_string$c#char_traits$c~#allocator$c~~+0
        dd      0ffffff9ch
        dd      0ah
        dd      0eh
        dd      0400h
        dd      @$xt@#basic_string$c#char_traits$c~#allocator$c~~+0
        dd      0ffffffech
        dd      00h
        dd      0fh
        dd      0400h
        dd      @$xt@#basic_string$c#char_traits$c~#allocator$c~~+0
        dd      0ffffffech
        dd      00h
        dd      0fh
        dd      0400h
        dd      @$xt@#basic_string$c#char_traits$c~#allocator$c~~+0
        dd      0ffffff20h
        dd      00h
        dd      05h
        dd      0400h
        dd      @$xt@#basic_string$c#char_traits$c~#allocator$c~~+0
        dd      0ffffff9ch
        dd      00h
        dd      0eh
        dd      00h
section code
section code
[global @RCFile@GetRes$qv]
@RCFile@GetRes$qv:
; Line 190: { 
        push    ebp
        mov     ebp,esp
        add     esp,0fffff7f4h
        push    ebx
        push    esi
        push    edi
L_3189:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-0804h],eax
        push    dword @$xc@RCFile@GetRes$qv
        lea     eax,[ebp-0350h]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_3372:
; Line 191:     kw type; 
; Line 192:     int val = 0; 
        xor     eax,eax
        mov     dword [ebp-080ch],eax
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        lea     eax,[ebp-0c8h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],01h
; Line 194:     ResourceId id; 
        lea     ebx,[ebp-030h]
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],02h
        mov     dword [ebx+014h],0ffffffffh
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-0350h+014h],03h
; Line 195:     bool done = false; 
; Line 196:     Resource* rv = nullptr; 
        xor     ebx,ebx
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     al,byte [eax+05h]
        and     al,al
        jne     L_3193
L_3192:
; Line 198:     { 
; Line 199:         done = true; 
        mov     byte [ebp-0807h],01h
; Line 200:         if (!IsNumber() && GetToken()->IsKeyword()) 
        mov     eax,dword [ebp-0804h]
        push    eax
        call    @RCFile@IsNumber$qv
        pop     ecx
        and     al,al
        jne     L_3198
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+08h]
        pop     ecx
        and     al,al
        je      L_3198
; Line 201:         { 
; Line 202:             type = GetToken()->GetKeyword(); 
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        pop     ecx
        mov     dword [ebp-04h],eax
; Line 203:             name = GetToken()->GetString(); 
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        lea     eax,[ebp-0130h]
        push    eax
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+024h]
        pop     ecx
        pop     ecx
        push    eax
        lea     eax,[ebp-0c8h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qR#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 204:             if (type >= kw::ACCELERATORS) 
        cmp     dword [ebp-04h],byte 01ch
        jl      L_3202
; Line 205:             { 
; Line 206:                 if (type != kw::STRINGTABLE && type != kw::LANGUAGE) 
        cmp     dword [ebp-04h],byte 060h
        je      L_3206
        cmp     dword [ebp-04h],byte 046h
        je      L_3206
; Line 207:                 { 
; Line 208:                     NextToken(); 
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        push    eax
        call    @Lexer@NextToken$qv
        pop     ecx
L_3631:
; Line 209:                     if (GetToken()->IsKeyword() && GetToken()->GetKeyword() >= kw::ACCELERATORS) 
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+08h]
        pop     ecx
        and     al,al
        je      L_3210
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        pop     ecx
        cmp     eax,byte 01ch
        jl      L_3210
; Line 210:                     { 
; Line 211:                         id.SetName(name); 
        lea     eax,[ebp-0c8h]
        push    eax
        lea     eax,[ebp-030h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
L_3775:
; Line 212:                         type = GetToken()->GetKeyword(); 
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        pop     ecx
        mov     dword [ebp-04h],eax
; Line 213:                         name = GetToken()->GetString(); 
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        lea     eax,[ebp-018ch]
        push    eax
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+024h]
        pop     ecx
        pop     ecx
        push    eax
        lea     eax,[ebp-0c8h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qR#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 214:                     } 
        lea     ebx,[ebp-0350h+014h]
        jmp     L_3215
L_3210:
; Line 215:                     else if (GetToken()->IsIdentifier()) 
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+014h]
        pop     ecx
        and     al,al
        je      L_3218
; Line 216:                     { 
; Line 217:                         id.SetName(name); 
        lea     eax,[ebp-0c8h]
        push    eax
        lea     eax,[ebp-030h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
L_3983:
; Line 218:                         type = (kw)-1; 
        mov     dword [ebp-04h],0ffffffffh
; Line 219:                         name = CvtString(GetToken()->GetId()); 
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+03ch]
        pop     ecx
        push    eax
        mov     eax,dword [ebp-0804h]
        push    eax
        lea     eax,[ebp-0178h]
        push    eax
        call    @RCFile@CvtString$qrx#basic_string$c#char_traits$c~#allocator$c~~
        add     esp,byte 0ch
        lea     ebx,[ebp-0350h+014h]
        mov     dword [ebp-0350h+014h],04h
        push    eax
        lea     eax,[ebp-0c8h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qR#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 220:                     } 
        mov     dword [ebp-0350h+014h],05h
        lea     eax,[ebp-0178h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bdtr$qv
        pop     ecx
        jmp     L_3223
L_3218:
; Line 221:                     else if (IsNumber()) 
        mov     eax,dword [ebp-0804h]
        push    eax
        call    @RCFile@IsNumber$qv
        pop     ecx
        and     al,al
        je      L_3226
; Line 222:                     { 
; Line 223:                         type = (kw)-2; 
        mov     dword [ebp-04h],0fffffffeh
; Line 224:                         val = GetNumber(); 
        mov     eax,dword [ebp-0804h]
        push    eax
        call    @RCFile@GetNumber$qv
        pop     ecx
        mov     dword [ebp-080ch],eax
; Line 225:                     } 
        lea     ebx,[ebp-0350h+014h]
        jmp     L_3231
L_3226:
; Line 226:                     else 
; Line 227:                     { 
; Line 228:                         throw std::runtime_error("Expected resource type"); 
        push    dword @$xt@13runtime_error
        push    dword @std@runtime_error@$bctr$qrx13runtime_error
        push    byte 01h
        push    dword L_3186
        lea     eax,[ebp-0164h]
        push    eax
        call    @std@runtime_error@$bctr$qpxc
        pop     ecx
        pop     ecx
        mov     dword [ebp-0350h+014h],06h
        push    eax
        lea     eax,[ebp-0350h]
        push    eax
        call    @_ThrowException$qpvpvipvpv
        add     esp,byte 014h
; Line 229:                     } 
        lea     ebx,[ebp-0350h+014h]
        mov     dword [ebp-0350h+014h],07h
        lea     eax,[ebp-0164h]
        push    eax
        call    @std@runtime_error@$bdtr$qv
        pop     ecx
L_3231:
L_3223:
L_3215:
; Line 230:                     if (type != (kw)-2) 
        cmp     dword [ebp-04h],byte 0fffffffeh
        je      L_3248
; Line 231:                         NextToken(); 
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        push    eax
        call    @Lexer@NextToken$qv
        pop     ecx
L_4063:
L_3242:
; Line 232:                 } 
        jmp     L_3256
L_3206:
; Line 233:                 else 
; Line 234:                 { 
; Line 235:                     NextToken(); 
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        push    eax
        call    @Lexer@NextToken$qv
        pop     ecx
L_4079:
; Line 236:                 } 
        lea     eax,[ebp-0350h+014h]
        mov     ebx,eax
L_3248:
; Line 237:             } 
        jmp     L_3264
L_3202:
; Line 238:             else 
; Line 239:             { 
; Line 240:                 throw std::runtime_error("Expected resource identifier"); 
        push    dword @$xt@13runtime_error
        push    dword @std@runtime_error@$bctr$qrx13runtime_error
        push    byte 01h
        push    dword L_3187
        lea     eax,[ebp-0138h]
        push    eax
        call    @std@runtime_error@$bctr$qpxc
        pop     ecx
        pop     ecx
        mov     dword [ebp-0350h+014h],08h
        push    eax
        lea     eax,[ebp-0350h]
        push    eax
        call    @_ThrowException$qpvpvipvpv
        add     esp,byte 014h
; Line 241:             } 
        lea     ebx,[ebp-0350h+014h]
        mov     dword [ebp-0350h+014h],09h
        lea     eax,[ebp-0138h]
        push    eax
        call    @std@runtime_error@$bdtr$qv
        pop     ecx
L_3256:
; Line 242:         } 
        jmp     L_3264
L_3198:
; Line 243:         else 
; Line 244:         { 
; Line 245:             id.ReadRC(*this); 
        push    byte 00h
        mov     eax,dword [ebp-0804h]
        push    eax
        lea     eax,[ebp-030h]
        push    eax
        call    @ResourceId@ReadRC$qr6RCFile4bool
        add     esp,byte 0ch
; Line 246:             if (GetToken()->IsKeyword()) 
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+08h]
        pop     ecx
        and     al,al
        je      L_3268
; Line 247:             { 
; Line 248:                 type = GetToken()->GetKeyword(); 
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+038h]
        pop     ecx
        mov     dword [ebp-04h],eax
; Line 249:                 name = GetToken()->GetString(); 
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        lea     eax,[ebp-011ch]
        push    eax
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+024h]
        pop     ecx
        pop     ecx
        push    eax
        lea     eax,[ebp-0c8h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qR#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 250:             } 
        lea     ebx,[ebp-0350h+014h]
        jmp     L_3273
L_3268:
; Line 251:             else if (GetToken()->IsIdentifier()) 
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+014h]
        pop     ecx
        and     al,al
        je      L_3276
; Line 252:             { 
; Line 253:                 type = (kw)-1; 
        mov     dword [ebp-04h],0ffffffffh
; Line 254:                 name = CvtString(GetToken()->GetId()); 
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        push    eax
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     eax,dword [eax+0ch]
        mov     eax,dword [eax]
        call    dword [eax+03ch]
        pop     ecx
        push    eax
        mov     eax,dword [ebp-0804h]
        push    eax
        lea     eax,[ebp-0108h]
        push    eax
        call    @RCFile@CvtString$qrx#basic_string$c#char_traits$c~#allocator$c~~
        add     esp,byte 0ch
        lea     ebx,[ebp-0350h+014h]
        mov     dword [ebp-0350h+014h],0ah
        push    eax
        lea     eax,[ebp-0c8h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qR#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 255:             } 
        mov     dword [ebp-0350h+014h],0bh
        lea     eax,[ebp-0108h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bdtr$qv
        pop     ecx
        jmp     L_3281
L_3276:
; Line 256:             else if (IsNumber()) 
        mov     eax,dword [ebp-0804h]
        push    eax
        call    @RCFile@IsNumber$qv
        pop     ecx
        and     al,al
        je      L_3284
; Line 257:             { 
; Line 258:                 type = (kw)-2; 
        mov     dword [ebp-04h],0fffffffeh
; Line 259:                 val = GetNumber(); 
        mov     eax,dword [ebp-0804h]
        push    eax
        call    @RCFile@GetNumber$qv
        pop     ecx
        mov     dword [ebp-080ch],eax
; Line 260:             } 
        lea     ebx,[ebp-0350h+014h]
        jmp     L_3289
L_3284:
; Line 261:             else 
; Line 262:             { 
; Line 263:                 throw std::runtime_error("Expected resource type"); 
        push    dword @$xt@13runtime_error
        push    dword @std@runtime_error@$bctr$qrx13runtime_error
        push    byte 01h
        push    dword L_3186
        lea     eax,[ebp-0f4h]
        push    eax
        call    @std@runtime_error@$bctr$qpxc
        pop     ecx
        pop     ecx
        mov     dword [ebp-0350h+014h],0ch
        push    eax
        lea     eax,[ebp-0350h]
        push    eax
        call    @_ThrowException$qpvpvipvpv
        add     esp,byte 014h
; Line 264:             } 
        lea     ebx,[ebp-0350h+014h]
        mov     dword [ebp-0350h+014h],0dh
        lea     eax,[ebp-0f4h]
        push    eax
        call    @std@runtime_error@$bdtr$qv
        pop     ecx
L_3289:
L_3281:
L_3273:
; Line 265:             if (type != (kw)-2) 
        cmp     dword [ebp-04h],byte 0fffffffeh
        je      L_3300
; Line 266:                 NextToken(); 
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        push    eax
        call    @Lexer@NextToken$qv
        pop     ecx
L_4415:
L_3300:
; Line 267:         } 
L_3264:
; Line 268:         ResourceInfo info(language); 
        lea     ecx,[ebp-040h]
        mov     eax,dword [ebp-0804h]
        mov     eax,dword [eax+020h]
        mov     dword [ecx],00h
        mov     dword [ecx+04h],eax
        mov     dword [ecx+08h],00h
        mov     dword [ecx+0ch],00h
        mov     dword [ebx],0eh
; Line 269:         info.SetFlags(ResourceInfo::Moveable | ResourceInfo::Discardable); 
        mov     eax,01010h
        mov     dword [ebp-040h],eax
L_4449:
; Line 270:         rv = nullptr; 
        xor     ebx,ebx
; Line 271:         switch (type) 
        mov     eax,dword [ebp-04h]
        cmp     eax,byte 042h
        je      L_3337
        jg      L_3338
        cmp     eax,byte 02dh
        je      L_3327
        jg      L_3328
        cmp     eax,byte 01ch
        je      L_3323
        jg      L_3324
        cmp     eax,byte 0ffffffffh
        je      L_3311
        jg      L_3361
        cmp     eax,byte 0fffffffeh
        je      L_3321
        jmp     L_3361
L_3324:
        cmp     eax,byte 023h
        je      L_3325
        jmp     L_3361
L_3328:
        cmp     eax,byte 032h
        je      L_3333
        jg      L_3334
        cmp     eax,byte 030h
        je      L_3331
        jg      L_3361
        cmp     eax,byte 02fh
        je      L_3329
        jmp     L_3361
L_3334:
        cmp     eax,byte 03eh
        je      L_3335
        jmp     L_3361
L_3338:
        cmp     eax,byte 059h
        je      L_3343
        jg      L_3344
        cmp     eax,byte 04bh
        je      L_3341
        jg      L_3342
        cmp     eax,byte 04ah
        je      L_3339
        jg      L_3361
        cmp     eax,byte 046h
        je      L_3353
        jmp     L_3361
L_3342:
        cmp     eax,byte 04fh
        je      L_3347
        jmp     L_3361
L_3344:
        cmp     eax,byte 060h
        je      L_3349
        jg      L_3350
        cmp     eax,byte 05ah
        je      L_3357
        jmp     L_3361
L_3350:
        cmp     eax,byte 064h
        je      L_3345
        jmp     L_3361
; Line 272:         { 
; Line 273:             case (kw)-1: 
L_3311:
; Line 274:                 for (int i = 0; i < name.size(); i++) 
        xor     eax,eax
        lea     ecx,[ebp-0c8h+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [ebp-0760h],ecx
        and     ecx,ecx
        je      L_4514
        mov     ecx,dword [ebp-0760h]
        jmp     L_4515
L_4514:
        mov     ecx,dword [ebp-0760h]
L_4515:
; Line 2310:   } 
        movzx   ecx,byte [ecx]
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_4467
        lea     ecx,[ebp-0c8h+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [ebp-0760h],ecx
        and     ecx,ecx
        je      L_4564
        mov     ecx,dword [ebp-0760h]
        jmp     L_4565
L_4564:
        mov     ecx,dword [ebp-0760h]
L_4565:
; Line 2310:   } 
        mov     ecx,dword [ecx+04h]
        jmp     L_4468
L_4467:
        lea     ecx,[ebp-0c8h+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [ebp-0760h],ecx
        and     ecx,ecx
        je      L_4614
        mov     ecx,dword [ebp-0760h]
        jmp     L_4615
L_4614:
        mov     ecx,dword [ebp-0760h]
L_4615:
; Line 2310:   } 
        movzx   ecx,byte [ecx]
        shr     ecx,01h
L_4468:
        mov     ebx,eax
        cmp     eax,ecx
        jnc     L_3315
L_3313:
; Line 275:                     name[i] = toupper(name[i]); 
        mov     eax,ebx
        push    eax
        lea     eax,[ebp-0c8h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$barray$qui
        pop     ecx
        pop     ecx
        movzx   eax,word [eax]
        push    eax
        call    _toupper
        pop     ecx
        mov     esi,eax
        mov     eax,ebx
        push    eax
        lea     eax,[ebp-0c8h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$barray$qui
        pop     ecx
        pop     ecx
        mov     word [eax],si
L_3316:
        mov     eax,ebx
        inc     eax
L_3314:
        lea     ecx,[ebp-0c8h+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [ebp-0760h],ecx
        and     ecx,ecx
        je      L_4682
        mov     ecx,dword [ebp-0760h]
        jmp     L_4683
L_4682:
        mov     ecx,dword [ebp-0760h]
L_4683:
; Line 2310:   } 
        movzx   ecx,byte [ecx]
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_4635
        lea     ecx,[ebp-0c8h+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [ebp-0760h],ecx
        and     ecx,ecx
        je      L_4732
        mov     ecx,dword [ebp-0760h]
        jmp     L_4733
L_4732:
        mov     ecx,dword [ebp-0760h]
L_4733:
; Line 2310:   } 
        mov     ecx,dword [ecx+04h]
        jmp     L_4636
L_4635:
        lea     ecx,[ebp-0c8h+04h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [ebp-0760h],ecx
        and     ecx,ecx
        je      L_4782
        mov     ecx,dword [ebp-0760h]
        jmp     L_4783
L_4782:
        mov     ecx,dword [ebp-0760h]
L_4783:
; Line 2310:   } 
        movzx   ecx,byte [ecx]
        shr     ecx,01h
L_4636:
        mov     ebx,eax
        cmp     eax,ecx
        jc      L_3313
L_3315:
; Line 276:                 rv = new GenericResource(ResourceId(name), id, info); 
        push    byte 04ch
        call    @$bnew$qui
        pop     ecx
        mov     dword [ebp-0800h],eax
        mov     ecx,eax
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        and     ecx,ecx
        je      L_4788
        mov     ebx,dword [ebp-0800h]
        lea     eax,[ebp-0c8h]
        push    eax
        lea     eax,[ebp-05ch]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        mov     dword [ebp-0350h+014h],0fh
        mov     dword [ebp-05ch+014h],0ffffffffh
        mov     dword [ebp-0350h+014h],010h
        mov     esi,ebx
        mov     ecx,@Resource@_$vt+0ch
        mov     eax,esi
        mov     dword [eax],ecx
        mov     eax,esi
        add     eax,byte 04h
        mov     ecx,dword [ebp-040h]
        mov     dword [eax],ecx
        mov     ecx,dword [ebp-040h+04h]
        mov     dword [eax+04h],ecx
        mov     ecx,dword [ebp-040h+08h]
        mov     dword [eax+08h],ecx
        mov     ecx,dword [ebp-040h+0ch]
        mov     dword [eax+0ch],ecx
        mov     dword [ebp-0350h+014h],011h
        mov     edi,esi
        add     edi,byte 014h
        mov     eax,edi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],012h
; Line 42:         id = Old.id; 
        mov     eax,dword [ebp-05ch+014h]
        mov     dword [edi+014h],eax
        lea     eax,[ebp-05ch]
        push    eax
        mov     eax,edi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 44:     } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
        mov     dword [ebp-0350h+014h],013h
        add     esi,byte 02ch
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],014h
; Line 42:         id = Old.id; 
        mov     eax,dword [ebp-030h+014h]
        mov     dword [esi+014h],eax
        lea     eax,[ebp-030h]
        push    eax
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 44:     } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
        mov     dword [ebp-0350h+014h],015h
        mov     dword [ebp-0350h+014h],016h
        mov     ecx,@GenericResource@_$vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        mov     ecx,ebx
        add     ecx,byte 044h
; Line 2484:   _LIBCPP_INLINE_VISIBILITY 
; Line 2485:   _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {} 
; Line 2485:   _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {} 
        mov     dword [ebp-0764h],00h
        lea     eax,[ebp-0764h]
        mov     dword [ebp-0350h+014h],017h
        push    eax
        xor     eax,eax
        mov     dword [ebp-0768h],eax
        lea     eax,[ebp-0768h]
        push    eax
        mov     eax,ecx
        push    eax
        call    @std@__1@#__compressed_pair$p12ResourceData#default_delete$n0~~@$bctr$pn0r18__default_init_tag~$qRpn0rn1
        add     esp,byte 0ch
        mov     dword [ebp-0350h+014h],018h
        mov     dword [ebp-0350h+014h],019h
L_4940:
        mov     dword [ebp-0350h+014h],01ah
; Line 42:     } 
; Line 43:     virtual ~GenericResource(); 
L_4788:
        mov     ebx,dword [ebp-0800h]
; Line 277:                 break; 
        mov     eax,dword [ebp-07e8h]
        mov     dword [eax],01bh
        lea     eax,[ebp-05ch]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bdtr$qv
        pop     ecx
L_4956:
        jmp     L_3308
L_4970:
L_3321:
; Line 278:             case (kw)-2: 
; Line 279:                 rv = new GenericResource(ResourceId(val), id, info); 
; Line 279:                 rv = new GenericResource(ResourceId(val), id, info); 
        push    byte 04ch
        call    @$bnew$qui
        pop     ecx
        mov     dword [ebp-07fch],eax
        mov     ecx,eax
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        and     ecx,ecx
        je      L_4973
        mov     ebx,dword [ebp-07fch]
        mov     esi,dword [ebp-080ch]
        lea     eax,[ebp-078h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        mov     dword [ebp-0350h+014h],01dh
        mov     dword [ebp-078h+014h],esi
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-0350h+014h],01eh
        mov     esi,ebx
        mov     ecx,@Resource@_$vt+0ch
        mov     eax,esi
        mov     dword [eax],ecx
        mov     eax,esi
        add     eax,byte 04h
        mov     ecx,dword [ebp-040h]
        mov     dword [eax],ecx
        mov     ecx,dword [ebp-040h+04h]
        mov     dword [eax+04h],ecx
        mov     ecx,dword [ebp-040h+08h]
        mov     dword [eax+08h],ecx
        mov     ecx,dword [ebp-040h+0ch]
        mov     dword [eax+0ch],ecx
        mov     dword [ebp-0350h+014h],01fh
        mov     edi,esi
        add     edi,byte 014h
        mov     eax,edi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],020h
; Line 42:         id = Old.id; 
        mov     eax,dword [ebp-078h+014h]
        mov     dword [edi+014h],eax
        lea     eax,[ebp-078h]
        push    eax
        mov     eax,edi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 44:     } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
        mov     dword [ebp-0350h+014h],021h
        add     esi,byte 02ch
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],022h
; Line 42:         id = Old.id; 
        mov     eax,dword [ebp-030h+014h]
        mov     dword [esi+014h],eax
        lea     eax,[ebp-030h]
        push    eax
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 44:     } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
        mov     dword [ebp-0350h+014h],023h
        mov     dword [ebp-0350h+014h],024h
        mov     ecx,@GenericResource@_$vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        mov     ecx,ebx
        add     ecx,byte 044h
; Line 2484:   _LIBCPP_INLINE_VISIBILITY 
; Line 2485:   _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {} 
; Line 2485:   _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {} 
        mov     dword [ebp-0764h],00h
        lea     eax,[ebp-0764h]
        mov     dword [ebp-0350h+014h],025h
        push    eax
        xor     eax,eax
        mov     dword [ebp-0768h],eax
        lea     eax,[ebp-0768h]
        push    eax
        mov     eax,ecx
        push    eax
        call    @std@__1@#__compressed_pair$p12ResourceData#default_delete$n0~~@$bctr$pn0r18__default_init_tag~$qRpn0rn1
        add     esp,byte 0ch
        mov     dword [ebp-0350h+014h],026h
        mov     dword [ebp-0350h+014h],027h
L_5123:
        mov     dword [ebp-0350h+014h],028h
; Line 42:     } 
; Line 43:     virtual ~GenericResource(); 
L_4973:
        mov     ebx,dword [ebp-07fch]
; Line 280:                 break; 
        mov     eax,dword [ebp-07e8h]
        mov     dword [eax],029h
        lea     eax,[ebp-078h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bdtr$qv
        pop     ecx
L_5139:
        jmp     L_3308
L_5153:
L_3323:
; Line 281:             case kw::ACCELERATORS: 
; Line 282:                 rv = new Accelerators(id, info); 
; Line 282:                 rv = new Accelerators(id, info); 
        push    byte 06ch
        call    @$bnew$qui
        pop     ecx
        mov     dword [ebp-07cch],eax
        mov     ecx,eax
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        and     ecx,ecx
        je      L_5156
        mov     eax,dword [ebp-07cch]
        mov     dword [ebp-07ach],eax
        mov     ebx,dword [ebp-07ach]
        mov     dword [ebp-0404h],09h
        mov     ecx,@Resource@_$vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,dword [ebp-040h]
        mov     dword [eax],ecx
        mov     ecx,dword [ebp-040h+04h]
        mov     dword [eax+04h],ecx
        mov     ecx,dword [ebp-040h+08h]
        mov     dword [eax+08h],ecx
        mov     ecx,dword [ebp-040h+0ch]
        mov     dword [eax+0ch],ecx
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        mov     dword [ebp-0350h+014h],02bh
        mov     esi,ebx
        add     esi,byte 014h
        mov     edi,dword [ebp-0404h]
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],02ch
        mov     dword [esi+014h],edi
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-0350h+014h],02dh
        add     ebx,byte 02ch
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],02eh
; Line 42:         id = Old.id; 
        mov     eax,dword [ebp-030h+014h]
        mov     dword [ebx+014h],eax
        lea     eax,[ebp-030h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 44:     } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
        mov     dword [ebp-0350h+014h],02fh
        mov     dword [ebp-0350h+014h],030h
        mov     ecx,@Accelerators@_$vt+0ch
        mov     eax,dword [ebp-07ach]
        mov     dword [eax],ecx
        mov     eax,dword [ebp-07ach]
        add     eax,byte 044h
        push    eax
        call    @std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],031h
        mov     dword [ebp-0350h+014h],032h
L_5156:
        mov     ebx,dword [ebp-07cch]
; Line 283:                 break; 
        jmp     L_3308
L_3325:
; Line 284:             case kw::TBITMAP: 
; Line 285:                 rv = new Bitmap(id, info); 
; Line 285:                 rv = new Bitmap(id, info); 
        push    byte 04ch
        call    @$bnew$qui
        pop     ecx
        mov     dword [ebp-07f8h],eax
        mov     ecx,eax
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        and     ecx,ecx
        je      L_5263
        mov     eax,dword [ebp-07f8h]
        mov     dword [ebp-07b4h],eax
        mov     ebx,dword [ebp-07b4h]
        mov     dword [ebp-043ch],02h
        mov     ecx,@Resource@_$vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,dword [ebp-040h]
        mov     dword [eax],ecx
        mov     ecx,dword [ebp-040h+04h]
        mov     dword [eax+04h],ecx
        mov     ecx,dword [ebp-040h+08h]
        mov     dword [eax+08h],ecx
        mov     ecx,dword [ebp-040h+0ch]
        mov     dword [eax+0ch],ecx
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        mov     dword [ebp-0350h+014h],033h
        mov     esi,ebx
        add     esi,byte 014h
        mov     edi,dword [ebp-043ch]
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],034h
        mov     dword [esi+014h],edi
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-0350h+014h],035h
        add     ebx,byte 02ch
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],036h
; Line 42:         id = Old.id; 
        mov     eax,dword [ebp-030h+014h]
        mov     dword [ebx+014h],eax
        lea     eax,[ebp-030h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 44:     } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
        mov     dword [ebp-0350h+014h],037h
        mov     dword [ebp-0350h+014h],038h
        mov     ecx,@Bitmap@_$vt+0ch
        mov     eax,dword [ebp-07b4h]
        mov     dword [eax],ecx
        mov     ecx,dword [ebp-07b4h]
        add     ecx,byte 044h
; Line 2484:   _LIBCPP_INLINE_VISIBILITY 
; Line 2485:   _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {} 
; Line 2485:   _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {} 
        mov     dword [ebp-076ch],00h
        lea     eax,[ebp-076ch]
        mov     dword [ebp-0350h+014h],039h
        push    eax
        xor     eax,eax
        mov     dword [ebp-0770h],eax
        lea     eax,[ebp-0770h]
        push    eax
        mov     eax,ecx
        push    eax
        call    @std@__1@#__compressed_pair$p12ResourceData#default_delete$n0~~@$bctr$pn0r18__default_init_tag~$qRpn0rn1
        add     esp,byte 0ch
        mov     dword [ebp-0350h+014h],03ah
        mov     dword [ebp-0350h+014h],03bh
L_5395:
        mov     dword [ebp-0350h+014h],03ch
; Line 2450:                              __identity<deleter_type>, _Dummy>::type> 
; Line 2455:   template <class _ArgType> 
; Line 2455:   template <class _ArgType> 
L_5263:
        mov     ebx,dword [ebp-07f8h]
; Line 286:                 break; 
        jmp     L_3308
L_3327:
; Line 287:             case kw::CURSOR: 
; Line 288:                 rv = new GroupCursor(id, info); 
; Line 288:                 rv = new GroupCursor(id, info); 
        push    byte 06ch
        call    @$bnew$qui
        pop     ecx
        mov     dword [ebp-07c4h],eax
        mov     ecx,eax
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        and     ecx,ecx
        je      L_5400
        mov     eax,dword [ebp-07c4h]
        mov     dword [ebp-07a8h],eax
        mov     ebx,dword [ebp-07a8h]
        mov     dword [ebp-0480h],0ch
        mov     ecx,@Resource@_$vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,dword [ebp-040h]
        mov     dword [eax],ecx
        mov     ecx,dword [ebp-040h+04h]
        mov     dword [eax+04h],ecx
        mov     ecx,dword [ebp-040h+08h]
        mov     dword [eax+08h],ecx
        mov     ecx,dword [ebp-040h+0ch]
        mov     dword [eax+0ch],ecx
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        mov     dword [ebp-0350h+014h],03dh
        mov     esi,ebx
        add     esi,byte 014h
        mov     edi,dword [ebp-0480h]
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],03eh
        mov     dword [esi+014h],edi
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-0350h+014h],03fh
        add     ebx,byte 02ch
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],040h
; Line 42:         id = Old.id; 
        mov     eax,dword [ebp-030h+014h]
        mov     dword [ebx+014h],eax
        lea     eax,[ebp-030h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 44:     } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
        mov     dword [ebp-0350h+014h],041h
        mov     dword [ebp-0350h+014h],042h
        mov     ecx,@GroupCursor@_$vt+0ch
        mov     eax,dword [ebp-07a8h]
        mov     dword [eax],ecx
        mov     eax,dword [ebp-07a8h]
        add     eax,byte 044h
        push    eax
        call    @std@__1@#__deque_base$p6Cursor#allocator$pn0~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],043h
        mov     dword [ebp-0350h+014h],044h
L_5400:
        mov     ebx,dword [ebp-07c4h]
; Line 289:                 break; 
        jmp     L_3308
L_3329:
; Line 290:             case kw::DIALOG: 
; Line 291:                 rv = new Dialog(id, info, false); 
; Line 291:                 rv = new Dialog(id, info, false); 
        push    dword 0f4h
        call    @$bnew$qui
        pop     ecx
        mov     dword [ebp-07e0h],eax
        mov     ecx,eax
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        and     ecx,ecx
        je      L_5507
        mov     ebx,dword [ebp-07e0h]
        xor     al,al
        mov     byte [ebp-0806h],al
        mov     esi,ebx
        mov     dword [ebp-04bch],05h
        mov     ecx,@Resource@_$vt+0ch
        mov     eax,esi
        mov     dword [eax],ecx
        mov     eax,esi
        add     eax,byte 04h
        mov     ecx,dword [ebp-040h]
        mov     dword [eax],ecx
        mov     ecx,dword [ebp-040h+04h]
        mov     dword [eax+04h],ecx
        mov     ecx,dword [ebp-040h+08h]
        mov     dword [eax+08h],ecx
        mov     ecx,dword [ebp-040h+0ch]
        mov     dword [eax+0ch],ecx
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        mov     dword [ebp-0350h+014h],045h
        mov     edi,esi
        add     edi,byte 014h
        mov     eax,dword [ebp-04bch]
        mov     dword [ebp-0798h],eax
        mov     eax,edi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],046h
        mov     eax,dword [ebp-0798h]
        mov     dword [edi+014h],eax
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-0350h+014h],047h
        add     esi,byte 02ch
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],048h
; Line 42:         id = Old.id; 
        mov     eax,dword [ebp-030h+014h]
        mov     dword [esi+014h],eax
        lea     eax,[ebp-030h]
        push    eax
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 44:     } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
        mov     dword [ebp-0350h+014h],049h
        mov     dword [ebp-0350h+014h],04ah
        mov     ecx,@Dialog@_$vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        mov     dword [ebx+044h],00h
        mov     dword [ebx+048h],00h
        mov     dword [ebx+04ch],00h
        mov     eax,ebx
        add     eax,byte 050h
        mov     dword [eax],00h
        mov     dword [eax+04h],00h
        mov     dword [ebp-0350h+014h],04bh
        mov     eax,ebx
        add     eax,byte 058h
        mov     dword [eax],00h
        mov     dword [eax+04h],00h
        mov     dword [ebp-0350h+014h],04ch
        mov     esi,ebx
        add     esi,byte 060h
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],04dh
        mov     dword [esi+014h],0ffffffffh
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-0350h+014h],04eh
        mov     esi,ebx
        add     esi,byte 078h
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],04fh
        mov     dword [esi+014h],0ffffffffh
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-0350h+014h],050h
        mov     eax,ebx
        add     eax,dword 090h
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],051h
        mov     eax,ebx
        add     eax,dword 0a4h
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],052h
        mov     eax,ebx
        add     eax,dword 0b8h
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],053h
        mov     dword [ebp-0350h+014h],054h
        mov     al,byte [ebp-0806h]
        mov     byte [ebx+0e0h],al
        mov     dword [ebx+0e4h],00h
        mov     dword [ebx+0e8h],00h
        mov     dword [ebx+0ech],01h
        mov     dword [ebx+0f0h],00h
; Line 104:     } 
; Line 105:     virtual ~Dialog(); 
L_5507:
        mov     ebx,dword [ebp-07e0h]
; Line 292:                 break; 
        jmp     L_3308
L_3331:
; Line 293:             case kw::DIALOGEX: 
; Line 294:                 rv = new Dialog(id, info, true); 
; Line 294:                 rv = new Dialog(id, info, true); 
        push    dword 0f4h
        call    @$bnew$qui
        pop     ecx
        mov     dword [ebp-07e4h],eax
        mov     ecx,eax
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        and     ecx,ecx
        je      L_5686
        mov     ebx,dword [ebp-07e4h]
        mov     byte [ebp-0805h],01h
        mov     eax,ebx
        mov     dword [ebp-079ch],eax
        mov     dword [ebp-0508h],05h
        mov     ecx,@Resource@_$vt+0ch
        mov     eax,dword [ebp-079ch]
        mov     dword [eax],ecx
        mov     eax,dword [ebp-079ch]
        add     eax,byte 04h
        mov     ecx,dword [ebp-040h]
        mov     dword [eax],ecx
        mov     ecx,dword [ebp-040h+04h]
        mov     dword [eax+04h],ecx
        mov     ecx,dword [ebp-040h+08h]
        mov     dword [eax+08h],ecx
        mov     ecx,dword [ebp-040h+0ch]
        mov     dword [eax+0ch],ecx
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        mov     dword [ebp-0350h+014h],055h
        mov     edi,dword [ebp-079ch]
        add     edi,byte 014h
        mov     esi,dword [ebp-0508h]
        mov     eax,edi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],056h
        mov     dword [edi+014h],esi
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-0350h+014h],057h
        mov     esi,dword [ebp-079ch]
        add     esi,byte 02ch
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],058h
; Line 42:         id = Old.id; 
        mov     eax,dword [ebp-030h+014h]
        mov     dword [esi+014h],eax
        lea     eax,[ebp-030h]
        push    eax
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 44:     } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
        mov     dword [ebp-0350h+014h],059h
        mov     dword [ebp-0350h+014h],05ah
        mov     ecx,@Dialog@_$vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        mov     dword [ebx+044h],00h
        mov     dword [ebx+048h],00h
        mov     dword [ebx+04ch],00h
        mov     eax,ebx
        add     eax,byte 050h
        mov     dword [eax],00h
        mov     dword [eax+04h],00h
        mov     dword [ebp-0350h+014h],05bh
        mov     eax,ebx
        add     eax,byte 058h
        mov     dword [eax],00h
        mov     dword [eax+04h],00h
        mov     dword [ebp-0350h+014h],05ch
        mov     esi,ebx
        add     esi,byte 060h
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],05dh
        mov     dword [esi+014h],0ffffffffh
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-0350h+014h],05eh
        mov     esi,ebx
        add     esi,byte 078h
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],05fh
        mov     dword [esi+014h],0ffffffffh
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-0350h+014h],060h
        mov     eax,ebx
        add     eax,dword 090h
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],061h
        mov     eax,ebx
        add     eax,dword 0a4h
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],062h
        mov     eax,ebx
        add     eax,dword 0b8h
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],063h
        mov     dword [ebp-0350h+014h],064h
        mov     al,byte [ebp-0805h]
        mov     byte [ebx+0e0h],al
        mov     dword [ebx+0e4h],00h
        mov     dword [ebx+0e8h],00h
        mov     dword [ebx+0ech],01h
        mov     dword [ebx+0f0h],00h
; Line 104:     } 
; Line 105:     virtual ~Dialog(); 
L_5686:
        mov     ebx,dword [ebp-07e4h]
; Line 295:                 break; 
        jmp     L_3308
L_3333:
; Line 296:             case kw::DLGINCLUDE: 
; Line 297:                 rv = new DlgInclude(id, info); 
; Line 297:                 rv = new DlgInclude(id, info); 
        push    byte 04ch
        call    @$bnew$qui
        pop     ecx
        mov     dword [ebp-07f4h],eax
        mov     ecx,eax
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        and     ecx,ecx
        je      L_5865
        mov     eax,dword [ebp-07f4h]
        mov     dword [ebp-07bch],eax
        mov     ebx,dword [ebp-07bch]
        mov     dword [ebp-0550h],011h
        mov     ecx,@Resource@_$vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,dword [ebp-040h]
        mov     dword [eax],ecx
        mov     ecx,dword [ebp-040h+04h]
        mov     dword [eax+04h],ecx
        mov     ecx,dword [ebp-040h+08h]
        mov     dword [eax+08h],ecx
        mov     ecx,dword [ebp-040h+0ch]
        mov     dword [eax+0ch],ecx
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        mov     dword [ebp-0350h+014h],065h
        mov     esi,ebx
        add     esi,byte 014h
        mov     edi,dword [ebp-0550h]
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],066h
        mov     dword [esi+014h],edi
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-0350h+014h],067h
        add     ebx,byte 02ch
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],068h
; Line 42:         id = Old.id; 
        mov     eax,dword [ebp-030h+014h]
        mov     dword [ebx+014h],eax
        lea     eax,[ebp-030h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 44:     } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
        mov     dword [ebp-0350h+014h],069h
        mov     dword [ebp-0350h+014h],06ah
        mov     ecx,@DlgInclude@_$vt+0ch
        mov     eax,dword [ebp-07bch]
        mov     dword [eax],ecx
        mov     ecx,dword [ebp-07bch]
        add     ecx,byte 044h
; Line 2484:   _LIBCPP_INLINE_VISIBILITY 
; Line 2485:   _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {} 
; Line 2485:   _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {} 
        mov     dword [ebp-0774h],00h
        lea     eax,[ebp-0774h]
        mov     dword [ebp-0350h+014h],06bh
        push    eax
        xor     eax,eax
        mov     dword [ebp-0778h],eax
        lea     eax,[ebp-0778h]
        push    eax
        mov     eax,ecx
        push    eax
        call    @std@__1@#__compressed_pair$p12ResourceData#default_delete$n0~~@$bctr$pn0r18__default_init_tag~$qRpn0rn1
        add     esp,byte 0ch
        mov     dword [ebp-0350h+014h],06ch
        mov     dword [ebp-0350h+014h],06dh
L_5997:
        mov     dword [ebp-0350h+014h],06eh
; Line 2450:                              __identity<deleter_type>, _Dummy>::type> 
; Line 2455:   template <class _ArgType> 
; Line 2455:   template <class _ArgType> 
L_5865:
        mov     ebx,dword [ebp-07f4h]
; Line 298:                 break; 
        jmp     L_3308
L_3335:
; Line 299:             case kw::FONT: 
; Line 300:                 rv = new Font(id, info); 
; Line 300:                 rv = new Font(id, info); 
        push    byte 04ch
        call    @$bnew$qui
        pop     ecx
        mov     ebx,eax
        and     eax,eax
        je      L_6002
        lea     eax,[ebp-040h]
        push    eax
        lea     eax,[ebp-030h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @Font@$bctr$qrx10ResourceIdrx12ResourceInfo
        add     esp,byte 0ch
L_6002:
; Line 301:                 break; 
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        jmp     L_3308
L_3337:
; Line 302:             case kw::ICON: 
; Line 303:                 rv = new GroupIcon(id, info); 
; Line 303:                 rv = new GroupIcon(id, info); 
        push    byte 06ch
        call    @$bnew$qui
        pop     ecx
        mov     dword [ebp-07d0h],eax
        mov     ecx,eax
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        and     ecx,ecx
        je      L_6003
        mov     eax,dword [ebp-07d0h]
        mov     dword [ebp-07c0h],eax
        mov     ebx,dword [ebp-07c0h]
        mov     dword [ebp-0594h],0eh
        mov     ecx,@Resource@_$vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,dword [ebp-040h]
        mov     dword [eax],ecx
        mov     ecx,dword [ebp-040h+04h]
        mov     dword [eax+04h],ecx
        mov     ecx,dword [ebp-040h+08h]
        mov     dword [eax+08h],ecx
        mov     ecx,dword [ebp-040h+0ch]
        mov     dword [eax+0ch],ecx
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        mov     dword [ebp-0350h+014h],06fh
        mov     esi,ebx
        add     esi,byte 014h
        mov     edi,dword [ebp-0594h]
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],070h
        mov     dword [esi+014h],edi
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-0350h+014h],071h
        add     ebx,byte 02ch
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],072h
; Line 42:         id = Old.id; 
        mov     eax,dword [ebp-030h+014h]
        mov     dword [ebx+014h],eax
        lea     eax,[ebp-030h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 44:     } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
        mov     dword [ebp-0350h+014h],073h
        mov     dword [ebp-0350h+014h],074h
        mov     ecx,@GroupIcon@_$vt+0ch
        mov     eax,dword [ebp-07c0h]
        mov     dword [eax],ecx
        mov     eax,dword [ebp-07c0h]
        add     eax,byte 044h
        push    eax
        call    @std@__1@#__deque_base$p4Icon#allocator$pn0~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],075h
        mov     dword [ebp-0350h+014h],076h
L_6003:
        mov     ebx,dword [ebp-07d0h]
; Line 304:                 break; 
        jmp     L_3308
L_3339:
; Line 305:             case kw::MENU: 
; Line 306:                 rv = new Menu(id, info, false); 
; Line 306:                 rv = new Menu(id, info, false); 
        push    byte 074h
        call    @$bnew$qui
        pop     ecx
        mov     dword [ebp-07d8h],eax
        mov     ecx,eax
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        and     ecx,ecx
        je      L_6110
        mov     eax,dword [ebp-07d8h]
        mov     dword [ebp-07a0h],eax
        xor     al,al
        mov     byte [ebp-07e9h],al
        mov     ebx,dword [ebp-07a0h]
        mov     dword [ebp-05d0h],04h
        mov     ecx,@Resource@_$vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,dword [ebp-040h]
        mov     dword [eax],ecx
        mov     ecx,dword [ebp-040h+04h]
        mov     dword [eax+04h],ecx
        mov     ecx,dword [ebp-040h+08h]
        mov     dword [eax+08h],ecx
        mov     ecx,dword [ebp-040h+0ch]
        mov     dword [eax+0ch],ecx
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        mov     dword [ebp-0350h+014h],077h
        mov     esi,ebx
        add     esi,byte 014h
        mov     edi,dword [ebp-05d0h]
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],078h
        mov     dword [esi+014h],edi
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-0350h+014h],079h
        add     ebx,byte 02ch
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],07ah
; Line 42:         id = Old.id; 
        mov     eax,dword [ebp-030h+014h]
        mov     dword [ebx+014h],eax
        lea     eax,[ebp-030h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 44:     } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
        mov     dword [ebp-0350h+014h],07bh
        mov     dword [ebp-0350h+014h],07ch
        mov     ecx,@Menu@_$vt+0ch
        mov     eax,dword [ebp-07a0h]
        mov     dword [eax],ecx
        mov     eax,dword [ebp-07a0h]
        add     eax,byte 044h
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],07dh
        mov     dword [ebp-0350h+014h],07eh
        mov     eax,dword [ebp-07a0h]
        mov     dword [eax+06ch],00h
        mov     al,byte [ebp-07e9h]
        mov     ecx,dword [ebp-07a0h]
        mov     byte [ecx+070h],al
L_6110:
        mov     ebx,dword [ebp-07d8h]
; Line 307:                 break; 
        jmp     L_3308
L_3341:
; Line 308:             case kw::MENUEX: 
; Line 309:                 rv = new Menu(id, info, true); 
; Line 309:                 rv = new Menu(id, info, true); 
        push    byte 074h
        call    @$bnew$qui
        pop     ecx
        mov     dword [ebp-07c8h],eax
        mov     ecx,eax
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        and     ecx,ecx
        je      L_6217
        mov     eax,dword [ebp-07c8h]
        mov     dword [ebp-07a4h],eax
        mov     byte [ebp-07eah],01h
        mov     ebx,dword [ebp-07a4h]
        mov     dword [ebp-060ch],04h
        mov     ecx,@Resource@_$vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,dword [ebp-040h]
        mov     dword [eax],ecx
        mov     ecx,dword [ebp-040h+04h]
        mov     dword [eax+04h],ecx
        mov     ecx,dword [ebp-040h+08h]
        mov     dword [eax+08h],ecx
        mov     ecx,dword [ebp-040h+0ch]
        mov     dword [eax+0ch],ecx
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        mov     dword [ebp-0350h+014h],07fh
        mov     esi,ebx
        add     esi,byte 014h
        mov     edi,dword [ebp-060ch]
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],080h
        mov     dword [esi+014h],edi
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-0350h+014h],081h
        add     ebx,byte 02ch
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],082h
; Line 42:         id = Old.id; 
        mov     eax,dword [ebp-030h+014h]
        mov     dword [ebx+014h],eax
        lea     eax,[ebp-030h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 44:     } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
        mov     dword [ebp-0350h+014h],083h
        mov     dword [ebp-0350h+014h],084h
        mov     ecx,@Menu@_$vt+0ch
        mov     eax,dword [ebp-07a4h]
        mov     dword [eax],ecx
        mov     eax,dword [ebp-07a4h]
        add     eax,byte 044h
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],085h
        mov     dword [ebp-0350h+014h],086h
        mov     eax,dword [ebp-07a4h]
        mov     dword [eax+06ch],00h
        mov     al,byte [ebp-07eah]
        mov     ecx,dword [ebp-07a4h]
        mov     byte [ecx+070h],al
L_6217:
        mov     ebx,dword [ebp-07c8h]
; Line 310:                 break; 
        jmp     L_3308
L_3343:
; Line 311:             case kw::RCDATA: 
; Line 312:                 rv = new RCData(id, info); 
; Line 312:                 rv = new RCData(id, info); 
        push    byte 06ch
        call    @$bnew$qui
        pop     ecx
        mov     dword [ebp-07dch],eax
        mov     ecx,eax
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        and     ecx,ecx
        je      L_6324
        mov     eax,dword [ebp-07dch]
        mov     dword [ebp-07b0h],eax
        mov     ebx,dword [ebp-07b0h]
        mov     dword [ebp-0644h],0ah
        mov     ecx,@Resource@_$vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,dword [ebp-040h]
        mov     dword [eax],ecx
        mov     ecx,dword [ebp-040h+04h]
        mov     dword [eax+04h],ecx
        mov     ecx,dword [ebp-040h+08h]
        mov     dword [eax+08h],ecx
        mov     ecx,dword [ebp-040h+0ch]
        mov     dword [eax+0ch],ecx
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        mov     dword [ebp-0350h+014h],087h
        mov     esi,ebx
        add     esi,byte 014h
        mov     edi,dword [ebp-0644h]
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],088h
        mov     dword [esi+014h],edi
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-0350h+014h],089h
        add     ebx,byte 02ch
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],08ah
; Line 42:         id = Old.id; 
        mov     eax,dword [ebp-030h+014h]
        mov     dword [ebx+014h],eax
        lea     eax,[ebp-030h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 44:     } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
        mov     dword [ebp-0350h+014h],08bh
        mov     dword [ebp-0350h+014h],08ch
        mov     ecx,@RCData@_$vt+0ch
        mov     eax,dword [ebp-07b0h]
        mov     dword [eax],ecx
        mov     eax,dword [ebp-07b0h]
        add     eax,byte 044h
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],08dh
        mov     dword [ebp-0350h+014h],08eh
L_6324:
        mov     ebx,dword [ebp-07dch]
; Line 313:                 break; 
        jmp     L_3308
L_3345:
; Line 314:             case kw::VERSIONINFO: 
; Line 315:                 rv = new VersionInfo(id, info); 
; Line 315:                 rv = new VersionInfo(id, info); 
        push    dword 09ch
        call    @$bnew$qui
        pop     ecx
        mov     dword [ebp-07d4h],eax
        mov     ecx,eax
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        and     ecx,ecx
        je      L_6431
        mov     ebx,dword [ebp-07d4h]
        mov     eax,ebx
        mov     dword [ebp-0794h],eax
        mov     dword [ebp-067ch],010h
        mov     ecx,@Resource@_$vt+0ch
        mov     eax,dword [ebp-0794h]
        mov     dword [eax],ecx
        mov     eax,dword [ebp-0794h]
        add     eax,byte 04h
        mov     ecx,dword [ebp-040h]
        mov     dword [eax],ecx
        mov     ecx,dword [ebp-040h+04h]
        mov     dword [eax+04h],ecx
        mov     ecx,dword [ebp-040h+08h]
        mov     dword [eax+08h],ecx
        mov     ecx,dword [ebp-040h+0ch]
        mov     dword [eax+0ch],ecx
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        mov     dword [ebp-0350h+014h],08fh
        mov     esi,dword [ebp-0794h]
        add     esi,byte 014h
        mov     edi,dword [ebp-067ch]
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],090h
        mov     dword [esi+014h],edi
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-0350h+014h],091h
        mov     esi,dword [ebp-0794h]
        add     esi,byte 02ch
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],092h
; Line 42:         id = Old.id; 
        mov     eax,dword [ebp-030h+014h]
        mov     dword [esi+014h],eax
        lea     eax,[ebp-030h]
        push    eax
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 44:     } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
        mov     dword [ebp-0350h+014h],093h
        mov     dword [ebp-0350h+014h],094h
        mov     ecx,@VersionInfo@_$vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        mov     byte [ebx+044h],00h
        mov     dword [ebx+048h],00h
        mov     dword [ebx+04ch],00h
        mov     dword [ebx+050h],00h
        mov     dword [ebx+054h],00h
        mov     dword [ebx+058h],00h
        mov     dword [ebx+05ch],00h
        mov     dword [ebx+060h],00h
        mov     dword [ebx+064h],00h
        mov     dword [ebx+068h],00h
        mov     dword [ebx+06ch],00h
        mov     dword [ebx+070h],00h
        mov     eax,ebx
        add     eax,byte 074h
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],095h
        mov     dword [ebp-0350h+014h],096h
; Line 123:     } 
; Line 124:     virtual ~VersionInfo(); 
L_6431:
        mov     ebx,dword [ebp-07d4h]
; Line 316:                 break; 
        jmp     L_3308
L_3347:
; Line 317:             case kw::MESSAGETABLE: 
; Line 318:                 rv = new MessageTable(id, info); 
; Line 318:                 rv = new MessageTable(id, info); 
        push    byte 04ch
        call    @$bnew$qui
        pop     ecx
        mov     dword [ebp-07f0h],eax
        mov     ecx,eax
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        and     ecx,ecx
        je      L_6538
        mov     eax,dword [ebp-07f0h]
        mov     dword [ebp-07b8h],eax
        mov     ebx,dword [ebp-07b8h]
        mov     dword [ebp-06b4h],0bh
        mov     ecx,@Resource@_$vt+0ch
        mov     eax,ebx
        mov     dword [eax],ecx
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,dword [ebp-040h]
        mov     dword [eax],ecx
        mov     ecx,dword [ebp-040h+04h]
        mov     dword [eax+04h],ecx
        mov     ecx,dword [ebp-040h+08h]
        mov     dword [eax+08h],ecx
        mov     ecx,dword [ebp-040h+0ch]
        mov     dword [eax+0ch],ecx
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        mov     dword [ebp-0350h+014h],097h
        mov     esi,ebx
        add     esi,byte 014h
        mov     edi,dword [ebp-06b4h]
        mov     eax,esi
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],098h
        mov     dword [esi+014h],edi
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-0350h+014h],099h
        add     ebx,byte 02ch
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-0350h+014h],09ah
; Line 42:         id = Old.id; 
        mov     eax,dword [ebp-030h+014h]
        mov     dword [ebx+014h],eax
        lea     eax,[ebp-030h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 44:     } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
        mov     dword [ebp-0350h+014h],09bh
        mov     dword [ebp-0350h+014h],09ch
        mov     ecx,@MessageTable@_$vt+0ch
        mov     eax,dword [ebp-07b8h]
        mov     dword [eax],ecx
        mov     ecx,dword [ebp-07b8h]
        add     ecx,byte 044h
; Line 2484:   _LIBCPP_INLINE_VISIBILITY 
; Line 2485:   _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {} 
; Line 2485:   _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {} 
        mov     dword [ebp-077ch],00h
        lea     eax,[ebp-077ch]
        mov     dword [ebp-0350h+014h],09dh
        push    eax
        xor     eax,eax
        mov     dword [ebp-0780h],eax
        lea     eax,[ebp-0780h]
        push    eax
        mov     eax,ecx
        push    eax
        call    @std@__1@#__compressed_pair$p12ResourceData#default_delete$n0~~@$bctr$pn0r18__default_init_tag~$qRpn0rn1
        add     esp,byte 0ch
        mov     dword [ebp-0350h+014h],09eh
        mov     dword [ebp-0350h+014h],09fh
L_6670:
        mov     dword [ebp-0350h+014h],0a0h
; Line 2450:                              __identity<deleter_type>, _Dummy>::type> 
; Line 2455:   template <class _ArgType> 
; Line 2455:   template <class _ArgType> 
L_6538:
        mov     ebx,dword [ebp-07f0h]
; Line 319:                 break; 
        jmp     L_3308
L_3349:
; Line 320:             case kw::STRINGTABLE: 
; Line 321:             { 
; Line 321:             { 
; Line 322:                 std::unique_ptr<StringTable> temp = std::make_unique<StringTable>(info); 
        lea     eax,[ebp-040h]
        push    eax
        lea     eax,[ebp-0e4h]
        push    eax
        call    @std@__1@#make_unique$11StringTabler12ResourceInfo~$qrn1
        pop     ecx
        pop     ecx
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        mov     dword [ebp-0350h+014h],0a1h
; Line 323:                 temp->ReadRC(*this); 
        mov     eax,dword [ebp-0804h]
        push    eax
; Line 2587:     return __ptr_.first(); 
        lea     eax,[ebp-0e4h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [ebp-0784h],eax
        and     eax,eax
        je      L_6720
        mov     eax,dword [ebp-0784h]
        jmp     L_6721
L_6720:
        mov     eax,dword [ebp-0784h]
L_6721:
; Line 2310:   } 
        mov     eax,dword [eax]
; Line 2588:   } 
; Line 2589:   _LIBCPP_INLINE_VISIBILITY 
; Line 2589:   _LIBCPP_INLINE_VISIBILITY 
        push    eax
; Line 2587:     return __ptr_.first(); 
        lea     eax,[ebp-0e4h]
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [ebp-0784h],eax
        and     eax,eax
        je      L_6770
        mov     eax,dword [ebp-0784h]
        jmp     L_6771
L_6770:
        mov     eax,dword [ebp-0784h]
L_6771:
; Line 2310:   } 
        mov     eax,dword [eax]
; Line 2588:   } 
; Line 2589:   _LIBCPP_INLINE_VISIBILITY 
; Line 2589:   _LIBCPP_INLINE_VISIBILITY 
        mov     eax,dword [eax]
        call    dword [eax+08h]
        pop     ecx
        pop     ecx
; Line 324:                 rv = nullptr; 
        xor     ebx,ebx
; Line 325:                 done = false; 
        xor     al,al
        mov     byte [ebp-0807h],al
; Line 326:             } 
        mov     dword [ebp-0350h+014h],0a2h
        lea     eax,[ebp-0e4h]
        mov     esi,eax
        mov     edx,esi
        xor     edi,edi
; Line 2615:     pointer __tmp = __ptr_.first(); 
        mov     eax,edx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [ebp-0788h],eax
        and     eax,eax
        je      L_6840
        mov     eax,dword [ebp-0788h]
        jmp     L_6841
L_6840:
        mov     eax,dword [ebp-0788h]
L_6841:
; Line 2305:   } 
        mov     ecx,dword [eax]
        mov     eax,edx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [ebp-0788h],eax
        and     eax,eax
        je      L_6874
        mov     eax,dword [ebp-0788h]
        jmp     L_6875
L_6874:
        mov     eax,dword [ebp-0788h]
L_6875:
; Line 2305:   } 
        mov     dword [eax],edi
        and     ecx,ecx
        je      L_6791
        mov     eax,edx
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [ebp-078ch],eax
L_6923:
L_6924:
; Line 2315:   } 
; Line 2359:     static_assert(sizeof(_Tp) > 0, 
        mov     dword [ebp-0790h],ecx
        and     ecx,ecx
        je      L_6927
        mov     eax,dword [ebp-0790h]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax]
        pop     ecx
        mov     eax,dword [ebp-0790h]
        push    eax
        call    @$bdel$qpv
        pop     ecx
L_6927:
; Line 2364:   } 
; Line 2365: }; 
; Line 2365: }; 
L_6891:
L_6791:
; Line 2619:   } 
L_6808:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@__1@#default_delete$11StringTable~@$bdtr$qv
        pop     ecx
L_6954:
L_6968:
L_6941:
L_6788:
; Line 327:             break; 
        jmp     L_3308
L_3353:
; Line 328:             case kw::LANGUAGE: 
; Line 329:             { 
; Line 329:             { 
; Line 330:                 language = GetNumber(); 
        mov     eax,dword [ebp-0804h]
        push    eax
        call    @RCFile@GetNumber$qv
        pop     ecx
        mov     ecx,eax
        mov     eax,dword [ebp-0804h]
        mov     dword [eax+020h],ecx
; Line 331:                 SkipComma(); 
        mov     edi,dword [ebp-0804h]
        push    edi
        call    @RCFile@SkipComma$qv
        pop     ecx
; Line 332:                 language |= GetNumber() << 10; 
        mov     eax,dword [ebp-0804h]
        mov     esi,dword [eax+020h]
        push    edi
        call    @RCFile@GetNumber$qv
        pop     ecx
        shl     eax,0ah
        mov     ecx,esi
        or      ecx,eax
        mov     eax,dword [ebp-0804h]
        mov     dword [eax+020h],ecx
; Line 333:                 NeedEol(); 
        mov     eax,dword [ebp-0804h]
        push    eax
        call    @RCFile@NeedEol$qv
        pop     ecx
; Line 334:                 done = false; 
        xor     al,al
        mov     byte [ebp-0807h],al
; Line 335:                 break; 
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        jmp     L_3308
L_3357:
; Line 337:             case kw::RCINCLUDE: 
; Line 338:             { 
; Line 338:             { 
; Line 339:                 std::string name = GetFileName(); 
        mov     eax,dword [ebp-0804h]
        push    eax
        lea     eax,[ebp-0c8h]
        push    eax
        call    @RCFile@GetFileName$qv
        pop     ecx
        pop     ecx
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        mov     dword [ebp-0350h+014h],0a3h
; Line 340:                 pp.IncludeFile(name); 
        mov     eax,dword [ebp-0804h]
        mov     eax,dword [eax+04h]
        add     eax,dword 090h
        push    byte 00h
        push    byte 00h
        push    byte 00h
        lea     ecx,[ebp-0c8h]
        push    ecx
        lea     ecx,[ebp-0c8h]
        push    ecx
        push    eax
        call    @ppInclude@pushFile$qrx#basic_string$c#char_traits$c~#allocator$c~~rx#basic_string$c#char_traits$c~#allocator$c~~4booln0i
        add     esp,byte 018h
L_7001:
L_6986:
; Line 341:             } 
        mov     dword [ebp-0350h+014h],0a4h
        lea     eax,[ebp-0c8h]
        push    eax
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@$bdtr$qv
        pop     ecx
; Line 342:             break; 
        jmp     L_3308
L_3361:
        push    dword @$xt@13runtime_error
        push    dword @std@runtime_error@$bctr$qrx13runtime_error
        push    byte 01h
        push    dword L_3188
        lea     eax,[ebp-0b4h]
        push    eax
        call    @std@runtime_error@$bctr$qpxc
        pop     ecx
        pop     ecx
        mov     dword [ebp-0350h+014h],0a5h
        push    eax
        lea     eax,[ebp-0350h]
        push    eax
        call    @_ThrowException$qpvpvipvpv
        add     esp,byte 014h
; Line 343:             default: 
; Line 344:                 throw std::runtime_error("Invalid resource type"); 
; Line 344:                 throw std::runtime_error("Invalid resource type"); 
        lea     eax,[ebp-0350h+014h]
        mov     dword [ebp-07e8h],eax
        mov     dword [ebp-0350h+014h],0a6h
        lea     eax,[ebp-0b4h]
        push    eax
        call    @std@runtime_error@$bdtr$qv
        pop     ecx
L_3308:
; Line 346:         } 
; Line 347:         if (rv) 
; Line 347:         if (rv) 
        and     ebx,ebx
        je      L_3364
; Line 348:             rv->ReadRC(*this); 
        mov     eax,dword [ebp-0804h]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [eax]
        call    dword [eax+08h]
        pop     ecx
        pop     ecx
L_3364:
; Line 349:     } 
        mov     eax,dword [ebp-07e8h]
        mov     dword [eax],0a8h
L_7016:
L_3194:
; Line 197:     while (!done && !AtEof()) 
        cmp     byte [ebp-0807h],byte 00h
        jne     L_7019
        mov     eax,dword [ebp-0804h]
        add     eax,byte 08h
        mov     al,byte [eax+05h]
        and     al,al
        je      L_3192
L_7019:
L_3193:
; Line 350:     return rv; 
        mov     dword [ebp-0350h+014h],0a9h
        lea     eax,[ebp-030h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bdtr$qv
        pop     ecx
L_7063:
        mov     dword [ebp-0350h+014h],0aah
        lea     eax,[ebp-0c8h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bdtr$qv
        pop     ecx
        mov     eax,ebx
; Line 351: } 
L_7077:
L_3190:
        call    @_RundownException$qv
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
        section vsc@$xt@#__compressed_pair_elem$p11StringTablei?0?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$p11StringTablei?0?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$p11StringTablei?0?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#default_delete$11StringTable~ virtual
        [bits 32]
@$xt@#default_delete$11StringTable~:
        dd      @std@__1@#default_delete$11StringTable~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      064h
        db      065h
        db      066h
        db      061h
        db      075h
        db      06ch
        db      074h
        db      05fh
        db      064h
        db      065h
        db      06ch
        db      065h
        db      074h
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#default_delete$11StringTable~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#default_delete$11StringTable~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#default_delete$11StringTable~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$p11StringTable#default_delete$n0~~ virtual
        [bits 32]
@$xt@#__compressed_pair$p11StringTable#default_delete$n0~~:
        dd      @std@__1@#__compressed_pair$p11StringTable#default_delete$n0~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$p11StringTablei?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#default_delete$11StringTable~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#unique_ptr$11StringTable#default_delete$n0~~ virtual
        [bits 32]
@$xt@#unique_ptr$11StringTable#default_delete$n0~~:
        dd      @std@__1@#unique_ptr$11StringTable#default_delete$n0~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@10ResourceId virtual
        [bits 32]
@$xt@10ResourceId:
        dd      @ResourceId@$bdtr$qv+0
        dd      018h
        dd      0400h
        db      052h
        db      065h
        db      073h
        db      06fh
        db      075h
        db      072h
        db      063h
        db      065h
        db      049h
        db      064h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@12ResourceInfo virtual
        [bits 32]
@$xt@12ResourceInfo:
        dd      @ResourceInfo@$bdtr$qv+0
        dd      010h
        dd      0400h
        db      052h
        db      065h
        db      073h
        db      06fh
        db      075h
        db      072h
        db      063h
        db      065h
        db      049h
        db      06eh
        db      066h
        db      06fh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@8Resource virtual
        [bits 32]
@$xt@8Resource:
        dd      @Resource@$bdtr$qv+0
        dd      044h
        dd      0400h
        db      052h
        db      065h
        db      073h
        db      06fh
        db      075h
        db      072h
        db      063h
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@18__default_init_tag virtual
        [bits 32]
@$xt@18__default_init_tag:
        dd      00h
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      064h
        db      065h
        db      066h
        db      061h
        db      075h
        db      06ch
        db      074h
        db      05fh
        db      069h
        db      06eh
        db      069h
        db      074h
        db      05fh
        db      074h
        db      061h
        db      067h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$p12ResourceDatai?0?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$p12ResourceDatai?0?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$p12ResourceDatai?0?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#default_delete$12ResourceData~ virtual
        [bits 32]
@$xt@#default_delete$12ResourceData~:
        dd      @std@__1@#default_delete$12ResourceData~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      064h
        db      065h
        db      066h
        db      061h
        db      075h
        db      06ch
        db      074h
        db      05fh
        db      064h
        db      065h
        db      06ch
        db      065h
        db      074h
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#default_delete$12ResourceData~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#default_delete$12ResourceData~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#default_delete$12ResourceData~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$p12ResourceData#default_delete$n0~~ virtual
        [bits 32]
@$xt@#__compressed_pair$p12ResourceData#default_delete$n0~~:
        dd      @std@__1@#__compressed_pair$p12ResourceData#default_delete$n0~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$p12ResourceDatai?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#default_delete$12ResourceData~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#unique_ptr$12ResourceData#default_delete$n0~~ virtual
        [bits 32]
@$xt@#unique_ptr$12ResourceData#default_delete$n0~~:
        dd      @std@__1@#unique_ptr$12ResourceData#default_delete$n0~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__deque_base_common$4bool?1?~ virtual
        [bits 32]
@$xt@#__deque_base_common$4bool?1?~:
        dd      @std@__1@#__deque_base_common$4bool?1?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      064h
        db      065h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      06dh
        db      06fh
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__split_buffer_common$4bool?1?~ virtual
        [bits 32]
@$xt@#__split_buffer_common$4bool?1?~:
        dd      @std@__1@#__split_buffer_common$4bool?1?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      070h
        db      06ch
        db      069h
        db      074h
        db      05fh
        db      062h
        db      075h
        db      066h
        db      066h
        db      065h
        db      072h
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      06dh
        db      06fh
        db      06eh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$pp17@Accelerators@Keyi?0?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$pp17@Accelerators@Keyi?0?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$pp17@Accelerators@Keyi?0?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#allocator$p17@Accelerators@Key~ virtual
        [bits 32]
@$xt@#allocator$p17@Accelerators@Key~:
        dd      @std@__1@#allocator$p17@Accelerators@Key~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#allocator$p17@Accelerators@Key~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#allocator$p17@Accelerators@Key~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#allocator$p17@Accelerators@Key~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$pp17@Accelerators@Key#allocator$pn0~~ virtual
        [bits 32]
@$xt@#__compressed_pair$pp17@Accelerators@Key#allocator$pn0~~:
        dd      @std@__1@#__compressed_pair$pp17@Accelerators@Key#allocator$pn0~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$pp17@Accelerators@Keyi?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#allocator$p17@Accelerators@Key~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#__split_buffer$p17@Accelerators@Key#allocator$pn0~~ virtual
        [bits 32]
@$xt@#__split_buffer$p17@Accelerators@Key#allocator$pn0~~:
        dd      @std@__1@#__split_buffer$p17@Accelerators@Key#allocator$pn0~~@$bdtr$qv+0
        dd      018h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      070h
        db      06ch
        db      069h
        db      074h
        db      05fh
        db      062h
        db      075h
        db      066h
        db      066h
        db      065h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__split_buffer_common$4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$uii?0?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$uii?0?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$uii?0?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#allocator$17@Accelerators@Key~ virtual
        [bits 32]
@$xt@#allocator$17@Accelerators@Key~:
        dd      @std@__1@#allocator$17@Accelerators@Key~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#allocator$17@Accelerators@Key~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#allocator$17@Accelerators@Key~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#allocator$17@Accelerators@Key~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$ui#allocator$17@Accelerators@Key~~ virtual
        [bits 32]
@$xt@#__compressed_pair$ui#allocator$17@Accelerators@Key~~:
        dd      @std@__1@#__compressed_pair$ui#allocator$17@Accelerators@Key~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$uii?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#allocator$17@Accelerators@Key~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#__deque_base$17@Accelerators@Key#allocator$n0~~ virtual
        [bits 32]
@$xt@#__deque_base$17@Accelerators@Key#allocator$n0~~:
        dd      @std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@$bdtr$qv+0
        dd      028h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      064h
        db      065h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@#__deque_base_common$4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$ppp6Cursori?0?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$ppp6Cursori?0?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$ppp6Cursori?0?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#allocator$pp6Cursor~ virtual
        [bits 32]
@$xt@#allocator$pp6Cursor~:
        dd      @std@__1@#allocator$pp6Cursor~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#allocator$pp6Cursor~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#allocator$pp6Cursor~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#allocator$pp6Cursor~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$ppp6Cursor#allocator$ppn0~~ virtual
        [bits 32]
@$xt@#__compressed_pair$ppp6Cursor#allocator$ppn0~~:
        dd      @std@__1@#__compressed_pair$ppp6Cursor#allocator$ppn0~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$ppp6Cursori?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#allocator$pp6Cursor~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#__split_buffer$pp6Cursor#allocator$ppn0~~ virtual
        [bits 32]
@$xt@#__split_buffer$pp6Cursor#allocator$ppn0~~:
        dd      @std@__1@#__split_buffer$pp6Cursor#allocator$ppn0~~@$bdtr$qv+0
        dd      018h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      070h
        db      06ch
        db      069h
        db      074h
        db      05fh
        db      062h
        db      075h
        db      066h
        db      066h
        db      065h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__split_buffer_common$4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@#allocator$p6Cursor~ virtual
        [bits 32]
@$xt@#allocator$p6Cursor~:
        dd      @std@__1@#allocator$p6Cursor~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#allocator$p6Cursor~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#allocator$p6Cursor~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#allocator$p6Cursor~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$ui#allocator$p6Cursor~~ virtual
        [bits 32]
@$xt@#__compressed_pair$ui#allocator$p6Cursor~~:
        dd      @std@__1@#__compressed_pair$ui#allocator$p6Cursor~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$uii?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#allocator$p6Cursor~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#__deque_base$p6Cursor#allocator$pn0~~ virtual
        [bits 32]
@$xt@#__deque_base$p6Cursor#allocator$pn0~~:
        dd      @std@__1@#__deque_base$p6Cursor#allocator$pn0~~@$bdtr$qv+0
        dd      028h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      064h
        db      065h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@#__deque_base_common$4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$pp#unique_ptr$7Control#default_delete$n0~~i?0?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$pp#unique_ptr$7Control#default_delete$n0~~i?0?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$pp#unique_ptr$7Control#default_delete$n0~~i?0?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#allocator$p#unique_ptr$7Control#default_delete$n0~~~ virtual
        [bits 32]
@$xt@#allocator$p#unique_ptr$7Control#default_delete$n0~~~:
        dd      @std@__1@#allocator$p#unique_ptr$7Control#default_delete$n0~~~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#allocator$p#unique_ptr$7Control#default_delete$n0~~~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#allocator$p#unique_ptr$7Control#default_delete$n0~~~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$7Control#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$pp#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#__compressed_pair$pp#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~:
        dd      @std@__1@#__compressed_pair$pp#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$pp#unique_ptr$7Control#default_delete$n0~~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#allocator$p#unique_ptr$7Control#default_delete$n0~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#__split_buffer$p#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#__split_buffer$p#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~:
        dd      @std@__1@#__split_buffer$p#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv+0
        dd      018h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      070h
        db      06ch
        db      069h
        db      074h
        db      05fh
        db      062h
        db      075h
        db      066h
        db      066h
        db      065h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__split_buffer_common$4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@#allocator$#unique_ptr$7Control#default_delete$n0~~~ virtual
        [bits 32]
@$xt@#allocator$#unique_ptr$7Control#default_delete$n0~~~:
        dd      @std@__1@#allocator$#unique_ptr$7Control#default_delete$n0~~~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#allocator$#unique_ptr$7Control#default_delete$n0~~~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#allocator$#unique_ptr$7Control#default_delete$n0~~~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$7Control#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$ui#allocator$#unique_ptr$7Control#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#__compressed_pair$ui#allocator$#unique_ptr$7Control#default_delete$n0~~~~:
        dd      @std@__1@#__compressed_pair$ui#allocator$#unique_ptr$7Control#default_delete$n0~~~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$uii?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#allocator$#unique_ptr$7Control#default_delete$n0~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~:
        dd      @std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv+0
        dd      028h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      064h
        db      065h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@#__deque_base_common$4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$ppp4Iconi?0?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$ppp4Iconi?0?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$ppp4Iconi?0?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#allocator$pp4Icon~ virtual
        [bits 32]
@$xt@#allocator$pp4Icon~:
        dd      @std@__1@#allocator$pp4Icon~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#allocator$pp4Icon~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#allocator$pp4Icon~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#allocator$pp4Icon~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$ppp4Icon#allocator$ppn0~~ virtual
        [bits 32]
@$xt@#__compressed_pair$ppp4Icon#allocator$ppn0~~:
        dd      @std@__1@#__compressed_pair$ppp4Icon#allocator$ppn0~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$ppp4Iconi?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#allocator$pp4Icon~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#__split_buffer$pp4Icon#allocator$ppn0~~ virtual
        [bits 32]
@$xt@#__split_buffer$pp4Icon#allocator$ppn0~~:
        dd      @std@__1@#__split_buffer$pp4Icon#allocator$ppn0~~@$bdtr$qv+0
        dd      018h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      070h
        db      06ch
        db      069h
        db      074h
        db      05fh
        db      062h
        db      075h
        db      066h
        db      066h
        db      065h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__split_buffer_common$4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@#allocator$p4Icon~ virtual
        [bits 32]
@$xt@#allocator$p4Icon~:
        dd      @std@__1@#allocator$p4Icon~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#allocator$p4Icon~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#allocator$p4Icon~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#allocator$p4Icon~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$ui#allocator$p4Icon~~ virtual
        [bits 32]
@$xt@#__compressed_pair$ui#allocator$p4Icon~~:
        dd      @std@__1@#__compressed_pair$ui#allocator$p4Icon~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$uii?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#allocator$p4Icon~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#__deque_base$p4Icon#allocator$pn0~~ virtual
        [bits 32]
@$xt@#__deque_base$p4Icon#allocator$pn0~~:
        dd      @std@__1@#__deque_base$p4Icon#allocator$pn0~~@$bdtr$qv+0
        dd      028h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      064h
        db      065h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@#__deque_base_common$4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$pp#unique_ptr$8MenuItem#default_delete$n0~~i?0?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$pp#unique_ptr$8MenuItem#default_delete$n0~~i?0?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$pp#unique_ptr$8MenuItem#default_delete$n0~~i?0?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~ virtual
        [bits 32]
@$xt@#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~:
        dd      @std@__1@#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$pp#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#__compressed_pair$pp#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~:
        dd      @std@__1@#__compressed_pair$pp#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$pp#unique_ptr$8MenuItem#default_delete$n0~~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#__split_buffer$p#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#__split_buffer$p#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~:
        dd      @std@__1@#__split_buffer$p#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv+0
        dd      018h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      070h
        db      06ch
        db      069h
        db      074h
        db      05fh
        db      062h
        db      075h
        db      066h
        db      066h
        db      065h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__split_buffer_common$4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~ virtual
        [bits 32]
@$xt@#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~:
        dd      @std@__1@#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$ui#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#__compressed_pair$ui#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~~:
        dd      @std@__1@#__compressed_pair$ui#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$uii?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~:
        dd      @std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv+0
        dd      028h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      064h
        db      065h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@#__deque_base_common$4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$pp#unique_ptr$12ResourceData#default_delete$n0~~i?0?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$pp#unique_ptr$12ResourceData#default_delete$n0~~i?0?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$pp#unique_ptr$12ResourceData#default_delete$n0~~i?0?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~ virtual
        [bits 32]
@$xt@#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~:
        dd      @std@__1@#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$pp#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#__compressed_pair$pp#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~:
        dd      @std@__1@#__compressed_pair$pp#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$pp#unique_ptr$12ResourceData#default_delete$n0~~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#__split_buffer$p#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#__split_buffer$p#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~:
        dd      @std@__1@#__split_buffer$p#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv+0
        dd      018h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      070h
        db      06ch
        db      069h
        db      074h
        db      05fh
        db      062h
        db      075h
        db      066h
        db      066h
        db      065h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__split_buffer_common$4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~ virtual
        [bits 32]
@$xt@#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~:
        dd      @std@__1@#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$ui#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#__compressed_pair$ui#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~~:
        dd      @std@__1@#__compressed_pair$ui#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$uii?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~:
        dd      @std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv+0
        dd      028h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      064h
        db      065h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@#__deque_base_common$4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$pp#unique_ptr$15InternalVerInfo#default_delete$n0~~i?0?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$pp#unique_ptr$15InternalVerInfo#default_delete$n0~~i?0?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$pp#unique_ptr$15InternalVerInfo#default_delete$n0~~i?0?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~ virtual
        [bits 32]
@$xt@#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~:
        dd      @std@__1@#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$pp#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#__compressed_pair$pp#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~:
        dd      @std@__1@#__compressed_pair$pp#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$pp#unique_ptr$15InternalVerInfo#default_delete$n0~~i?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#__split_buffer$p#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#__split_buffer$p#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~:
        dd      @std@__1@#__split_buffer$p#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv+0
        dd      018h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      073h
        db      070h
        db      06ch
        db      069h
        db      074h
        db      05fh
        db      062h
        db      075h
        db      066h
        db      066h
        db      065h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__split_buffer_common$4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~ virtual
        [bits 32]
@$xt@#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~:
        dd      @std@__1@#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      061h
        db      06ch
        db      06ch
        db      06fh
        db      063h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$ui#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#__compressed_pair$ui#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~~:
        dd      @std@__1@#__compressed_pair$ui#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$uii?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~:
        dd      @std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv+0
        dd      028h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      064h
        db      065h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      062h
        db      061h
        db      073h
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@#__deque_base_common$4bool?1?~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xc@RCFile@GetRes$qv virtual
        [bits 32]
@$xc@RCFile@GetRes$qv:
        dd      00h
        dd      0fffffcb0h
        dd      0400h
        dd      @$xt@#basic_string$C#char_traits$C~#allocator$C~~+0
        dd      0ffffff38h
        dd      01h
        dd      0ach
        dd      0400h
        dd      @$xt@10ResourceId+0
        dd      0ffffffd0h
        dd      03h
        dd      0abh
        dd      0400h
        dd      @$xt@#basic_string$C#char_traits$C~#allocator$C~~+0
        dd      0fffffe88h
        dd      04h
        dd      05h
        dd      0400h
        dd      @$xt@13runtime_error+0
        dd      0fffffe9ch
        dd      06h
        dd      07h
        dd      0400h
        dd      @$xt@13runtime_error+0
        dd      0fffffec8h
        dd      08h
        dd      09h
        dd      0400h
        dd      @$xt@#basic_string$C#char_traits$C~#allocator$C~~+0
        dd      0fffffef8h
        dd      0ah
        dd      0bh
        dd      0400h
        dd      @$xt@13runtime_error+0
        dd      0ffffff0ch
        dd      0ch
        dd      0dh
        dd      0400h
        dd      @$xt@12ResourceInfo+0
        dd      0ffffffc0h
        dd      0eh
        dd      0a8h
        dd      0400h
        dd      @$xt@10ResourceId+0
        dd      0ffffffa4h
        dd      010h
        dd      01ch
        dd      0400h
        dd      @$xt@18__default_init_tag+0
        dd      0fffff89ch
        dd      025h
        dd      027h
        dd      0400h
        dd      @$xt@10ResourceId+0
        dd      0ffffff88h
        dd      01eh
        dd      02ah
        dd      0400h
        dd      @$xt@18__default_init_tag+0
        dd      0fffff89ch
        dd      025h
        dd      027h
        dd      0400h
        dd      @$xt@18__default_init_tag+0
        dd      0fffff894h
        dd      039h
        dd      03bh
        dd      0400h
        dd      @$xt@18__default_init_tag+0
        dd      0fffff88ch
        dd      06bh
        dd      06dh
        dd      0400h
        dd      @$xt@18__default_init_tag+0
        dd      0fffff884h
        dd      09dh
        dd      09fh
        dd      0400h
        dd      @$xt@13runtime_error+0
        dd      0ffffff4ch
        dd      0a5h
        dd      0a7h
        dd      0400h
        dd      @$xt@#unique_ptr$11StringTable#default_delete$n0~~+0
        dd      0ffffff1ch
        dd      00h
        dd      0a2h
        dd      0400h
        dd      @$xt@#basic_string$c#char_traits$c~#allocator$c~~+0
        dd      0ffffff38h
        dd      00h
        dd      0a4h
        dd      0400h
        dd      @$xt@#basic_string$C#char_traits$C~#allocator$C~~+0
        dd      0ffffff38h
        dd      00h
        dd      0ach
        dd      0400h
        dd      @$xt@10ResourceId+0
        dd      0ffffffd0h
        dd      00h
        dd      0abh
        dd      0400h
        dd      @$xt@10ResourceId+0
        dd      0ffffffa4h
        dd      00h
        dd      01ch
        dd      0400h
        dd      @$xt@10ResourceId+0
        dd      0ffffff88h
        dd      00h
        dd      02ah
        dd      0400h
        dd      @$xt@13runtime_error+0
        dd      0ffffff4ch
        dd      00h
        dd      0a7h
        dd      00h
section code
section code
[global @RCFile@Read$qv]
@RCFile@Read$qv:
; Line 353: { 
        push    ebp
        mov     ebp,esp
        add     esp,0fffffee0h
        push    ebx
        push    esi
        push    edi
L_7083:
        push    dword @$xc@RCFile@Read$qv
        lea     eax,[ebp-08ch]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_7105:
; Line 354:     resFile.Reset(); 
        mov     eax,dword [ebp+08h]
        mov     eax,dword [eax+024h]
        push    eax
        call    @ResFile@Reset$qv
        pop     ecx
; Line 355:     resFile.Add(new FileHeader());   
        push    byte 044h
        call    @$bnew$qui
        pop     ecx
        mov     dword [ebp-04h],eax
        lea     ebx,[ebp-08ch+014h]
        and     eax,eax
        je      L_7109
        mov     eax,dword [ebp-04h]
        mov     dword [ebp-068h],eax
        mov     eax,dword [ebp-068h]
        mov     dword [ebp-090h],eax
        mov     dword [ebp-094h],00h
        lea     eax,[ebp-0108h]
        mov     dword [ebp-09ch],eax
        mov     dword [ebp-0a0h],00h
        mov     eax,dword [ebp-09ch]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        lea     ebx,[ebp-08ch+014h]
        mov     dword [ebp-08ch+014h],01h
        mov     ecx,dword [ebp-0a0h]
        mov     eax,dword [ebp-09ch]
        mov     dword [eax+014h],ecx
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     eax,dword [ebp-09ch]
        mov     dword [ebp-08ch+014h],02h
        mov     dword [ebp-098h],eax
        lea     eax,[ebp-0118h]
        mov     dword [ebp-0a8h],eax
        mov     dword [ebp-0ach],00h
        mov     eax,dword [ebp-0a8h]
        mov     dword [eax],00h
        mov     ecx,dword [ebp-0ach]
        mov     eax,dword [ebp-0a8h]
        mov     dword [eax+04h],ecx
        mov     eax,dword [ebp-0a8h]
        mov     dword [eax+08h],00h
        mov     eax,dword [ebp-0a8h]
        mov     dword [eax+0ch],00h
        mov     eax,dword [ebp-0a8h]
        mov     dword [ebp-08ch+014h],03h
        mov     dword [ebp-0a4h],eax
        mov     ecx,@Resource@_$vt+0ch
        mov     eax,dword [ebp-090h]
        mov     dword [eax],ecx
        mov     eax,dword [ebp-090h]
        add     eax,byte 04h
        mov     dword [ebp-0b0h],eax
        mov     eax,dword [ebp-0a4h]
        mov     dword [ebp-0b4h],eax
        mov     ecx,dword [eax]
        mov     eax,dword [ebp-0b0h]
        mov     dword [eax],ecx
        mov     eax,dword [ebp-0b4h]
        mov     ecx,dword [eax+04h]
        mov     eax,dword [ebp-0b0h]
        mov     dword [eax+04h],ecx
        mov     eax,dword [ebp-0b4h]
        mov     ecx,dword [eax+08h]
        mov     eax,dword [ebp-0b0h]
        mov     dword [eax+08h],ecx
        mov     eax,dword [ebp-0b4h]
        mov     ecx,dword [eax+0ch]
        mov     eax,dword [ebp-0b0h]
        mov     dword [eax+0ch],ecx
        mov     dword [ebp-08ch+014h],04h
        mov     eax,dword [ebp-090h]
        add     eax,byte 014h
        mov     dword [ebp-0b8h],eax
        mov     eax,dword [ebp-094h]
        mov     dword [ebp-0bch],eax
        mov     eax,dword [ebp-0b8h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-08ch+014h],05h
        mov     ecx,dword [ebp-0bch]
        mov     eax,dword [ebp-0b8h]
        mov     dword [eax+014h],ecx
; Line 846:     template<class _Tp, class = typename enable_if<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, void>::type> 
; Line 849:                               const allocator_type& __a = allocator_type()); 
; Line 849:                               const allocator_type& __a = allocator_type()); 
        mov     dword [ebp-08ch+014h],06h
        mov     eax,dword [ebp-090h]
        add     eax,byte 02ch
        mov     dword [ebp-0c0h],eax
        mov     eax,dword [ebp-098h]
        mov     dword [ebp-0c4h],eax
        mov     eax,dword [ebp-0c0h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv
        pop     ecx
        mov     dword [ebp-08ch+014h],07h
; Line 42:         id = Old.id; 
        mov     eax,dword [ebp-0c4h]
        mov     ecx,dword [eax+014h]
        mov     eax,dword [ebp-0c0h]
        mov     dword [eax+014h],ecx
        mov     eax,dword [ebp-0c4h]
        push    eax
        mov     eax,dword [ebp-0c0h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~
        pop     ecx
        pop     ecx
; Line 44:     } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
; Line 45:     bool operator==(const ResourceId& right) { return id == right.id && name == right.name; } 
        mov     dword [ebp-08ch+014h],08h
        mov     dword [ebp-08ch+014h],09h
        mov     ecx,@FileHeader@_$vt+0ch
        mov     eax,dword [ebp-068h]
        mov     dword [eax],ecx
        mov     dword [ebp-08ch+014h],0ah
        lea     eax,[ebp-0118h]
        mov     dword [ebp-0c8h],eax
L_7246:
        mov     dword [ebp-08ch+014h],0bh
        lea     eax,[ebp-0108h]
        mov     dword [ebp-0cch],eax
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bdtr$qv
        pop     ecx
L_7260:
L_7109:
        mov     eax,dword [ebp-04h]
        push    eax
        mov     eax,dword [ebp+08h]
        mov     eax,dword [eax+024h]
        push    eax
        call    @ResFile@Add$qp8Resource
        pop     ecx
        pop     ecx
L_7098:
        mov     dword [ebx],0ch
; Line 357:     Resource* res; 
; Line 358:     try 
; Line 358:     try 
; Line 359:     { 
        mov     eax,dword [ebp+08h]
        add     eax,byte 08h
        mov     dword [ebp-0d0h],eax
        mov     eax,dword [ebp-0d0h]
        mov     al,byte [eax+05h]
        and     al,al
        jne     L_7090
        mov     eax,dword [ebp+08h]
        push    eax
        call    @RCFile@GetRes$qv
        pop     ecx
        mov     dword [ebp-08h],eax
        and     eax,eax
        je      L_7090
L_7089:
; Line 361:             resFile.Add(res); 
        mov     eax,dword [ebp-08h]
        push    eax
        mov     eax,dword [ebp+08h]
        mov     eax,dword [eax+024h]
        push    eax
        call    @ResFile@Add$qp8Resource
        pop     ecx
        pop     ecx
L_7091:
; Line 360:         while (!lexer.AtEof() && (res = GetRes())) 
        mov     eax,dword [ebp+08h]
        add     eax,byte 08h
        mov     dword [ebp-0d4h],eax
        mov     eax,dword [ebp-0d4h]
        mov     al,byte [eax+05h]
        and     al,al
        jne     L_7280
        mov     eax,dword [ebp+08h]
        push    eax
        call    @RCFile@GetRes$qv
        pop     ecx
        mov     dword [ebp-08h],eax
        and     eax,eax
        jne     L_7089
L_7280:
L_7090:
; Line 362:     } 
        mov     dword [ebx],0dh
L_7099:
        jmp     L_7086
L_7104:
; Line 363:     catch (std::runtime_error& e) 
; Line 364:     { 
; Line 364:     { 
; Line 365:         Errors::Error(e.what()); 
        lea     eax,[ebp-040h]
        mov     dword [ebp-0d8h],eax
        mov     eax,dword [ebp-08ch+018h]
        push    eax
        call    @std@runtime_error@what$xqv
        pop     ecx
        mov     dword [ebp-0dch],eax
; Line 816:     _LIBCPP_INLINE_VISIBILITY 
; Line 817:     basic_string(const _CharT* __s) : __r_(__default_init_tag(), __default_init_tag()) { 
; Line 817:     basic_string(const _CharT* __s) : __r_(__default_init_tag(), __default_init_tag()) { 
        mov     eax,dword [ebp-0d8h]
        push    eax
        call    @std@__1@#__basic_string_common$4bool?1?~@$bctr$qv
        pop     ecx
        mov     dword [ebp-08ch+014h],0eh
        mov     dword [ebp-011ch],00h
        lea     eax,[ebp-011ch]
        mov     dword [ebp-0e0h],eax
        mov     dword [ebp-08ch+014h],0fh
        push    eax
        mov     dword [ebp-0120h],00h
        lea     eax,[ebp-0120h]
        mov     dword [ebp-0e4h],eax
        mov     dword [ebp-08ch+014h],010h
        push    eax
        mov     eax,dword [ebp-0d8h]
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair$51@#basic_string$c#char_traits$c~#allocator$c~~@__rep#allocator$c~~@$bctr$r18__default_init_tagrn1~$qrn1rn1
        add     esp,byte 0ch
        mov     dword [ebp-08ch+014h],011h
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
        mov     eax,dword [ebp-0dch]
        mov     dword [ebp-0e8h],eax
        mov     eax,dword [ebp-0e8h]
        push    eax
        call    _strlen
        pop     ecx
        push    eax
        mov     eax,dword [ebp-0dch]
        push    eax
        mov     eax,dword [ebp-0d8h]
        push    eax
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@__init$qpxcui
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
        mov     dword [ebp-08ch+014h],012h
        lea     eax,[ebp-011ch]
        mov     dword [ebp-0ech],eax
L_7373:
        mov     dword [ebp-08ch+014h],013h
        lea     eax,[ebp-0120h]
        mov     dword [ebp-0f0h],eax
L_7387:
        mov     eax,dword [ebp-0d8h]
        mov     dword [ebp-08ch+014h],014h
        push    eax
        call    @Errors@Error$qrx#basic_string$c#char_traits$c~#allocator$c~~
        pop     ecx
; Line 366:         return false; 
        lea     eax,[ebp-08ch]
        push    eax
        call    @_CatchCleanup$qpv
        pop     ecx
        xor     al,al
        jmp     L_7084
; Line 367:     } 
L_7086:
; Line 368:     return true; 
        mov     al,01h
; Line 369: } 
L_7084:
        call    @_RundownException$qv
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
        section vsc@$xc@RCFile@Read$qv virtual
        [bits 32]
@$xc@RCFile@Read$qv:
        dd      00h
        dd      0ffffff74h
        dd      0400h
        dd      @$xt@10ResourceId+0
        dd      0fffffef8h
        dd      02h
        dd      0bh
        dd      0400h
        dd      @$xt@12ResourceInfo+0
        dd      0fffffee8h
        dd      03h
        dd      0ah
        dd      010000h
        dd      @$xt@13runtime_error+0
        dd      L_7104
        dd      0ch
        dd      0dh
        dd      0400h
        dd      @$xt@18__default_init_tag+0
        dd      0fffffee4h
        dd      0fh
        dd      012h
        dd      0400h
        dd      @$xt@18__default_init_tag+0
        dd      0fffffee0h
        dd      010h
        dd      013h
        dd      0400h
        dd      @$xt@#basic_string$c#char_traits$c~#allocator$c~~+0
        dd      0ffffffc0h
        dd      014h
        dd      00h
        dd      00h
section code
section code
        section vsc@std@$bnot$qrx13exception_ptr virtual
        [bits 32]
@std@$bnot$qrx13exception_ptr:
; Line 141:    inline bool operator!(const exception_ptr& e) { return !e.exc; } 
L_7394:
        mov     eax,dword [esp+04h]
        mov     eax,dword [eax]
        and     eax,eax
        sete    al
        and     eax,byte 01h
        setne   al
L_7395:
        ret
section code
section code
        section vsc@std@$bequ$qrx13exception_ptrrxn0 virtual
        [bits 32]
@std@$bequ$qrx13exception_ptrrxn0:
; Line 142:    inline bool operator==(const exception_ptr& left, const exception_ptr& right) { return left.exc == right.exc; } 
L_7402:
        mov     edx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [eax]
        mov     eax,dword [edx]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
L_7403:
        ret
section code
section code
        section vsc@std@$bneq$qrx13exception_ptrrxn0 virtual
        [bits 32]
@std@$bneq$qrx13exception_ptrrxn0:
; Line 143:    inline bool operator!=(const exception_ptr& left, const exception_ptr& right) { return operator==(left, right); } 
        push    ecx
        push    ecx
L_7410:
        mov     eax,dword [esp+08h+08h]
        mov     ecx,dword [esp+04h+08h]
        mov     ecx,dword [ecx]
        mov     eax,dword [eax]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
L_7411:
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@$bequ$qrx13exception_ptr9nullptr_t virtual
        [bits 32]
@std@$bequ$qrx13exception_ptr9nullptr_t:
; Line 144:    inline bool operator==(const exception_ptr& left, nullptr_t right) { return left.exc == nullptr; } 
L_7434:
        mov     eax,dword [esp+04h]
        mov     eax,dword [eax]
        and     eax,eax
        sete    al
        and     eax,byte 01h
        setne   al
L_7435:
        ret
section code
section code
        section vsc@std@$bneq$qrx13exception_ptr9nullptr_t virtual
        [bits 32]
@std@$bneq$qrx13exception_ptr9nullptr_t:
; Line 145:    inline bool operator!=(const exception_ptr& left, nullptr_t right) { return operator==(left, nullptr); } 
        push    ecx
        push    ecx
L_7442:
        mov     eax,dword [esp+04h+08h]
        mov     eax,dword [eax]
        and     eax,eax
        sete    al
        and     eax,byte 01h
        setne   al
L_7443:
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@$bnew$quipv virtual
        [bits 32]
@$bnew$quipv:
; Line 216: _LIBCPP_OVERRIDABLE_FUNC_VIS _LIBCPP_AVAILABILITY_SIZED_NEW_DELETE void  operator delete[](void* __p, std::size_t __sz, std::align_val_t) _NOEXCEPT; 
L_7466:
        mov     eax,dword [esp+08h]
; Line 220: _LIBCPP_NODISCARD_AFTER_CXX17 inline _LIBCPP_INLINE_VISIBILITY void* operator new  (std::size_t, void* __p) _NOEXCEPT {return __p;} 
L_7467:
        ret
section code
section code
        section vsc@$bnwa$quipv virtual
        [bits 32]
@$bnwa$quipv:
; Line 221: _LIBCPP_NODISCARD_AFTER_CXX17 inline _LIBCPP_INLINE_VISIBILITY void* operator new[](std::size_t, void* __p) _NOEXCEPT {return __p;} 
L_7474:
        mov     eax,dword [esp+08h]
L_7475:
        ret
section code
section code
        section vsc@std@__1@#__cxx_atomic_exchange$4bool~$qpy#__cxx_atomic_base_impl$n0~n012memory_order virtual
        [bits 32]
@std@__1@#__cxx_atomic_exchange$4bool~$qpy#__cxx_atomic_base_impl$n0~n012memory_order:
; Line 975: _Tp __cxx_atomic_exchange(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __value, memory_order __order) _NOEXCEPT { 
L_7482:
        mov     cl,byte [esp+08h]
        mov     eax,dword [esp+04h]
; Line 976:     return __c11_atomic_exchange(&__a->__a_value, __value, static_cast<__memory_order_underlying_t>(__order)); 
        xchg    byte [eax],cl
        mov     al,cl
; Line 977: } 
; Line 978: template<class _Tp> 
; Line 978: template<class _Tp> 
L_7483:
        ret
section code
section code
        section vsc@std@__1@#__cxx_atomic_exchange$4bool~$qp#__cxx_atomic_base_impl$n0~n012memory_order virtual
        [bits 32]
@std@__1@#__cxx_atomic_exchange$4bool~$qp#__cxx_atomic_base_impl$n0~n012memory_order:
; Line 980: _Tp __cxx_atomic_exchange(__cxx_atomic_base_impl<_Tp> * __a, _Tp __value, memory_order __order) _NOEXCEPT { 
L_7490:
        mov     cl,byte [esp+08h]
        mov     eax,dword [esp+04h]
; Line 981:     return __c11_atomic_exchange(&__a->__a_value, __value, static_cast<__memory_order_underlying_t>(__order)); 
        xchg    byte [eax],cl
        mov     al,cl
; Line 982: } 
L_7491:
        ret
section code
section code
        section vsc@std@__1@#__cxx_atomic_store$4bool~$qpy#__cxx_atomic_base_impl$n0~n012memory_order virtual
        [bits 32]
@std@__1@#__cxx_atomic_store$4bool~$qpy#__cxx_atomic_base_impl$n0~n012memory_order:
; Line 951: void __cxx_atomic_store(__cxx_atomic_base_impl<_Tp> volatile* __a, _Tp __val, memory_order __order) _NOEXCEPT { 
L_7498:
        mov     al,byte [esp+08h]
        mov     ecx,dword [esp+04h]
; Line 952:     __c11_atomic_store(&__a->__a_value, __val, static_cast<__memory_order_underlying_t>(__order)); 
        xchg    byte [ecx],al
; Line 953: } 
; Line 954: template<class _Tp> 
; Line 954: template<class _Tp> 
L_7499:
        ret
section code
section code
        section vsc@std@__1@#__cxx_atomic_store$4bool~$qp#__cxx_atomic_base_impl$n0~n012memory_order virtual
        [bits 32]
@std@__1@#__cxx_atomic_store$4bool~$qp#__cxx_atomic_base_impl$n0~n012memory_order:
; Line 956: void __cxx_atomic_store(__cxx_atomic_base_impl<_Tp> * __a, _Tp __val, memory_order __order) _NOEXCEPT { 
L_7506:
        mov     al,byte [esp+08h]
        mov     ecx,dword [esp+04h]
; Line 957:     __c11_atomic_store(&__a->__a_value, __val, static_cast<__memory_order_underlying_t>(__order)); 
        xchg    byte [ecx],al
; Line 958: } 
L_7507:
        ret
section code
section code
        section vsc@std@__1@bad_function_call@$bdtr$qv virtual
        [bits 32]
@std@__1@bad_function_call@$bdtr$qv:
L_7514:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@exception@$bdtr$qv
        pop     ecx
L_7515:
        ret
section code
section code
        section vsc@std@__1@#__sort3$r#__less$cc~pc~$qpcpcpcr#__less$cc~ virtual
        [bits 32]
@std@__1@#__sort3$r#__less$cc~pc~$qpcpcpcr#__less$cc~:
; Line 3689: unsigned 
        add     esp,0ffffff4ch
        push    ebx
        push    ebp
        push    esi
        push    edi
L_7520:
        mov     ecx,dword [esp+0ch+0c4h]
        mov     edx,dword [esp+08h+0c4h]
        mov     eax,dword [esp+04h+0c4h]
; Line 3692:     unsigned __r = 0; 
        xor     edi,edi
        mov     ebp,edx
        mov     ebx,edx
        mov     esi,eax
        movsx   ebp,byte [ebp]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_7523
; Line 3694:     { 
; Line 3695:         if (!__c(*__z, *__y))       
        mov     ebp,ecx
        mov     eax,ecx
        mov     ecx,ebx
        movsx   ebp,byte [ebp]
        movsx   ecx,byte [ecx]
        cmp     ebp,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_7527
        mov     eax,edi
        jmp     L_7521
L_7527:
        mov     ecx,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bl,byte [ebx]
        mov     byte [esp-0a5h+0c4h],bl
        mov     ebx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bl,byte [ebx]
        mov     byte [ecx],bl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-0a5h+0c4h]
        mov     byte [eax],cl
; Line 3718: } 
L_7603:
        mov     ecx,01h
        mov     eax,edx
        mov     ebx,edx
        mov     edx,esi
        movsx   ebx,byte [ebx]
        movsx   edx,byte [edx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_7532
; Line 3701:         { 
; Line 3702:             swap(*__x, *__y);       
        mov     ecx,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [esp-0a5h+0c4h],dl
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [ecx],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-0a5h+0c4h]
        mov     byte [eax],cl
; Line 3718: } 
L_7683:
        mov     ecx,02h
; Line 3704:         } 
L_7532:
        mov     eax,ecx
        jmp     L_7521
; Line 3706:     } 
L_7523:
        mov     edi,ecx
        mov     eax,ebx
        movsx   ecx,byte [ecx]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_7542
; Line 3708:     { 
; Line 3709:         swap(*__x, *__z);           
        mov     ecx,esi
        mov     eax,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [esp-0a5h+0c4h],dl
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [ecx],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-0a5h+0c4h]
        mov     byte [eax],cl
; Line 3718: } 
L_7763:
        mov     eax,01h
        jmp     L_7521
; Line 3712:     } 
L_7542:
        mov     ecx,esi
        mov     eax,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bl,byte [ebx]
        mov     byte [esp-0a5h+0c4h],bl
        mov     ebx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bl,byte [ebx]
        mov     byte [ecx],bl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-0a5h+0c4h]
        mov     byte [eax],cl
; Line 3718: } 
L_7827:
        mov     ecx,01h
        mov     ebx,edi
        mov     eax,edx
        movsx   ebx,byte [ebx]
        movsx   edx,byte [edx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_7549
; Line 3716:     { 
; Line 3717:         swap(*__y, *__z);           
        mov     ecx,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [esp-0a5h+0c4h],dl
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [eax],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-0a5h+0c4h]
        mov     byte [ecx],al
; Line 3718: } 
L_7907:
        mov     ecx,02h
; Line 3719:     } 
L_7549:
        mov     eax,ecx
; Line 3721: }                                   
L_7521:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0b4h
        ret
section code
section code
        section vsc@std@__1@#__sort4$r#__less$cc~pc~$qpcpcpcpcr#__less$cc~ virtual
        [bits 32]
@std@__1@#__sort4$r#__less$cc~pc~$qpcpcpcpcr#__less$cc~:
; Line 3726: unsigned 
        add     esp,byte 0ffffff90h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_7961:
        mov     ecx,dword [esp+014h+080h]
        mov     esi,dword [esp+010h+080h]
        mov     edi,dword [esp+0ch+080h]
        mov     eax,dword [esp+08h+080h]
        mov     dword [esp-070h+080h],eax
        mov     ebx,dword [esp+04h+080h]
; Line 3730:     unsigned __r = __sort3<_Compare>(__x1, __x2, __x3, __c); 
        push    ecx
        mov     eax,edi
        push    eax
        mov     eax,dword [esp-070h+088h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#__sort3$r#__less$cc~pc~$qpcpcpcr#__less$cc~
        add     esp,byte 010h
        mov     ebp,eax
        mov     ecx,esi
        mov     eax,edi
        mov     edx,edi
        movsx   esi,byte [esi]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     esi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_7964
; Line 3732:     { 
; Line 3733:         swap(*__x3, *__x4); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [esp-05dh+080h],al
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [edx],al
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-05dh+080h]
        mov     byte [ecx],al
; Line 3718: } 
L_8016:
        inc     ebp
        mov     ecx,edi
        mov     eax,dword [esp-070h+080h]
        mov     edx,eax
        movsx   esi,byte [ecx]
        movsx   edx,byte [edx]
        cmp     esi,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_7968
; Line 3736:         { 
; Line 3737:             swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [esp-05dh+080h],dl
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [eax],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-05dh+080h]
        mov     byte [ecx],al
; Line 3718: } 
L_8096:
        inc     ebp
        mov     eax,dword [esp-070h+080h]
        mov     edx,ebx
        movsx   ebx,byte [eax]
        movsx   ecx,byte [edx]
        cmp     ebx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_7972
; Line 3740:             { 
; Line 3741:                 swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [edx]
        mov     byte [esp-05dh+080h],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [eax]
        mov     byte [edx],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-05dh+080h]
        mov     byte [eax],cl
; Line 3718: } 
L_8176:
        inc     ebp
; Line 3743:             } 
L_7972:
; Line 3744:         } 
L_7968:
; Line 3745:     } 
L_7964:
        mov     eax,ebp
; Line 3747: } 
L_7962:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 070h
        ret
section code
section code
        section vsc@std@__1@#__sort5$r#__less$cc~pc~$qpcpcpcpcpcr#__less$cc~ virtual
        [bits 32]
@std@__1@#__sort5$r#__less$cc~pc~$qpcpcpcpcpcr#__less$cc~:
; Line 3752: _LIBCPP_HIDDEN 
        add     esp,0ffffff68h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_8230:
        mov     ecx,dword [esp+018h+0a8h]
        mov     edi,dword [esp+014h+0a8h]
        mov     eax,dword [esp+010h+0a8h]
        mov     dword [esp-098h+0a8h],eax
        mov     eax,dword [esp+0ch+0a8h]
        mov     dword [esp-094h+0a8h],eax
        mov     esi,dword [esp+08h+0a8h]
        mov     ebx,dword [esp+04h+0a8h]
; Line 3757:     unsigned __r = __sort4<_Compare>(__x1, __x2, __x3, __x4, __c); 
        push    ecx
        mov     eax,dword [esp-098h+0ach]
        push    eax
        mov     eax,dword [esp-094h+0b0h]
        push    eax
        mov     eax,esi
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#__sort4$r#__less$cc~pc~$qpcpcpcpcr#__less$cc~
        add     esp,byte 014h
        mov     ebp,eax
        mov     ecx,edi
        mov     eax,dword [esp-098h+0a8h]
        mov     edx,eax
        movsx   edi,byte [edi]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_8233
; Line 3759:     { 
; Line 3760:         swap(*__x4, *__x5); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [esp-081h+0a8h],al
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [edx],al
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-081h+0a8h]
        mov     byte [ecx],al
; Line 3718: } 
L_8292:
        inc     ebp
        mov     edx,dword [esp-098h+0a8h]
        mov     ecx,edx
        mov     eax,dword [esp-094h+0a8h]
        mov     edi,eax
        movsx   edx,byte [edx]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     edx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_8237
; Line 3763:         { 
; Line 3764:             swap(*__x3, *__x4); 
        mov     edx,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [esp-081h+0a8h],al
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [eax]
        mov     eax,edi
        mov     byte [eax],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-081h+0a8h]
        mov     eax,edx
        mov     byte [eax],cl
; Line 3718: } 
L_8372:
        inc     ebp
        mov     eax,dword [esp-094h+0a8h]
        mov     edx,eax
        mov     edi,esi
        mov     ecx,esi
        mov     al,byte [eax]
        cbw
        cwde
        movsx   edi,byte [edi]
        cmp     eax,edi
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_8241
; Line 3767:             { 
; Line 3768:                 swap(*__x2, *__x3); 
        mov     eax,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [esp-081h+0a8h],cl
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [eax],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-081h+0a8h]
        mov     ecx,edx
        mov     byte [ecx],al
; Line 3718: } 
L_8452:
        inc     ebp
        mov     eax,esi
        mov     edx,ebx
        movsx   ebx,byte [eax]
        movsx   ecx,byte [edx]
        cmp     ebx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_8245
; Line 3771:                 { 
; Line 3772:                     swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [edx]
        mov     byte [esp-081h+0a8h],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [eax]
        mov     byte [edx],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-081h+0a8h]
        mov     byte [eax],cl
; Line 3718: } 
L_8532:
        inc     ebp
; Line 3774:                 } 
L_8245:
; Line 3775:             } 
L_8241:
; Line 3776:         } 
L_8237:
; Line 3777:     } 
L_8233:
        mov     eax,ebp
; Line 3779: } 
L_8231:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,098h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_3$r#__less$cc~pc~$qpcpcr#__less$cc~ virtual
        [bits 32]
@std@__1@#__insertion_sort_3$r#__less$cc~pc~$qpcpcr#__less$cc~:
; Line 3817: void 
        add     esp,byte 0ffffffd0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_8586:
        mov     edx,dword [esp+0ch+040h]
        mov     esi,dword [esp+08h+040h]
        mov     ebx,dword [esp+04h+040h]
; Line 3820:     typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type; 
        mov     ecx,ebx
        mov     eax,ebx
        add     eax,byte 02h
        mov     edi,eax
        push    edx
        mov     eax,edi
        push    eax
        mov     eax,ebx
        inc     ecx
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$cc~pc~$qpcpcpcr#__less$cc~
        add     esp,byte 010h
; Line 3823:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     ecx,edi
        inc     ecx
        cmp     ecx,esi
        je      L_8591
L_8589:
; Line 3824:     { 
; Line 3825:         if (__comp(*__i, *__j)) 
        mov     ebp,ecx
        mov     eax,edi
        mov     edx,edi
        movsx   ecx,byte [ecx]
        movsx   edx,byte [edx]
        cmp     ecx,edx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_8596
; Line 3826:         { 
; Line 3827:             value_type __t(_VSTD::move(*__i)); 
        mov     ecx,ebp
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [esp-01h+040h],cl
        mov     edx,eax
        mov     edi,ebp
; Line 3831:             { 
L_8600:
; Line 3832:                 *__j = _VSTD::move(*__k); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [eax]
        mov     eax,edi
        mov     byte [eax],cl
        mov     edi,edx
; Line 3834:             } while (__j != __first && __comp(__t, *--__k)); 
L_8602:
        cmp     edi,ebx
        je      L_8665
        dec     edx
        mov     eax,edx
        movsx   ecx,byte [esp-01h+040h]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_8600
L_8665:
L_8601:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-01h+040h]
        mov     ecx,edi
        mov     byte [ecx],al
; Line 3836:         } 
L_8596:
        mov     edi,ebp
; Line 3838:     } 
L_8592:
        mov     eax,ebp
        inc     eax
        mov     ecx,eax
L_8590:
        cmp     ecx,esi
        jne     L_8589
L_8591:
; Line 3839: } 
L_8587:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 030h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_incomplete$r#__less$cc~pc~$qpcpcr#__less$cc~ virtual
        [bits 32]
@std@__1@#__insertion_sort_incomplete$r#__less$cc~pc~$qpcpcr#__less$cc~:
; Line 3842: bool 
        add     esp,byte 0ffffffa4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_8701:
        mov     edx,dword [esp+0ch+06ch]
        mov     eax,dword [esp+08h+06ch]
        mov     dword [esp-058h+06ch],eax
        mov     ebx,dword [esp+04h+06ch]
; Line 3845:     switch (__last - __first) 
        mov     ecx,dword [esp-058h+06ch]
        mov     eax,ebx
        mov     esi,ecx
        sub     esi,eax
        mov     dword [esp-05ch+06ch],ecx
        cmp     esi,byte 06h
        jnc     L_8725
        push    esi
        mov     esi,dword [esi*4+L_65349]
        xchg    esi,dword [esp]
        ret
        times $$-$ & 3 nop
L_65349:
        dd      L_8707
        dd      L_8709
        dd      L_8711
        dd      L_8718
        dd      L_8720
        dd      L_8722
; Line 3846:     { 
; Line 3847:     case 0: 
L_8707:
L_8709:
        mov     al,01h
        jmp     L_8702
L_8711:
        mov     ecx,dword [esp-05ch+06ch]
        dec     ecx
        movsx   ebx,byte [ecx]
        movsx   edx,byte [eax]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_8713
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [eax]
        mov     byte [esp-019h+06ch],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [ecx]
        mov     byte [eax],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-019h+06ch]
        mov     byte [ecx],al
; Line 3718: } 
L_8789:
L_8713:
        mov     al,01h
        jmp     L_8702
L_8718:
        push    edx
        mov     ecx,dword [esp-05ch+070h]
        dec     ecx
        push    ecx
        mov     ecx,ebx
        inc     eax
        push    eax
        push    ecx
        call    @std@__1@#__sort3$r#__less$cc~pc~$qpcpcpcr#__less$cc~
        add     esp,byte 010h
        mov     al,01h
        jmp     L_8702
L_8720:
        push    edx
        mov     ecx,dword [esp-05ch+070h]
        dec     ecx
        push    ecx
        mov     ecx,ebx
        mov     edx,eax
        add     edx,byte 02h
        push    edx
        inc     eax
        push    eax
        push    ecx
        call    @std@__1@#__sort4$r#__less$cc~pc~$qpcpcpcpcr#__less$cc~
        add     esp,byte 014h
        mov     al,01h
        jmp     L_8702
L_8722:
        push    edx
        mov     ecx,dword [esp-05ch+070h]
        dec     ecx
        push    ecx
        mov     ecx,ebx
        mov     edx,eax
        add     edx,byte 03h
        push    edx
        mov     edx,eax
        add     edx,byte 02h
        push    edx
        inc     eax
        push    eax
        push    ecx
        call    @std@__1@#__sort5$r#__less$cc~pc~$qpcpcpcpcpcr#__less$cc~
        add     esp,byte 018h
        mov     al,01h
        jmp     L_8702
; Line 3863:     } 
L_8725:
L_8704:
        mov     ecx,eax
        add     ecx,byte 02h
        mov     esi,ecx
        push    edx
        mov     ecx,esi
        push    ecx
        mov     ecx,ebx
        inc     eax
        push    eax
        push    ecx
        call    @std@__1@#__sort3$r#__less$cc~pc~$qpcpcpcr#__less$cc~
        add     esp,byte 010h
        xor     edi,edi
; Line 3869:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     ecx,esi
        inc     ecx
        cmp     ecx,dword [esp-058h+06ch]
        je      L_8729
L_8727:
; Line 3870:     { 
; Line 3871:         if (__comp(*__i, *__j)) 
        mov     edx,ecx
        mov     eax,esi
        movsx   ecx,byte [ecx]
        movsx   esi,byte [esi]
        cmp     ecx,esi
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_8734
; Line 3872:         { 
; Line 3873:             value_type __t(_VSTD::move(*__i)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [esp-01h+06ch],cl
        mov     esi,eax
        mov     ecx,edx
; Line 3877:             { 
L_8738:
; Line 3878:                 *__j = _VSTD::move(*__k); 
        mov     eax,esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [ecx],al
        mov     ecx,esi
; Line 3880:             } while (__j != __first && __comp(__t, *--__k)); 
L_8740:
        cmp     ecx,ebx
        je      L_8888
        dec     esi
        mov     eax,esi
        movsx   ebp,byte [esp-01h+06ch]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_8738
L_8888:
L_8739:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-01h+06ch]
        mov     byte [ecx],al
        inc     edi
        cmp     edi,byte 08h
        jne     L_8747
        mov     ecx,edx
        inc     ecx
        mov     eax,dword [esp-05ch+06ch]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
        jmp     L_8702
L_8747:
; Line 3884:         } 
L_8734:
        mov     esi,edx
; Line 3886:     } 
L_8730:
        mov     eax,edx
        inc     eax
        mov     ecx,eax
L_8728:
        cmp     ecx,dword [esp-058h+06ch]
        jne     L_8727
L_8729:
        mov     al,01h
; Line 3888: } 
L_8702:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 05ch
        ret
section code
section code
        section vsc@std@__1@#__sort$r#__less$cc~pc~$qpcpcr#__less$cc~ virtual
        [bits 32]
@std@__1@#__sort$r#__less$cc~pc~$qpcpcr#__less$cc~:
; Line 3926: void 
        add     esp,0fffffea0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_8924:
        mov     eax,dword [esp+0ch+0170h]
        mov     dword [esp-0154h+0170h],eax
        mov     eax,dword [esp+08h+0170h]
        mov     dword [esp-0150h+0170h],eax
        mov     eax,dword [esp+04h+0170h]
        mov     dword [esp-0148h+0170h],eax
; Line 3930:     typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type; 
L_8927:
; Line 3935:     { 
; Line 3936:     __restart: 
L_8933:
        mov     ecx,dword [esp-0150h+0170h]
        mov     ebx,dword [esp-0148h+0170h]
        mov     edx,ecx
        sub     edx,ebx
        mov     eax,edx
        and     eax,eax
        jl      L_8955
        cmp     eax,byte 06h
        jge     L_8955
        push    eax
        mov     eax,dword [eax*4+L_65354]
        xchg    eax,dword [esp]
        ret
        times $$-$ & 3 nop
L_65354:
        dd      L_8937
        dd      L_8939
        dd      L_8941
        dd      L_8948
        dd      L_8950
        dd      L_8952
; Line 3939:         { 
; Line 3940:         case 0: 
L_8937:
L_8939:
        jmp     L_8925
L_8941:
        mov     eax,ecx
        dec     eax
        movsx   edx,byte [eax]
        movsx   ecx,byte [ebx]
        cmp     edx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_8925
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     dword [esp-015dh+0170h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-015dh+0170h]
        mov     cl,byte [ecx]
        mov     byte [esp-0129h+0170h],cl
        mov     dword [esp-0159h+0170h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0159h+0170h]
        mov     cl,byte [ecx]
        mov     byte [ebx],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-0129h+0170h]
        mov     byte [eax],cl
; Line 3718: } 
L_9193:
L_8943:
        jmp     L_8925
L_8948:
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,ecx
        dec     eax
        push    eax
        mov     eax,dword [esp-0148h+0178h]
        mov     ecx,ebx
        inc     ecx
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$cc~pc~$qpcpcpcr#__less$cc~
        add     esp,byte 010h
        jmp     L_8925
L_8950:
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,ecx
        dec     eax
        push    eax
        mov     eax,dword [esp-0148h+0178h]
        mov     ecx,ebx
        add     ecx,byte 02h
        push    ecx
        mov     ecx,ebx
        inc     ecx
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$cc~pc~$qpcpcpcpcr#__less$cc~
        add     esp,byte 014h
        jmp     L_8925
L_8952:
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,ecx
        dec     eax
        push    eax
        mov     eax,dword [esp-0148h+0178h]
        mov     ecx,ebx
        add     ecx,byte 03h
        push    ecx
        mov     ecx,ebx
        add     ecx,byte 02h
        push    ecx
        mov     ecx,ebx
        inc     ecx
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$cc~pc~$qpcpcpcpcpcr#__less$cc~
        add     esp,byte 018h
        jmp     L_8925
; Line 3956:         } 
L_8955:
L_8934:
        cmp     edx,byte 06h
        jg      L_8957
; Line 3958:         { 
; Line 3959:             _VSTD::__insertion_sort_3<_Compare>(__first, __last, __comp); 
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,dword [esp-0150h+0174h]
        push    eax
        mov     eax,dword [esp-0148h+0178h]
        push    eax
        call    @std@__1@#__insertion_sort_3$r#__less$cc~pc~$qpcpcr#__less$cc~
        add     esp,byte 0ch
        jmp     L_8925
; Line 3961:         } 
L_8957:
        mov     eax,ebx
        dec     ecx
        mov     esi,ecx
; Line 3967:         { 
; Line 3968:         difference_type __delta; 
        cmp     edx,03e8h
        jl      L_8965
; Line 3970:         { 
; Line 3971:             __delta = __len/2; 
        mov     ecx,edx
        shr     ecx,01fh
        add     ecx,edx
        sar     ecx,01h
        add     eax,ecx
        mov     dword [esp-0140h+0170h],eax
        mov     eax,ecx
        shr     eax,01fh
        add     ecx,eax
        sar     ecx,01h
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,esi
        push    eax
        mov     eax,dword [esp-0140h+0178h]
        mov     edx,eax
        add     edx,ecx
        push    edx
        push    eax
        mov     eax,dword [esp-0148h+0180h]
        add     ecx,ebx
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$cc~pc~$qpcpcpcpcpcr#__less$cc~
        add     esp,byte 018h
        mov     dword [esp-013ch+0170h],eax
; Line 3975:         } 
        jmp     L_8970
L_8965:
; Line 3976:         else 
; Line 3977:         { 
; Line 3978:             __delta = __len/2; 
        mov     ecx,edx
        shr     ecx,01fh
        add     ecx,edx
        sar     ecx,01h
        add     eax,ecx
        mov     dword [esp-0140h+0170h],eax
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,esi
        push    eax
        mov     eax,dword [esp-0140h+0178h]
        push    eax
        mov     eax,dword [esp-0148h+017ch]
        push    eax
        call    @std@__1@#__sort3$r#__less$cc~pc~$qpcpcpcr#__less$cc~
        add     esp,byte 010h
        mov     dword [esp-013ch+0170h],eax
; Line 3981:         } 
L_8970:
; Line 3982:         } 
        mov     eax,dword [esp-0148h+0170h]
        mov     ecx,eax
        mov     edx,eax
        mov     edi,esi
        mov     ebx,edx
        mov     dword [esp-0144h+0170h],ebx
        mov     eax,dword [esp-0140h+0170h]
        mov     esi,eax
        movsx   ebx,byte [ebx]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ebx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_8978
; Line 3992:         { 
; Line 3995:             while (true) 
        mov     ebx,edi
L_8982:
; Line 3996:             { 
; Line 3997:                 if (__i == --__j) 
        mov     eax,ebx
        dec     eax
        mov     edi,eax
        cmp     edx,eax
        jne     L_8988
; Line 3998:                 { 
; Line 4001:                     ++__i;   
        mov     eax,dword [esp-0144h+0170h]
        inc     eax
        mov     edx,eax
        mov     eax,dword [esp-0150h+0170h]
        mov     edi,ecx
        dec     eax
        mov     ebx,eax
        mov     esi,eax
        movsx   edi,byte [edi]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_8992
; Line 4004:                     { 
; Line 4005:                         while (true) 
L_8996:
; Line 4006:                         { 
; Line 4007:                             if (__i == __j) 
        cmp     edx,ebx
        je      L_8925
L_9002:
        mov     ebp,ecx
        mov     eax,edx
        mov     edi,edx
        movsx   edx,byte [ebp]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     edx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_9007
; Line 4010:                             { 
; Line 4011:                                 swap(*__i, *__j); 
        mov     eax,edi
        mov     edx,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [esp-0129h+0170h],cl
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [eax],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-0129h+0170h]
        mov     ecx,edx
        mov     byte [ecx],al
; Line 3718: } 
L_9305:
        inc     dword [esp-013ch+0170h]
        mov     eax,edi
        inc     eax
        mov     edx,eax
; Line 4014:                                 break; 
        jmp     L_8997
L_9007:
        mov     eax,edi
        inc     eax
        mov     edx,eax
; Line 4017:                         } 
L_8998:
        jmp     L_8996
L_8997:
; Line 4018:                     } 
L_8992:
        cmp     edx,ebx
        je      L_8925
L_9020:
L_9025:
; Line 4023:                     { 
; Line 4024:                         while (!__comp(*__first, *__i)) 
        mov     edi,dword [esp-0148h+0170h]
        mov     ecx,edi
        mov     eax,edx
        mov     ebx,edx
        movsx   edi,byte [edi]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_9032
L_9031:
        mov     eax,ebx
        inc     eax
        mov     edx,eax
L_9033:
        mov     edi,ecx
        mov     eax,edx
        mov     ebx,edx
        movsx   edi,byte [edi]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_9031
L_9032:
        mov     ebp,ecx
        mov     eax,esi
        dec     eax
        mov     edi,eax
        mov     esi,eax
        movsx   ebp,byte [ebp]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_9039
L_9038:
L_9040:
; Line 4026:                         while (__comp(*__first, *--__j)) 
        mov     ebp,ecx
        mov     eax,esi
        dec     eax
        mov     edi,eax
        mov     esi,eax
        movsx   ebp,byte [ebp]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_9038
L_9039:
        cmp     edx,edi
        jge     L_9026
; Line 4029:                             break; 
L_9045:
        mov     ecx,ebx
        mov     eax,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [esp-0129h+0170h],dl
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [ecx],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-0129h+0170h]
        mov     byte [eax],cl
; Line 3718: } 
L_9433:
        inc     dword [esp-013ch+0170h]
        mov     eax,ebx
        inc     eax
        mov     edx,eax
; Line 4033:                     } 
L_9027:
; Line 4022:                     while (true) 
        jmp     L_9025
L_9026:
        mov     eax,ebx
        mov     dword [esp-0148h+0170h],eax
        jmp     L_8933
L_8988:
        mov     ebp,edi
        mov     ebx,edi
        mov     eax,esi
        movsx   ebp,byte [ebp]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_9056
; Line 4041:                 { 
; Line 4042:                     swap(*__i, *__j); 
        mov     eax,dword [esp-0144h+0170h]
        mov     edx,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [esp-0129h+0170h],cl
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [esp-0155h+0170h],cl
        mov     byte [eax],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-0129h+0170h]
        mov     ecx,edx
        mov     byte [ecx],al
; Line 3718: } 
L_9513:
        inc     dword [esp-013ch+0170h]
; Line 4044:                     break;   
        jmp     L_8983
L_9056:
; Line 4046:             } 
L_8984:
        jmp     L_8982
L_8983:
; Line 4047:         } 
L_8978:
        mov     eax,dword [esp-0144h+0170h]
        inc     eax
        mov     ebp,eax
        cmp     ebp,edi
        jge     L_9069
; Line 4053:         { 
; Line 4056:             while (true) 
L_9073:
; Line 4057:             { 
; Line 4059:                 while (__comp(*__i, *__m)) 
        mov     ecx,ebp
        mov     ebx,ebp
        mov     eax,esi
        movsx   ecx,byte [ecx]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_9080
L_9079:
        mov     eax,ebx
        inc     eax
        mov     ebp,eax
L_9081:
        mov     ecx,ebp
        mov     ebx,ebp
        mov     eax,esi
        movsx   ecx,byte [ecx]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_9079
L_9080:
        dec     edi
        mov     ecx,edi
        mov     edx,edi
        mov     eax,esi
        movsx   ecx,byte [ecx]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_9087
L_9086:
L_9088:
; Line 4062:                 while (!__comp(*--__j, *__m)) 
        mov     eax,edx
        dec     eax
        mov     edi,eax
        mov     ecx,eax
        mov     edx,eax
        mov     eax,esi
        movsx   ecx,byte [ecx]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_9086
L_9087:
        cmp     ebp,edi
        jg      L_9074
; Line 4065:                     break; 
L_9093:
        mov     esi,ebx
        mov     ecx,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [esp-0129h+0170h],al
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [esi],al
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-0129h+0170h]
        mov     byte [ecx],al
; Line 3718: } 
L_9641:
        inc     dword [esp-013ch+0170h]
        mov     eax,ebp
        cmp     dword [esp-0140h+0170h],eax
        jne     L_9098
        mov     eax,edx
        mov     dword [esp-0140h+0170h],eax
L_9098:
        mov     eax,ebx
        inc     eax
        mov     ebp,eax
; Line 4073:             } 
L_9075:
        mov     esi,dword [esp-0140h+0170h]
        jmp     L_9073
L_9074:
; Line 4074:         } 
L_9069:
        cmp     ebp,dword [esp-0140h+0170h]
        je      L_9109
        mov     edx,esi
        mov     eax,ebp
        mov     ecx,ebp
        movsx   edx,byte [edx]
        movsx   ecx,byte [ecx]
        cmp     edx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_9109
; Line 4077:         { 
; Line 4078:             swap(*__i, *__m); 
        mov     ecx,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [esp-0129h+0170h],dl
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [eax],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-0129h+0170h]
        mov     byte [ecx],al
; Line 3718: } 
L_9721:
        inc     dword [esp-013ch+0170h]
; Line 4080:         } 
L_9109:
        cmp     dword [esp-013ch+0170h],byte 00h
        jne     L_9116
; Line 4084:         { 
; Line 4085:             bool __fs = _VSTD::__insertion_sort_incomplete<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,ebp
        push    eax
        mov     eax,dword [esp-0148h+0178h]
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$cc~pc~$qpcpcr#__less$cc~
        add     esp,byte 0ch
        mov     byte [esp-0149h+0170h],al
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,dword [esp-0150h+0174h]
        push    eax
        mov     eax,ebp
        inc     eax
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$cc~pc~$qpcpcr#__less$cc~
        add     esp,byte 0ch
        and     al,al
        je      L_9120
; Line 4087:             { 
; Line 4088:                 if (__fs) 
        cmp     byte [esp-0149h+0170h],byte 00h
        jne     L_8925
L_9124:
        mov     eax,ebp
        mov     dword [esp-0150h+0170h],eax
; Line 4091:                 continue; 
        jmp     L_8927
L_9120:
; Line 4093:             else 
; Line 4094:             { 
; Line 4095:                 if (__fs) 
        cmp     byte [esp-0149h+0170h],byte 00h
        je      L_9134
; Line 4096:                 { 
; Line 4097:                     __first = ++__i; 
        mov     eax,ebp
        inc     eax
        mov     dword [esp-0148h+0170h],eax
; Line 4098:                     continue; 
        jmp     L_8927
L_9134:
; Line 4100:             } 
L_9130:
; Line 4101:         } 
L_9116:
        mov     eax,dword [esp-0150h+0170h]
        mov     ecx,ebp
        mov     edx,eax
        sub     edx,ecx
        mov     eax,dword [esp-0148h+0170h]
        sub     eax,ecx
        neg     eax
        cmp     eax,edx
        jge     L_9147
; Line 4104:         { 
; Line 4105:             _VSTD::__sort<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,ebp
        push    eax
        mov     eax,dword [esp-0148h+0178h]
        push    eax
        call    @std@__1@#__sort$r#__less$cc~pc~$qpcpcr#__less$cc~
        add     esp,byte 0ch
        mov     eax,ebp
        inc     eax
        mov     dword [esp-0148h+0170h],eax
; Line 4108:         } 
        jmp     L_9152
L_9147:
; Line 4109:         else 
; Line 4110:         { 
; Line 4111:             _VSTD::__sort<_Compare>(__i+1, __last, __comp); 
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,dword [esp-0150h+0174h]
        push    eax
        mov     eax,ecx
        inc     eax
        push    eax
        call    @std@__1@#__sort$r#__less$cc~pc~$qpcpcr#__less$cc~
        add     esp,byte 0ch
        mov     eax,ebp
        mov     dword [esp-0150h+0170h],eax
; Line 4114:         } 
L_9152:
; Line 4115:     } 
L_8929:
; Line 3934:     while (true) 
        jmp     L_8927
; Line 4116: } 
L_8928:
L_8925:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0160h
        ret
section code
section code
        section vsc@std@__1@#__sort3$r#__less$CC~pC~$qpCpCpCr#__less$CC~ virtual
        [bits 32]
@std@__1@#__sort3$r#__less$CC~pC~$qpCpCpCr#__less$CC~:
; Line 3689: unsigned 
        add     esp,0fffffef8h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_9775:
        mov     edx,dword [esp+0ch+0118h]
        mov     esi,dword [esp+08h+0118h]
        mov     edi,dword [esp+04h+0118h]
; Line 3692:     unsigned __r = 0; 
        xor     ebp,ebp
        mov     ecx,esi
        mov     eax,edi
        movzx   ebx,word [ecx]
        mov     dword [esp-0100h+0118h],ebx
        movzx   ebx,word [edi]
        cmp     dword [esp-0100h+0118h],ebx
        setc    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        jne     L_9778
; Line 3694:     { 
; Line 3695:         if (!__c(*__z, *__y))       
        mov     dword [esp-0cch+0118h],ecx
        movzx   edi,word [edx]
        mov     ebx,dword [esp-0cch+0118h]
        movzx   ebx,word [ebx]
        cmp     edi,ebx
        setc    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        jne     L_9782
        mov     eax,ebp
        jmp     L_9776
L_9782:
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movzx   ebx,word [ecx]
        mov     word [esp-0b6h+0118h],bx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bx,word [edx]
        mov     word [ecx],bx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-0b6h+0118h]
        mov     word [edx],cx
; Line 3718: } 
L_9858:
        mov     edx,01h
        movzx   ebx,word [esi]
        movzx   ecx,word [eax]
        cmp     ebx,ecx
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_9787
; Line 3701:         { 
; Line 3702:             swap(*__x, *__y);       
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movzx   ecx,word [eax]
        mov     word [esp-0b6h+0118h],cx
        mov     dword [esp-0108h+0118h],esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0108h+0118h]
        mov     cx,word [ecx]
        mov     word [eax],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ax,word [esp-0b6h+0118h]
        mov     word [esi],ax
; Line 3718: } 
L_9938:
        mov     edx,02h
; Line 3704:         } 
L_9787:
        mov     eax,edx
        jmp     L_9776
; Line 3706:     } 
L_9778:
        movzx   ebx,word [edx]
        movzx   edi,word [ecx]
        cmp     ebx,edi
        setc    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_9797
; Line 3708:     { 
; Line 3709:         swap(*__x, *__z);           
        mov     dword [esp-0104h+0118h],eax
        mov     dword [esp-0f8h+0118h],edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-0104h+0118h]
        mov     dword [esp-0fch+0118h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0fch+0118h]
        movzx   eax,word [eax]
        mov     word [esp-0b6h+0118h],ax
        mov     eax,dword [esp-0f8h+0118h]
        mov     dword [esp-0f0h+0118h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0f0h+0118h]
        mov     cx,word [eax]
        mov     eax,dword [esp-0104h+0118h]
        mov     word [eax],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-0b6h+0118h]
        mov     eax,dword [esp-0f8h+0118h]
        mov     word [eax],cx
; Line 3718: } 
L_10018:
        mov     eax,01h
        jmp     L_9776
; Line 3712:     } 
L_9797:
        mov     dword [esp-0f4h+0118h],eax
        mov     dword [esp-0dch+0118h],ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-0f4h+0118h]
        mov     dword [esp-0ech+0118h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0ech+0118h]
        movzx   eax,word [eax]
        mov     word [esp-0b6h+0118h],ax
        mov     eax,dword [esp-0dch+0118h]
        mov     dword [esp-0d0h+0118h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0d0h+0118h]
        mov     cx,word [eax]
        mov     eax,dword [esp-0f4h+0118h]
        mov     word [eax],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-0b6h+0118h]
        mov     eax,dword [esp-0dch+0118h]
        mov     word [eax],cx
; Line 3718: } 
L_10082:
        mov     ecx,01h
        mov     dword [esp-0e4h+0118h],edx
        mov     dword [esp-0e8h+0118h],esi
        mov     eax,esi
        mov     dword [esp-0e0h+0118h],eax
        mov     eax,dword [esp-0e4h+0118h]
        movzx   ebx,word [eax]
        mov     eax,dword [esp-0e0h+0118h]
        movzx   eax,word [eax]
        cmp     ebx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_9804
; Line 3716:     { 
; Line 3717:         swap(*__y, *__z);           
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-0e8h+0118h]
        mov     dword [esp-0d4h+0118h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0d4h+0118h]
        movzx   eax,word [eax]
        mov     word [esp-0b6h+0118h],ax
        mov     dword [esp-0d8h+0118h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0d8h+0118h]
        mov     cx,word [eax]
        mov     eax,dword [esp-0e8h+0118h]
        mov     word [eax],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ax,word [esp-0b6h+0118h]
        mov     word [edx],ax
; Line 3718: } 
L_10162:
        mov     ecx,02h
; Line 3719:     } 
L_9804:
        mov     eax,ecx
; Line 3721: }                                   
L_9776:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0108h
        ret
section code
section code
        section vsc@std@__1@#__sort4$r#__less$CC~pC~$qpCpCpCpCr#__less$CC~ virtual
        [bits 32]
@std@__1@#__sort4$r#__less$CC~pC~$qpCpCpCpCr#__less$CC~:
; Line 3726: unsigned 
        add     esp,byte 0ffffff84h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_10216:
        mov     ecx,dword [esp+014h+08ch]
        mov     esi,dword [esp+010h+08ch]
        mov     edi,dword [esp+0ch+08ch]
        mov     eax,dword [esp+08h+08ch]
        mov     dword [esp-07ch+08ch],eax
        mov     ebx,dword [esp+04h+08ch]
; Line 3730:     unsigned __r = __sort3<_Compare>(__x1, __x2, __x3, __c); 
        push    ecx
        mov     eax,edi
        push    eax
        mov     eax,dword [esp-07ch+094h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#__sort3$r#__less$CC~pC~$qpCpCpCr#__less$CC~
        add     esp,byte 010h
        mov     ebp,eax
        mov     ecx,esi
        mov     edx,esi
        mov     eax,edi
        mov     esi,edi
        movzx   edx,word [edx]
        movzx   eax,word [eax]
        cmp     edx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_10219
; Line 3732:     { 
; Line 3733:         swap(*__x3, *__x4); 
        mov     edx,esi
        mov     eax,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movzx   ecx,word [ecx]
        mov     word [esp-066h+08ch],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [eax]
        mov     word [edx],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-066h+08ch]
        mov     word [eax],cx
; Line 3718: } 
L_10271:
        inc     ebp
        mov     eax,edi
        mov     ecx,dword [esp-07ch+08ch]
        mov     edx,ecx
        movzx   esi,word [eax]
        movzx   edx,word [edx]
        cmp     esi,edx
        setc    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_10223
; Line 3736:         { 
; Line 3737:             swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movzx   edx,word [ecx]
        mov     word [esp-066h+08ch],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [eax]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-066h+08ch]
        mov     word [eax],cx
; Line 3718: } 
L_10351:
        inc     ebp
        mov     eax,dword [esp-07ch+08ch]
        mov     ecx,ebx
        movzx   ebx,word [eax]
        movzx   edx,word [ecx]
        cmp     ebx,edx
        setc    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_10227
; Line 3740:             { 
; Line 3741:                 swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movzx   edx,word [ecx]
        mov     word [esp-066h+08ch],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [eax]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-066h+08ch]
        mov     word [eax],cx
; Line 3718: } 
L_10431:
        inc     ebp
; Line 3743:             } 
L_10227:
; Line 3744:         } 
L_10223:
; Line 3745:     } 
L_10219:
        mov     eax,ebp
; Line 3747: } 
L_10217:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 07ch
        ret
section code
section code
        section vsc@std@__1@#__sort5$r#__less$CC~pC~$qpCpCpCpCpCr#__less$CC~ virtual
        [bits 32]
@std@__1@#__sort5$r#__less$CC~pC~$qpCpCpCpCpCr#__less$CC~:
; Line 3752: _LIBCPP_HIDDEN 
        add     esp,0ffffff58h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_10485:
        mov     ecx,dword [esp+018h+0b8h]
        mov     ebx,dword [esp+014h+0b8h]
        mov     eax,dword [esp+010h+0b8h]
        mov     dword [esp-0a8h+0b8h],eax
        mov     eax,dword [esp+0ch+0b8h]
        mov     dword [esp-0a4h+0b8h],eax
        mov     edi,dword [esp+08h+0b8h]
        mov     esi,dword [esp+04h+0b8h]
; Line 3757:     unsigned __r = __sort4<_Compare>(__x1, __x2, __x3, __x4, __c); 
        push    ecx
        mov     eax,dword [esp-0a8h+0bch]
        push    eax
        mov     eax,dword [esp-0a4h+0c0h]
        push    eax
        mov     eax,edi
        push    eax
        mov     eax,esi
        push    eax
        call    @std@__1@#__sort4$r#__less$CC~pC~$qpCpCpCpCr#__less$CC~
        add     esp,byte 014h
        mov     ebp,eax
        mov     edx,ebx
        mov     eax,dword [esp-0a8h+0b8h]
        mov     ecx,eax
        movzx   ebx,word [ebx]
        movzx   eax,word [eax]
        cmp     ebx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_10488
; Line 3759:     { 
; Line 3760:         swap(*__x4, *__x5); 
        mov     eax,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movzx   edx,word [edx]
        mov     word [esp-08eh+0b8h],dx
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [edx]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-08eh+0b8h]
        mov     word [eax],cx
; Line 3718: } 
L_10547:
        inc     ebp
        mov     ebx,dword [esp-0a8h+0b8h]
        mov     edx,ebx
        mov     eax,dword [esp-0a4h+0b8h]
        mov     ecx,eax
        movzx   ebx,word [ebx]
        movzx   eax,word [eax]
        cmp     ebx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_10492
; Line 3763:         { 
; Line 3764:             swap(*__x3, *__x4); 
        mov     eax,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movzx   edx,word [edx]
        mov     word [esp-08eh+0b8h],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [eax]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-08eh+0b8h]
        mov     word [eax],cx
; Line 3718: } 
L_10627:
        inc     ebp
        mov     eax,dword [esp-0a4h+0b8h]
        mov     ecx,edi
        mov     edx,edi
        movzx   ebx,word [eax]
        movzx   ecx,word [ecx]
        cmp     ebx,ecx
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_10496
; Line 3767:             { 
; Line 3768:                 swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movzx   ecx,word [edx]
        mov     word [esp-08eh+0b8h],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [eax]
        mov     word [edx],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-08eh+0b8h]
        mov     word [eax],cx
; Line 3718: } 
L_10707:
        inc     ebp
        mov     eax,edi
        mov     ecx,esi
        movzx   ebx,word [eax]
        movzx   edx,word [ecx]
        cmp     ebx,edx
        setc    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_10500
; Line 3771:                 { 
; Line 3772:                     swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movzx   edx,word [ecx]
        mov     word [esp-08eh+0b8h],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [eax]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-08eh+0b8h]
        mov     word [eax],cx
; Line 3718: } 
L_10787:
        inc     ebp
; Line 3774:                 } 
L_10500:
; Line 3775:             } 
L_10496:
; Line 3776:         } 
L_10492:
; Line 3777:     } 
L_10488:
        mov     eax,ebp
; Line 3779: } 
L_10486:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0a8h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_3$r#__less$CC~pC~$qpCpCr#__less$CC~ virtual
        [bits 32]
@std@__1@#__insertion_sort_3$r#__less$CC~pC~$qpCpCr#__less$CC~:
; Line 3817: void 
        add     esp,byte 0ffffffd0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_10841:
        mov     edx,dword [esp+0ch+040h]
        mov     esi,dword [esp+08h+040h]
        mov     edi,dword [esp+04h+040h]
; Line 3820:     typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type; 
        mov     ecx,edi
        mov     eax,edi
        add     eax,byte 04h
        mov     ebx,eax
        push    edx
        mov     eax,ebx
        push    eax
        mov     eax,edi
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$CC~pC~$qpCpCpCr#__less$CC~
        add     esp,byte 010h
; Line 3823:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     ecx,ebx
        add     ecx,byte 02h
        cmp     ecx,esi
        je      L_10846
L_10844:
; Line 3824:     { 
; Line 3825:         if (__comp(*__i, *__j)) 
        mov     edx,ecx
        mov     eax,ebx
        movzx   ecx,word [ecx]
        movzx   ebx,word [ebx]
        cmp     ecx,ebx
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_10851
; Line 3826:         { 
; Line 3827:             value_type __t(_VSTD::move(*__i)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movzx   ecx,word [ecx]
        mov     word [esp-02h+040h],cx
        mov     ebx,eax
        mov     eax,edx
; Line 3831:             { 
L_10855:
; Line 3832:                 *__j = _VSTD::move(*__k); 
        mov     ecx,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [ecx]
        mov     word [eax],cx
        mov     eax,ebx
; Line 3834:             } while (__j != __first && __comp(__t, *--__k)); 
L_10857:
        cmp     eax,edi
        je      L_10920
        sub     ebx,byte 02h
        mov     ecx,ebx
        movzx   ebp,word [esp-02h+040h]
        movzx   ecx,word [ecx]
        cmp     ebp,ecx
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_10855
L_10920:
L_10856:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-02h+040h]
        mov     word [eax],cx
; Line 3836:         } 
L_10851:
        mov     ebx,edx
; Line 3838:     } 
L_10847:
        mov     eax,edx
        add     eax,byte 02h
        mov     ecx,eax
L_10845:
        cmp     ecx,esi
        jne     L_10844
L_10846:
; Line 3839: } 
L_10842:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 030h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_incomplete$r#__less$CC~pC~$qpCpCr#__less$CC~ virtual
        [bits 32]
@std@__1@#__insertion_sort_incomplete$r#__less$CC~pC~$qpCpCr#__less$CC~:
; Line 3842: bool 
        add     esp,byte 0ffffffa0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_10956:
        mov     edx,dword [esp+0ch+070h]
        mov     eax,dword [esp+08h+070h]
        mov     dword [esp-05ch+070h],eax
        mov     ebx,dword [esp+04h+070h]
; Line 3845:     switch (__last - __first) 
        mov     eax,dword [esp-05ch+070h]
        mov     ecx,ebx
        mov     esi,eax
        sub     esi,ecx
        sar     esi,01h
        mov     dword [esp-060h+070h],eax
        cmp     esi,byte 06h
        jnc     L_10980
        push    esi
        mov     esi,dword [esi*4+L_65383]
        xchg    esi,dword [esp]
        ret
        times $$-$ & 3 nop
L_65383:
        dd      L_10962
        dd      L_10964
        dd      L_10966
        dd      L_10973
        dd      L_10975
        dd      L_10977
; Line 3846:     { 
; Line 3847:     case 0: 
L_10962:
L_10964:
        mov     al,01h
        jmp     L_10957
L_10966:
        mov     eax,dword [esp-060h+070h]
        sub     eax,byte 02h
        movzx   ebx,word [eax]
        movzx   edx,word [ecx]
        cmp     ebx,edx
        setc    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_10968
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movzx   edx,word [ecx]
        mov     word [esp-01ah+070h],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [eax]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-01ah+070h]
        mov     word [eax],cx
; Line 3718: } 
L_11044:
L_10968:
        mov     al,01h
        jmp     L_10957
L_10973:
        push    edx
        mov     eax,dword [esp-060h+074h]
        sub     eax,byte 02h
        push    eax
        mov     eax,ebx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$CC~pC~$qpCpCpCr#__less$CC~
        add     esp,byte 010h
        mov     al,01h
        jmp     L_10957
L_10975:
        push    edx
        mov     eax,dword [esp-060h+074h]
        sub     eax,byte 02h
        push    eax
        mov     eax,ebx
        mov     edx,ecx
        add     edx,byte 04h
        push    edx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$CC~pC~$qpCpCpCpCr#__less$CC~
        add     esp,byte 014h
        mov     al,01h
        jmp     L_10957
L_10977:
        push    edx
        mov     eax,dword [esp-060h+074h]
        sub     eax,byte 02h
        push    eax
        mov     eax,ebx
        mov     edx,ecx
        add     edx,byte 06h
        push    edx
        mov     edx,ecx
        add     edx,byte 04h
        push    edx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$CC~pC~$qpCpCpCpCpCr#__less$CC~
        add     esp,byte 018h
        mov     al,01h
        jmp     L_10957
; Line 3863:     } 
L_10980:
L_10959:
        mov     eax,ecx
        add     eax,byte 04h
        mov     esi,eax
        push    edx
        mov     eax,esi
        push    eax
        mov     eax,ebx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$CC~pC~$qpCpCpCr#__less$CC~
        add     esp,byte 010h
        xor     edi,edi
; Line 3869:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     eax,esi
        add     eax,byte 02h
        cmp     eax,dword [esp-05ch+070h]
        je      L_10984
L_10982:
; Line 3870:     { 
; Line 3871:         if (__comp(*__i, *__j)) 
        mov     edx,eax
        mov     ecx,esi
        movzx   eax,word [eax]
        movzx   esi,word [esi]
        cmp     eax,esi
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_10989
; Line 3872:         { 
; Line 3873:             value_type __t(_VSTD::move(*__i)); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movzx   eax,word [eax]
        mov     word [esp-02h+070h],ax
        mov     esi,ecx
        mov     eax,edx
; Line 3877:             { 
L_10993:
; Line 3878:                 *__j = _VSTD::move(*__k); 
        mov     ecx,esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [ecx]
        mov     word [eax],cx
        mov     eax,esi
; Line 3880:             } while (__j != __first && __comp(__t, *--__k)); 
L_10995:
        cmp     eax,ebx
        je      L_11143
        sub     esi,byte 02h
        mov     ecx,esi
        movzx   ebp,word [esp-02h+070h]
        movzx   ecx,word [ecx]
        cmp     ebp,ecx
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_10993
L_11143:
L_10994:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-02h+070h]
        mov     word [eax],cx
        inc     edi
        cmp     edi,byte 08h
        jne     L_11002
        mov     ecx,edx
        add     ecx,byte 02h
        mov     eax,dword [esp-060h+070h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
        jmp     L_10957
L_11002:
; Line 3884:         } 
L_10989:
        mov     esi,edx
; Line 3886:     } 
L_10985:
        mov     eax,edx
        add     eax,byte 02h
L_10983:
        cmp     eax,dword [esp-05ch+070h]
        jne     L_10982
L_10984:
        mov     al,01h
; Line 3888: } 
L_10957:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 060h
        ret
section code
section code
        section vsc@std@__1@#__sort$r#__less$CC~pC~$qpCpCr#__less$CC~ virtual
        [bits 32]
@std@__1@#__sort$r#__less$CC~pC~$qpCpCr#__less$CC~:
; Line 3926: void 
        add     esp,0fffffe48h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_11179:
        mov     eax,dword [esp+0ch+01c8h]
        mov     dword [esp-016ch+01c8h],eax
        mov     eax,dword [esp+08h+01c8h]
        mov     dword [esp-0168h+01c8h],eax
        mov     eax,dword [esp+04h+01c8h]
        mov     dword [esp-0160h+01c8h],eax
; Line 3930:     typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type; 
L_11182:
; Line 3935:     { 
; Line 3936:     __restart: 
L_11188:
        mov     eax,dword [esp-0168h+01c8h]
        mov     edx,dword [esp-0160h+01c8h]
        mov     ecx,eax
        sub     ecx,edx
        sar     ecx,01h
        mov     ebx,ecx
        and     ebx,ebx
        jl      L_11210
        cmp     ebx,byte 06h
        jge     L_11210
        push    ebx
        mov     ebx,dword [ebx*4+L_65388]
        xchg    ebx,dword [esp]
        ret
        times $$-$ & 3 nop
L_65388:
        dd      L_11192
        dd      L_11194
        dd      L_11196
        dd      L_11203
        dd      L_11205
        dd      L_11207
; Line 3939:         { 
; Line 3940:         case 0: 
L_11192:
L_11194:
        jmp     L_11180
L_11196:
        sub     eax,byte 02h
        mov     dword [esp-01a8h+01c8h],eax
        mov     dword [esp-01b8h+01c8h],edx
        mov     ecx,dword [esp-01a8h+01c8h]
        movzx   ebx,word [ecx]
        mov     ecx,dword [esp-01b8h+01c8h]
        movzx   ecx,word [ecx]
        cmp     ebx,ecx
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_11180
        mov     dword [esp-01a4h+01c8h],edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,dword [esp-01a4h+01c8h]
        mov     dword [esp-0180h+01c8h],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0180h+01c8h]
        movzx   ecx,word [ecx]
        mov     word [esp-013eh+01c8h],cx
        mov     dword [esp-017ch+01c8h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-017ch+01c8h]
        mov     dx,word [ecx]
        mov     ecx,dword [esp-01a4h+01c8h]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-013eh+01c8h]
        mov     word [eax],cx
; Line 3718: } 
L_11448:
L_11198:
        jmp     L_11180
L_11203:
        mov     ecx,dword [esp-016ch+01c8h]
        push    ecx
        sub     eax,byte 02h
        push    eax
        mov     eax,dword [esp-0160h+01d0h]
        mov     ecx,edx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$CC~pC~$qpCpCpCr#__less$CC~
        add     esp,byte 010h
        jmp     L_11180
L_11205:
        mov     ecx,dword [esp-016ch+01c8h]
        push    ecx
        sub     eax,byte 02h
        push    eax
        mov     eax,dword [esp-0160h+01d0h]
        mov     ecx,edx
        add     ecx,byte 04h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$CC~pC~$qpCpCpCpCr#__less$CC~
        add     esp,byte 014h
        jmp     L_11180
L_11207:
        mov     ecx,dword [esp-016ch+01c8h]
        push    ecx
        sub     eax,byte 02h
        push    eax
        mov     eax,dword [esp-0160h+01d0h]
        mov     ecx,edx
        add     ecx,byte 06h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 04h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$CC~pC~$qpCpCpCpCpCr#__less$CC~
        add     esp,byte 018h
        jmp     L_11180
; Line 3956:         } 
L_11210:
L_11189:
        cmp     ecx,byte 06h
        jg      L_11212
; Line 3958:         { 
; Line 3959:             _VSTD::__insertion_sort_3<_Compare>(__first, __last, __comp); 
        mov     eax,dword [esp-016ch+01c8h]
        push    eax
        mov     eax,dword [esp-0168h+01cch]
        push    eax
        mov     eax,dword [esp-0160h+01d0h]
        push    eax
        call    @std@__1@#__insertion_sort_3$r#__less$CC~pC~$qpCpCr#__less$CC~
        add     esp,byte 0ch
        jmp     L_11180
; Line 3961:         } 
L_11212:
        mov     esi,edx
        mov     dword [esp-0190h+01c8h],eax
        sub     eax,byte 02h
        mov     ebx,eax
; Line 3967:         { 
; Line 3968:         difference_type __delta; 
        cmp     ecx,03e8h
        jl      L_11220
; Line 3970:         { 
; Line 3971:             __delta = __len/2; 
        mov     eax,ecx
        shr     eax,01fh
        add     eax,ecx
        sar     eax,01h
        mov     dword [esp-01ach+01c8h],esi
        mov     esi,eax
        shl     esi,01h
        mov     ecx,dword [esp-01ach+01c8h]
        add     ecx,esi
        mov     dword [esp-0158h+01c8h],ecx
        mov     ecx,eax
        shr     ecx,01fh
        add     eax,ecx
        sar     eax,01h
        mov     ecx,dword [esp-016ch+01c8h]
        push    ecx
        mov     ecx,ebx
        push    ecx
        mov     esi,dword [esp-0158h+01d0h]
        mov     ecx,eax
        shl     ecx,01h
        mov     eax,esi
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0158h+01d4h]
        push    eax
        mov     eax,edx
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0160h+01dch]
        push    eax
        call    @std@__1@#__sort5$r#__less$CC~pC~$qpCpCpCpCpCr#__less$CC~
        add     esp,byte 018h
        mov     dword [esp-0154h+01c8h],eax
; Line 3975:         } 
        jmp     L_11225
L_11220:
; Line 3976:         else 
; Line 3977:         { 
; Line 3978:             __delta = __len/2; 
        mov     dword [esp-01b0h+01c8h],ecx
        shr     ecx,01fh
        mov     eax,dword [esp-01b0h+01c8h]
        add     eax,ecx
        sar     eax,01h
        mov     dword [esp-0194h+01c8h],esi
        mov     ecx,eax
        shl     ecx,01h
        mov     eax,dword [esp-0194h+01c8h]
        add     eax,ecx
        mov     dword [esp-0158h+01c8h],eax
        mov     eax,dword [esp-016ch+01c8h]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0158h+01d0h]
        push    eax
        mov     eax,dword [esp-0160h+01d4h]
        push    eax
        call    @std@__1@#__sort3$r#__less$CC~pC~$qpCpCpCr#__less$CC~
        add     esp,byte 010h
        mov     dword [esp-0154h+01c8h],eax
; Line 3981:         } 
L_11225:
; Line 3982:         } 
        mov     edx,dword [esp-0160h+01c8h]
        mov     dword [esp-01a0h+01c8h],edx
        mov     edi,ebx
        mov     ebx,edx
        mov     dword [esp-015ch+01c8h],ebx
        mov     eax,dword [esp-0158h+01c8h]
        mov     ecx,eax
        movzx   ebx,word [ebx]
        movzx   eax,word [eax]
        cmp     ebx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_11233
; Line 3992:         { 
; Line 3995:             while (true) 
        mov     eax,edi
L_11237:
; Line 3996:             { 
; Line 3997:                 if (__i == --__j) 
        sub     eax,byte 02h
        mov     edi,eax
        cmp     edx,eax
        jne     L_11243
; Line 3998:                 { 
; Line 4001:                     ++__i;   
        mov     eax,dword [esp-015ch+01c8h]
        add     eax,byte 02h
        mov     ebx,eax
        mov     eax,dword [esp-0168h+01c8h]
        mov     esi,dword [esp-01a0h+01c8h]
        sub     eax,byte 02h
        mov     edx,eax
        mov     ecx,eax
        movzx   esi,word [esi]
        movzx   eax,word [eax]
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_11247
; Line 4004:                     { 
; Line 4005:                         while (true) 
L_11251:
; Line 4006:                         { 
; Line 4007:                             if (__i == __j) 
        cmp     ebx,edx
        je      L_11180
L_11257:
        mov     edi,dword [esp-01a0h+01c8h]
        mov     esi,ebx
        mov     eax,ebx
        movzx   ebx,word [edi]
        movzx   eax,word [eax]
        cmp     ebx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_11262
; Line 4010:                             { 
; Line 4011:                                 swap(*__i, *__j); 
        mov     ebx,esi
        mov     eax,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edi,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movzx   edi,word [edi]
        mov     word [esp-013eh+01c8h],di
        mov     edi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     di,word [edi]
        mov     word [ebx],di
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bx,word [esp-013eh+01c8h]
        mov     word [eax],bx
; Line 3718: } 
L_11560:
        inc     dword [esp-0154h+01c8h]
        mov     eax,esi
        add     eax,byte 02h
        mov     ebx,eax
; Line 4014:                                 break; 
        jmp     L_11252
L_11262:
        mov     eax,esi
        add     eax,byte 02h
        mov     ebx,eax
; Line 4017:                         } 
L_11253:
        jmp     L_11251
L_11252:
; Line 4018:                     } 
L_11247:
        mov     dword [esp-018ch+01c8h],edx
        cmp     ebx,dword [esp-018ch+01c8h]
        je      L_11180
L_11275:
L_11280:
; Line 4023:                     { 
; Line 4024:                         while (!__comp(*__first, *__i)) 
        mov     edi,dword [esp-0160h+01c8h]
        mov     edx,edi
        mov     eax,ebx
        mov     esi,ebx
        movzx   edi,word [edi]
        movzx   eax,word [eax]
        cmp     edi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_11287
L_11286:
        mov     eax,esi
        add     eax,byte 02h
        mov     ebx,eax
L_11288:
        mov     edi,edx
        mov     eax,ebx
        mov     esi,ebx
        movzx   edi,word [edi]
        movzx   eax,word [eax]
        cmp     edi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_11286
L_11287:
        mov     ebp,edx
        mov     eax,ecx
        sub     eax,byte 02h
        mov     edi,eax
        mov     ecx,eax
        movzx   ebp,word [ebp]
        movzx   eax,word [eax]
        cmp     ebp,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_11294
L_11293:
L_11295:
; Line 4026:                         while (__comp(*__first, *--__j)) 
        mov     ebp,edx
        mov     eax,ecx
        sub     eax,byte 02h
        mov     edi,eax
        mov     ecx,eax
        movzx   ebp,word [ebp]
        movzx   eax,word [eax]
        cmp     ebp,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_11293
L_11294:
        cmp     ebx,edi
        jge     L_11281
; Line 4029:                             break; 
L_11300:
        mov     edx,esi
        mov     eax,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movzx   ebx,word [ebx]
        mov     word [esp-013eh+01c8h],bx
        mov     ebx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bx,word [ebx]
        mov     word [edx],bx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [esp-013eh+01c8h]
        mov     word [eax],dx
; Line 3718: } 
L_11688:
        inc     dword [esp-0154h+01c8h]
        mov     eax,esi
        add     eax,byte 02h
        mov     ebx,eax
; Line 4033:                     } 
L_11282:
; Line 4022:                     while (true) 
        jmp     L_11280
L_11281:
        mov     eax,esi
        mov     dword [esp-0160h+01c8h],eax
        jmp     L_11188
L_11243:
        mov     eax,edi
        mov     esi,edi
        mov     ebx,ecx
        movzx   esi,word [esi]
        mov     dword [esp-0178h+01c8h],ebx
        movzx   ebx,word [ebx]
        cmp     esi,ebx
        setc    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_11311
; Line 4041:                 { 
; Line 4042:                     swap(*__i, *__j); 
        mov     edx,dword [esp-015ch+01c8h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movzx   ebx,word [ebx]
        mov     word [esp-013eh+01c8h],bx
        mov     ebx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bx,word [ebx]
        mov     word [edx],bx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [esp-013eh+01c8h]
        mov     dword [esp-01b4h+01c8h],eax
        mov     word [eax],dx
; Line 3718: } 
L_11768:
        inc     dword [esp-0154h+01c8h]
; Line 4044:                     break;   
        jmp     L_11238
L_11311:
; Line 4046:             } 
L_11239:
        jmp     L_11237
L_11238:
; Line 4047:         } 
L_11233:
        mov     eax,dword [esp-015ch+01c8h]
        add     eax,byte 02h
        mov     ebx,eax
        cmp     ebx,edi
        jge     L_11324
; Line 4053:         { 
; Line 4056:             while (true) 
L_11328:
; Line 4057:             { 
; Line 4059:                 while (__comp(*__i, *__m)) 
        mov     edx,ebx
        mov     esi,ebx
        mov     eax,ecx
        movzx   edx,word [edx]
        movzx   eax,word [eax]
        cmp     edx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_11335
L_11334:
        mov     eax,esi
        add     eax,byte 02h
        mov     ebx,eax
L_11336:
        mov     edx,ebx
        mov     esi,ebx
        mov     eax,ecx
        movzx   edx,word [edx]
        movzx   eax,word [eax]
        cmp     edx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_11334
L_11335:
        sub     edi,byte 02h
        mov     edx,edi
        mov     ebp,edi
        mov     eax,ecx
        mov     dword [esp-019ch+01c8h],eax
        movzx   edx,word [edx]
        mov     eax,dword [esp-019ch+01c8h]
        mov     dword [esp-0174h+01c8h],eax
        movzx   eax,word [eax]
        cmp     edx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_11342
L_11341:
L_11343:
; Line 4062:                 while (!__comp(*--__j, *__m)) 
        mov     eax,ebp
        sub     eax,byte 02h
        mov     edi,eax
        mov     edx,eax
        mov     ebp,eax
        mov     eax,ecx
        mov     dword [esp-0198h+01c8h],eax
        movzx   edx,word [edx]
        mov     eax,dword [esp-0198h+01c8h]
        mov     dword [esp-0170h+01c8h],eax
        movzx   eax,word [eax]
        cmp     edx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_11341
L_11342:
        cmp     ebx,edi
        jg      L_11329
; Line 4065:                     break; 
L_11348:
        mov     edx,esi
        mov     ecx,ebp
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movzx   eax,word [eax]
        mov     word [esp-013eh+01c8h],ax
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ax,word [eax]
        mov     word [edx],ax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ax,word [esp-013eh+01c8h]
        mov     word [ecx],ax
; Line 3718: } 
L_11896:
        inc     dword [esp-0154h+01c8h]
        mov     eax,ebx
        cmp     dword [esp-0158h+01c8h],eax
        jne     L_11353
        mov     dword [esp-0158h+01c8h],ebp
L_11353:
        mov     eax,esi
        add     eax,byte 02h
        mov     ebx,eax
; Line 4073:             } 
L_11330:
        mov     ecx,dword [esp-0158h+01c8h]
        jmp     L_11328
L_11329:
; Line 4074:         } 
L_11324:
        cmp     ebx,dword [esp-0158h+01c8h]
        je      L_11364
        mov     esi,ecx
        mov     eax,ebx
        mov     edx,ebx
        movzx   esi,word [esi]
        movzx   edx,word [edx]
        cmp     esi,edx
        setc    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_11364
; Line 4077:         { 
; Line 4078:             swap(*__i, *__m); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movzx   edx,word [edx]
        mov     word [esp-013eh+01c8h],dx
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [edx]
        mov     dword [esp-0184h+01c8h],eax
        mov     word [eax],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [esp-013eh+01c8h]
        mov     dword [esp-0188h+01c8h],ecx
        mov     eax,ecx
        mov     word [eax],dx
; Line 3718: } 
L_11976:
        inc     dword [esp-0154h+01c8h]
; Line 4080:         } 
L_11364:
        cmp     dword [esp-0154h+01c8h],byte 00h
        jne     L_11371
; Line 4084:         { 
; Line 4085:             bool __fs = _VSTD::__insertion_sort_incomplete<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-016ch+01c8h]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0160h+01d0h]
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$CC~pC~$qpCpCr#__less$CC~
        add     esp,byte 0ch
        mov     byte [esp-0161h+01c8h],al
        mov     eax,dword [esp-016ch+01c8h]
        push    eax
        mov     eax,dword [esp-0168h+01cch]
        push    eax
        mov     eax,ebx
        add     eax,byte 02h
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$CC~pC~$qpCpCr#__less$CC~
        add     esp,byte 0ch
        and     al,al
        je      L_11375
; Line 4087:             { 
; Line 4088:                 if (__fs) 
        cmp     byte [esp-0161h+01c8h],byte 00h
        jne     L_11180
L_11379:
        mov     dword [esp-0168h+01c8h],ebx
; Line 4091:                 continue; 
        jmp     L_11182
L_11375:
; Line 4093:             else 
; Line 4094:             { 
; Line 4095:                 if (__fs) 
        cmp     byte [esp-0161h+01c8h],byte 00h
        je      L_11389
; Line 4096:                 { 
; Line 4097:                     __first = ++__i; 
        mov     eax,ebx
        add     eax,byte 02h
        mov     dword [esp-0160h+01c8h],eax
; Line 4098:                     continue; 
        jmp     L_11182
L_11389:
; Line 4100:             } 
L_11385:
; Line 4101:         } 
L_11371:
        mov     eax,dword [esp-0168h+01c8h]
        mov     ecx,ebx
        sub     eax,ecx
        mov     edx,eax
        sar     edx,01h
        mov     eax,dword [esp-0160h+01c8h]
        sub     eax,ecx
        neg     eax
        imul    eax,byte 01h
        sar     eax,01h
        cmp     eax,edx
        jge     L_11402
; Line 4104:         { 
; Line 4105:             _VSTD::__sort<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-016ch+01c8h]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0160h+01d0h]
        push    eax
        call    @std@__1@#__sort$r#__less$CC~pC~$qpCpCr#__less$CC~
        add     esp,byte 0ch
        mov     eax,ebx
        add     eax,byte 02h
        mov     dword [esp-0160h+01c8h],eax
; Line 4108:         } 
        jmp     L_11407
L_11402:
; Line 4109:         else 
; Line 4110:         { 
; Line 4111:             _VSTD::__sort<_Compare>(__i+1, __last, __comp); 
        mov     eax,dword [esp-016ch+01c8h]
        push    eax
        mov     eax,dword [esp-0168h+01cch]
        push    eax
        mov     eax,ecx
        add     eax,byte 02h
        push    eax
        call    @std@__1@#__sort$r#__less$CC~pC~$qpCpCr#__less$CC~
        add     esp,byte 0ch
        mov     dword [esp-0168h+01c8h],ebx
; Line 4114:         } 
L_11407:
; Line 4115:     } 
L_11184:
; Line 3934:     while (true) 
        jmp     L_11182
; Line 4116: } 
L_11183:
L_11180:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,01b8h
        ret
section code
section code
        section vsc@std@__1@#__sort3$r#__less$ScSc~pSc~$qpScpScpScr#__less$ScSc~ virtual
        [bits 32]
@std@__1@#__sort3$r#__less$ScSc~pSc~$qpScpScpScr#__less$ScSc~:
; Line 3689: unsigned 
        add     esp,0ffffff4ch
        push    ebx
        push    ebp
        push    esi
        push    edi
L_12030:
        mov     ecx,dword [esp+0ch+0c4h]
        mov     edx,dword [esp+08h+0c4h]
        mov     eax,dword [esp+04h+0c4h]
; Line 3692:     unsigned __r = 0; 
        xor     edi,edi
        mov     ebp,edx
        mov     ebx,edx
        mov     esi,eax
        movsx   ebp,byte [ebp]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_12033
; Line 3694:     { 
; Line 3695:         if (!__c(*__z, *__y))       
        mov     ebp,ecx
        mov     eax,ecx
        mov     ecx,ebx
        movsx   ebp,byte [ebp]
        movsx   ecx,byte [ecx]
        cmp     ebp,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_12037
        mov     eax,edi
        jmp     L_12031
L_12037:
        mov     ecx,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bl,byte [ebx]
        mov     byte [esp-0a5h+0c4h],bl
        mov     ebx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bl,byte [ebx]
        mov     byte [ecx],bl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-0a5h+0c4h]
        mov     byte [eax],cl
; Line 3718: } 
L_12113:
        mov     ecx,01h
        mov     eax,edx
        mov     ebx,edx
        mov     edx,esi
        movsx   ebx,byte [ebx]
        movsx   edx,byte [edx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_12042
; Line 3701:         { 
; Line 3702:             swap(*__x, *__y);       
        mov     ecx,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [esp-0a5h+0c4h],dl
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [ecx],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-0a5h+0c4h]
        mov     byte [eax],cl
; Line 3718: } 
L_12193:
        mov     ecx,02h
; Line 3704:         } 
L_12042:
        mov     eax,ecx
        jmp     L_12031
; Line 3706:     } 
L_12033:
        mov     edi,ecx
        mov     eax,ebx
        movsx   ecx,byte [ecx]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_12052
; Line 3708:     { 
; Line 3709:         swap(*__x, *__z);           
        mov     ecx,esi
        mov     eax,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [esp-0a5h+0c4h],dl
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [ecx],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-0a5h+0c4h]
        mov     byte [eax],cl
; Line 3718: } 
L_12273:
        mov     eax,01h
        jmp     L_12031
; Line 3712:     } 
L_12052:
        mov     ecx,esi
        mov     eax,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bl,byte [ebx]
        mov     byte [esp-0a5h+0c4h],bl
        mov     ebx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bl,byte [ebx]
        mov     byte [ecx],bl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-0a5h+0c4h]
        mov     byte [eax],cl
; Line 3718: } 
L_12337:
        mov     ecx,01h
        mov     ebx,edi
        mov     eax,edx
        movsx   ebx,byte [ebx]
        movsx   edx,byte [edx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_12059
; Line 3716:     { 
; Line 3717:         swap(*__y, *__z);           
        mov     ecx,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [esp-0a5h+0c4h],dl
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [eax],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-0a5h+0c4h]
        mov     byte [ecx],al
; Line 3718: } 
L_12417:
        mov     ecx,02h
; Line 3719:     } 
L_12059:
        mov     eax,ecx
; Line 3721: }                                   
L_12031:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0b4h
        ret
section code
section code
        section vsc@std@__1@#__sort4$r#__less$ScSc~pSc~$qpScpScpScpScr#__less$ScSc~ virtual
        [bits 32]
@std@__1@#__sort4$r#__less$ScSc~pSc~$qpScpScpScpScr#__less$ScSc~:
; Line 3726: unsigned 
        add     esp,byte 0ffffff90h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_12471:
        mov     ecx,dword [esp+014h+080h]
        mov     esi,dword [esp+010h+080h]
        mov     edi,dword [esp+0ch+080h]
        mov     eax,dword [esp+08h+080h]
        mov     dword [esp-070h+080h],eax
        mov     ebx,dword [esp+04h+080h]
; Line 3730:     unsigned __r = __sort3<_Compare>(__x1, __x2, __x3, __c); 
        push    ecx
        mov     eax,edi
        push    eax
        mov     eax,dword [esp-070h+088h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#__sort3$r#__less$ScSc~pSc~$qpScpScpScr#__less$ScSc~
        add     esp,byte 010h
        mov     ebp,eax
        mov     ecx,esi
        mov     eax,edi
        mov     edx,edi
        movsx   esi,byte [esi]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     esi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_12474
; Line 3732:     { 
; Line 3733:         swap(*__x3, *__x4); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [esp-05dh+080h],al
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [edx],al
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-05dh+080h]
        mov     byte [ecx],al
; Line 3718: } 
L_12526:
        inc     ebp
        mov     ecx,edi
        mov     eax,dword [esp-070h+080h]
        mov     edx,eax
        movsx   esi,byte [ecx]
        movsx   edx,byte [edx]
        cmp     esi,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_12478
; Line 3736:         { 
; Line 3737:             swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [esp-05dh+080h],dl
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [eax],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-05dh+080h]
        mov     byte [ecx],al
; Line 3718: } 
L_12606:
        inc     ebp
        mov     eax,dword [esp-070h+080h]
        mov     edx,ebx
        movsx   ebx,byte [eax]
        movsx   ecx,byte [edx]
        cmp     ebx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_12482
; Line 3740:             { 
; Line 3741:                 swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [edx]
        mov     byte [esp-05dh+080h],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [eax]
        mov     byte [edx],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-05dh+080h]
        mov     byte [eax],cl
; Line 3718: } 
L_12686:
        inc     ebp
; Line 3743:             } 
L_12482:
; Line 3744:         } 
L_12478:
; Line 3745:     } 
L_12474:
        mov     eax,ebp
; Line 3747: } 
L_12472:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 070h
        ret
section code
section code
        section vsc@std@__1@#__sort5$r#__less$ScSc~pSc~$qpScpScpScpScpScr#__less$ScSc~ virtual
        [bits 32]
@std@__1@#__sort5$r#__less$ScSc~pSc~$qpScpScpScpScpScr#__less$ScSc~:
; Line 3752: _LIBCPP_HIDDEN 
        add     esp,0ffffff68h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_12740:
        mov     ecx,dword [esp+018h+0a8h]
        mov     edi,dword [esp+014h+0a8h]
        mov     eax,dword [esp+010h+0a8h]
        mov     dword [esp-098h+0a8h],eax
        mov     eax,dword [esp+0ch+0a8h]
        mov     dword [esp-094h+0a8h],eax
        mov     esi,dword [esp+08h+0a8h]
        mov     ebx,dword [esp+04h+0a8h]
; Line 3757:     unsigned __r = __sort4<_Compare>(__x1, __x2, __x3, __x4, __c); 
        push    ecx
        mov     eax,dword [esp-098h+0ach]
        push    eax
        mov     eax,dword [esp-094h+0b0h]
        push    eax
        mov     eax,esi
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#__sort4$r#__less$ScSc~pSc~$qpScpScpScpScr#__less$ScSc~
        add     esp,byte 014h
        mov     ebp,eax
        mov     ecx,edi
        mov     eax,dword [esp-098h+0a8h]
        mov     edx,eax
        movsx   edi,byte [edi]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_12743
; Line 3759:     { 
; Line 3760:         swap(*__x4, *__x5); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [esp-081h+0a8h],al
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [edx],al
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-081h+0a8h]
        mov     byte [ecx],al
; Line 3718: } 
L_12802:
        inc     ebp
        mov     edx,dword [esp-098h+0a8h]
        mov     ecx,edx
        mov     eax,dword [esp-094h+0a8h]
        mov     edi,eax
        movsx   edx,byte [edx]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     edx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_12747
; Line 3763:         { 
; Line 3764:             swap(*__x3, *__x4); 
        mov     edx,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [esp-081h+0a8h],al
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [eax]
        mov     eax,edi
        mov     byte [eax],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-081h+0a8h]
        mov     eax,edx
        mov     byte [eax],cl
; Line 3718: } 
L_12882:
        inc     ebp
        mov     eax,dword [esp-094h+0a8h]
        mov     edx,eax
        mov     edi,esi
        mov     ecx,esi
        mov     al,byte [eax]
        cbw
        cwde
        movsx   edi,byte [edi]
        cmp     eax,edi
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_12751
; Line 3767:             { 
; Line 3768:                 swap(*__x2, *__x3); 
        mov     eax,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [esp-081h+0a8h],cl
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [eax],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-081h+0a8h]
        mov     ecx,edx
        mov     byte [ecx],al
; Line 3718: } 
L_12962:
        inc     ebp
        mov     eax,esi
        mov     edx,ebx
        movsx   ebx,byte [eax]
        movsx   ecx,byte [edx]
        cmp     ebx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_12755
; Line 3771:                 { 
; Line 3772:                     swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [edx]
        mov     byte [esp-081h+0a8h],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [eax]
        mov     byte [edx],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-081h+0a8h]
        mov     byte [eax],cl
; Line 3718: } 
L_13042:
        inc     ebp
; Line 3774:                 } 
L_12755:
; Line 3775:             } 
L_12751:
; Line 3776:         } 
L_12747:
; Line 3777:     } 
L_12743:
        mov     eax,ebp
; Line 3779: } 
L_12741:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,098h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_3$r#__less$ScSc~pSc~$qpScpScr#__less$ScSc~ virtual
        [bits 32]
@std@__1@#__insertion_sort_3$r#__less$ScSc~pSc~$qpScpScr#__less$ScSc~:
; Line 3817: void 
        add     esp,byte 0ffffffd0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_13096:
        mov     edx,dword [esp+0ch+040h]
        mov     esi,dword [esp+08h+040h]
        mov     ebx,dword [esp+04h+040h]
; Line 3820:     typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type; 
        mov     ecx,ebx
        mov     eax,ebx
        add     eax,byte 02h
        mov     edi,eax
        push    edx
        mov     eax,edi
        push    eax
        mov     eax,ebx
        inc     ecx
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ScSc~pSc~$qpScpScpScr#__less$ScSc~
        add     esp,byte 010h
; Line 3823:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     ecx,edi
        inc     ecx
        cmp     ecx,esi
        je      L_13101
L_13099:
; Line 3824:     { 
; Line 3825:         if (__comp(*__i, *__j)) 
        mov     ebp,ecx
        mov     eax,edi
        mov     edx,edi
        movsx   ecx,byte [ecx]
        movsx   edx,byte [edx]
        cmp     ecx,edx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_13106
; Line 3826:         { 
; Line 3827:             value_type __t(_VSTD::move(*__i)); 
        mov     ecx,ebp
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [esp-01h+040h],cl
        mov     edx,eax
        mov     edi,ebp
; Line 3831:             { 
L_13110:
; Line 3832:                 *__j = _VSTD::move(*__k); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [eax]
        mov     eax,edi
        mov     byte [eax],cl
        mov     edi,edx
; Line 3834:             } while (__j != __first && __comp(__t, *--__k)); 
L_13112:
        cmp     edi,ebx
        je      L_13175
        dec     edx
        mov     eax,edx
        movsx   ecx,byte [esp-01h+040h]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_13110
L_13175:
L_13111:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-01h+040h]
        mov     ecx,edi
        mov     byte [ecx],al
; Line 3836:         } 
L_13106:
        mov     edi,ebp
; Line 3838:     } 
L_13102:
        mov     eax,ebp
        inc     eax
        mov     ecx,eax
L_13100:
        cmp     ecx,esi
        jne     L_13099
L_13101:
; Line 3839: } 
L_13097:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 030h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_incomplete$r#__less$ScSc~pSc~$qpScpScr#__less$ScSc~ virtual
        [bits 32]
@std@__1@#__insertion_sort_incomplete$r#__less$ScSc~pSc~$qpScpScr#__less$ScSc~:
; Line 3842: bool 
        add     esp,byte 0ffffffa4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_13211:
        mov     edx,dword [esp+0ch+06ch]
        mov     eax,dword [esp+08h+06ch]
        mov     dword [esp-058h+06ch],eax
        mov     ebx,dword [esp+04h+06ch]
; Line 3845:     switch (__last - __first) 
        mov     ecx,dword [esp-058h+06ch]
        mov     eax,ebx
        mov     esi,ecx
        sub     esi,eax
        mov     dword [esp-05ch+06ch],ecx
        cmp     esi,byte 06h
        jnc     L_13235
        push    esi
        mov     esi,dword [esi*4+L_65417]
        xchg    esi,dword [esp]
        ret
        times $$-$ & 3 nop
L_65417:
        dd      L_13217
        dd      L_13219
        dd      L_13221
        dd      L_13228
        dd      L_13230
        dd      L_13232
; Line 3846:     { 
; Line 3847:     case 0: 
L_13217:
L_13219:
        mov     al,01h
        jmp     L_13212
L_13221:
        mov     ecx,dword [esp-05ch+06ch]
        dec     ecx
        movsx   ebx,byte [ecx]
        movsx   edx,byte [eax]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_13223
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [eax]
        mov     byte [esp-019h+06ch],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [ecx]
        mov     byte [eax],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-019h+06ch]
        mov     byte [ecx],al
; Line 3718: } 
L_13299:
L_13223:
        mov     al,01h
        jmp     L_13212
L_13228:
        push    edx
        mov     ecx,dword [esp-05ch+070h]
        dec     ecx
        push    ecx
        mov     ecx,ebx
        inc     eax
        push    eax
        push    ecx
        call    @std@__1@#__sort3$r#__less$ScSc~pSc~$qpScpScpScr#__less$ScSc~
        add     esp,byte 010h
        mov     al,01h
        jmp     L_13212
L_13230:
        push    edx
        mov     ecx,dword [esp-05ch+070h]
        dec     ecx
        push    ecx
        mov     ecx,ebx
        mov     edx,eax
        add     edx,byte 02h
        push    edx
        inc     eax
        push    eax
        push    ecx
        call    @std@__1@#__sort4$r#__less$ScSc~pSc~$qpScpScpScpScr#__less$ScSc~
        add     esp,byte 014h
        mov     al,01h
        jmp     L_13212
L_13232:
        push    edx
        mov     ecx,dword [esp-05ch+070h]
        dec     ecx
        push    ecx
        mov     ecx,ebx
        mov     edx,eax
        add     edx,byte 03h
        push    edx
        mov     edx,eax
        add     edx,byte 02h
        push    edx
        inc     eax
        push    eax
        push    ecx
        call    @std@__1@#__sort5$r#__less$ScSc~pSc~$qpScpScpScpScpScr#__less$ScSc~
        add     esp,byte 018h
        mov     al,01h
        jmp     L_13212
; Line 3863:     } 
L_13235:
L_13214:
        mov     ecx,eax
        add     ecx,byte 02h
        mov     esi,ecx
        push    edx
        mov     ecx,esi
        push    ecx
        mov     ecx,ebx
        inc     eax
        push    eax
        push    ecx
        call    @std@__1@#__sort3$r#__less$ScSc~pSc~$qpScpScpScr#__less$ScSc~
        add     esp,byte 010h
        xor     edi,edi
; Line 3869:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     ecx,esi
        inc     ecx
        cmp     ecx,dword [esp-058h+06ch]
        je      L_13239
L_13237:
; Line 3870:     { 
; Line 3871:         if (__comp(*__i, *__j)) 
        mov     edx,ecx
        mov     eax,esi
        movsx   ecx,byte [ecx]
        movsx   esi,byte [esi]
        cmp     ecx,esi
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_13244
; Line 3872:         { 
; Line 3873:             value_type __t(_VSTD::move(*__i)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [esp-01h+06ch],cl
        mov     esi,eax
        mov     ecx,edx
; Line 3877:             { 
L_13248:
; Line 3878:                 *__j = _VSTD::move(*__k); 
        mov     eax,esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [ecx],al
        mov     ecx,esi
; Line 3880:             } while (__j != __first && __comp(__t, *--__k)); 
L_13250:
        cmp     ecx,ebx
        je      L_13398
        dec     esi
        mov     eax,esi
        movsx   ebp,byte [esp-01h+06ch]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_13248
L_13398:
L_13249:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-01h+06ch]
        mov     byte [ecx],al
        inc     edi
        cmp     edi,byte 08h
        jne     L_13257
        mov     ecx,edx
        inc     ecx
        mov     eax,dword [esp-05ch+06ch]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
        jmp     L_13212
L_13257:
; Line 3884:         } 
L_13244:
        mov     esi,edx
; Line 3886:     } 
L_13240:
        mov     eax,edx
        inc     eax
        mov     ecx,eax
L_13238:
        cmp     ecx,dword [esp-058h+06ch]
        jne     L_13237
L_13239:
        mov     al,01h
; Line 3888: } 
L_13212:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 05ch
        ret
section code
section code
        section vsc@std@__1@#__sort$r#__less$ScSc~pSc~$qpScpScr#__less$ScSc~ virtual
        [bits 32]
@std@__1@#__sort$r#__less$ScSc~pSc~$qpScpScr#__less$ScSc~:
; Line 3926: void 
        add     esp,0fffffea0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_13434:
        mov     eax,dword [esp+0ch+0170h]
        mov     dword [esp-0154h+0170h],eax
        mov     eax,dword [esp+08h+0170h]
        mov     dword [esp-0150h+0170h],eax
        mov     eax,dword [esp+04h+0170h]
        mov     dword [esp-0148h+0170h],eax
; Line 3930:     typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type; 
L_13437:
; Line 3935:     { 
; Line 3936:     __restart: 
L_13443:
        mov     ecx,dword [esp-0150h+0170h]
        mov     ebx,dword [esp-0148h+0170h]
        mov     edx,ecx
        sub     edx,ebx
        mov     eax,edx
        and     eax,eax
        jl      L_13465
        cmp     eax,byte 06h
        jge     L_13465
        push    eax
        mov     eax,dword [eax*4+L_65422]
        xchg    eax,dword [esp]
        ret
        times $$-$ & 3 nop
L_65422:
        dd      L_13447
        dd      L_13449
        dd      L_13451
        dd      L_13458
        dd      L_13460
        dd      L_13462
; Line 3939:         { 
; Line 3940:         case 0: 
L_13447:
L_13449:
        jmp     L_13435
L_13451:
        mov     eax,ecx
        dec     eax
        movsx   edx,byte [eax]
        movsx   ecx,byte [ebx]
        cmp     edx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_13435
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     dword [esp-015dh+0170h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-015dh+0170h]
        mov     cl,byte [ecx]
        mov     byte [esp-0129h+0170h],cl
        mov     dword [esp-0159h+0170h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0159h+0170h]
        mov     cl,byte [ecx]
        mov     byte [ebx],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-0129h+0170h]
        mov     byte [eax],cl
; Line 3718: } 
L_13703:
L_13453:
        jmp     L_13435
L_13458:
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,ecx
        dec     eax
        push    eax
        mov     eax,dword [esp-0148h+0178h]
        mov     ecx,ebx
        inc     ecx
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ScSc~pSc~$qpScpScpScr#__less$ScSc~
        add     esp,byte 010h
        jmp     L_13435
L_13460:
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,ecx
        dec     eax
        push    eax
        mov     eax,dword [esp-0148h+0178h]
        mov     ecx,ebx
        add     ecx,byte 02h
        push    ecx
        mov     ecx,ebx
        inc     ecx
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$ScSc~pSc~$qpScpScpScpScr#__less$ScSc~
        add     esp,byte 014h
        jmp     L_13435
L_13462:
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,ecx
        dec     eax
        push    eax
        mov     eax,dword [esp-0148h+0178h]
        mov     ecx,ebx
        add     ecx,byte 03h
        push    ecx
        mov     ecx,ebx
        add     ecx,byte 02h
        push    ecx
        mov     ecx,ebx
        inc     ecx
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$ScSc~pSc~$qpScpScpScpScpScr#__less$ScSc~
        add     esp,byte 018h
        jmp     L_13435
; Line 3956:         } 
L_13465:
L_13444:
        cmp     edx,byte 06h
        jg      L_13467
; Line 3958:         { 
; Line 3959:             _VSTD::__insertion_sort_3<_Compare>(__first, __last, __comp); 
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,dword [esp-0150h+0174h]
        push    eax
        mov     eax,dword [esp-0148h+0178h]
        push    eax
        call    @std@__1@#__insertion_sort_3$r#__less$ScSc~pSc~$qpScpScr#__less$ScSc~
        add     esp,byte 0ch
        jmp     L_13435
; Line 3961:         } 
L_13467:
        mov     eax,ebx
        dec     ecx
        mov     esi,ecx
; Line 3967:         { 
; Line 3968:         difference_type __delta; 
        cmp     edx,03e8h
        jl      L_13475
; Line 3970:         { 
; Line 3971:             __delta = __len/2; 
        mov     ecx,edx
        shr     ecx,01fh
        add     ecx,edx
        sar     ecx,01h
        add     eax,ecx
        mov     dword [esp-0140h+0170h],eax
        mov     eax,ecx
        shr     eax,01fh
        add     ecx,eax
        sar     ecx,01h
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,esi
        push    eax
        mov     eax,dword [esp-0140h+0178h]
        mov     edx,eax
        add     edx,ecx
        push    edx
        push    eax
        mov     eax,dword [esp-0148h+0180h]
        add     ecx,ebx
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$ScSc~pSc~$qpScpScpScpScpScr#__less$ScSc~
        add     esp,byte 018h
        mov     dword [esp-013ch+0170h],eax
; Line 3975:         } 
        jmp     L_13480
L_13475:
; Line 3976:         else 
; Line 3977:         { 
; Line 3978:             __delta = __len/2; 
        mov     ecx,edx
        shr     ecx,01fh
        add     ecx,edx
        sar     ecx,01h
        add     eax,ecx
        mov     dword [esp-0140h+0170h],eax
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,esi
        push    eax
        mov     eax,dword [esp-0140h+0178h]
        push    eax
        mov     eax,dword [esp-0148h+017ch]
        push    eax
        call    @std@__1@#__sort3$r#__less$ScSc~pSc~$qpScpScpScr#__less$ScSc~
        add     esp,byte 010h
        mov     dword [esp-013ch+0170h],eax
; Line 3981:         } 
L_13480:
; Line 3982:         } 
        mov     eax,dword [esp-0148h+0170h]
        mov     ecx,eax
        mov     edx,eax
        mov     edi,esi
        mov     ebx,edx
        mov     dword [esp-0144h+0170h],ebx
        mov     eax,dword [esp-0140h+0170h]
        mov     esi,eax
        movsx   ebx,byte [ebx]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ebx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_13488
; Line 3992:         { 
; Line 3995:             while (true) 
        mov     ebx,edi
L_13492:
; Line 3996:             { 
; Line 3997:                 if (__i == --__j) 
        mov     eax,ebx
        dec     eax
        mov     edi,eax
        cmp     edx,eax
        jne     L_13498
; Line 3998:                 { 
; Line 4001:                     ++__i;   
        mov     eax,dword [esp-0144h+0170h]
        inc     eax
        mov     edx,eax
        mov     eax,dword [esp-0150h+0170h]
        mov     edi,ecx
        dec     eax
        mov     ebx,eax
        mov     esi,eax
        movsx   edi,byte [edi]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_13502
; Line 4004:                     { 
; Line 4005:                         while (true) 
L_13506:
; Line 4006:                         { 
; Line 4007:                             if (__i == __j) 
        cmp     edx,ebx
        je      L_13435
L_13512:
        mov     ebp,ecx
        mov     eax,edx
        mov     edi,edx
        movsx   edx,byte [ebp]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     edx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_13517
; Line 4010:                             { 
; Line 4011:                                 swap(*__i, *__j); 
        mov     eax,edi
        mov     edx,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [esp-0129h+0170h],cl
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [eax],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-0129h+0170h]
        mov     ecx,edx
        mov     byte [ecx],al
; Line 3718: } 
L_13815:
        inc     dword [esp-013ch+0170h]
        mov     eax,edi
        inc     eax
        mov     edx,eax
; Line 4014:                                 break; 
        jmp     L_13507
L_13517:
        mov     eax,edi
        inc     eax
        mov     edx,eax
; Line 4017:                         } 
L_13508:
        jmp     L_13506
L_13507:
; Line 4018:                     } 
L_13502:
        cmp     edx,ebx
        je      L_13435
L_13530:
L_13535:
; Line 4023:                     { 
; Line 4024:                         while (!__comp(*__first, *__i)) 
        mov     edi,dword [esp-0148h+0170h]
        mov     ecx,edi
        mov     eax,edx
        mov     ebx,edx
        movsx   edi,byte [edi]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_13542
L_13541:
        mov     eax,ebx
        inc     eax
        mov     edx,eax
L_13543:
        mov     edi,ecx
        mov     eax,edx
        mov     ebx,edx
        movsx   edi,byte [edi]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_13541
L_13542:
        mov     ebp,ecx
        mov     eax,esi
        dec     eax
        mov     edi,eax
        mov     esi,eax
        movsx   ebp,byte [ebp]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_13549
L_13548:
L_13550:
; Line 4026:                         while (__comp(*__first, *--__j)) 
        mov     ebp,ecx
        mov     eax,esi
        dec     eax
        mov     edi,eax
        mov     esi,eax
        movsx   ebp,byte [ebp]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_13548
L_13549:
        cmp     edx,edi
        jge     L_13536
; Line 4029:                             break; 
L_13555:
        mov     ecx,ebx
        mov     eax,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [esp-0129h+0170h],dl
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [ecx],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-0129h+0170h]
        mov     byte [eax],cl
; Line 3718: } 
L_13943:
        inc     dword [esp-013ch+0170h]
        mov     eax,ebx
        inc     eax
        mov     edx,eax
; Line 4033:                     } 
L_13537:
; Line 4022:                     while (true) 
        jmp     L_13535
L_13536:
        mov     eax,ebx
        mov     dword [esp-0148h+0170h],eax
        jmp     L_13443
L_13498:
        mov     ebp,edi
        mov     ebx,edi
        mov     eax,esi
        movsx   ebp,byte [ebp]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_13566
; Line 4041:                 { 
; Line 4042:                     swap(*__i, *__j); 
        mov     eax,dword [esp-0144h+0170h]
        mov     edx,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [esp-0129h+0170h],cl
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [esp-0155h+0170h],cl
        mov     byte [eax],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-0129h+0170h]
        mov     ecx,edx
        mov     byte [ecx],al
; Line 3718: } 
L_14023:
        inc     dword [esp-013ch+0170h]
; Line 4044:                     break;   
        jmp     L_13493
L_13566:
; Line 4046:             } 
L_13494:
        jmp     L_13492
L_13493:
; Line 4047:         } 
L_13488:
        mov     eax,dword [esp-0144h+0170h]
        inc     eax
        mov     ebp,eax
        cmp     ebp,edi
        jge     L_13579
; Line 4053:         { 
; Line 4056:             while (true) 
L_13583:
; Line 4057:             { 
; Line 4059:                 while (__comp(*__i, *__m)) 
        mov     ecx,ebp
        mov     ebx,ebp
        mov     eax,esi
        movsx   ecx,byte [ecx]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_13590
L_13589:
        mov     eax,ebx
        inc     eax
        mov     ebp,eax
L_13591:
        mov     ecx,ebp
        mov     ebx,ebp
        mov     eax,esi
        movsx   ecx,byte [ecx]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_13589
L_13590:
        dec     edi
        mov     ecx,edi
        mov     edx,edi
        mov     eax,esi
        movsx   ecx,byte [ecx]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_13597
L_13596:
L_13598:
; Line 4062:                 while (!__comp(*--__j, *__m)) 
        mov     eax,edx
        dec     eax
        mov     edi,eax
        mov     ecx,eax
        mov     edx,eax
        mov     eax,esi
        movsx   ecx,byte [ecx]
        mov     al,byte [eax]
        cbw
        cwde
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_13596
L_13597:
        cmp     ebp,edi
        jg      L_13584
; Line 4065:                     break; 
L_13603:
        mov     esi,ebx
        mov     ecx,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [esp-0129h+0170h],al
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [esi],al
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-0129h+0170h]
        mov     byte [ecx],al
; Line 3718: } 
L_14151:
        inc     dword [esp-013ch+0170h]
        mov     eax,ebp
        cmp     dword [esp-0140h+0170h],eax
        jne     L_13608
        mov     eax,edx
        mov     dword [esp-0140h+0170h],eax
L_13608:
        mov     eax,ebx
        inc     eax
        mov     ebp,eax
; Line 4073:             } 
L_13585:
        mov     esi,dword [esp-0140h+0170h]
        jmp     L_13583
L_13584:
; Line 4074:         } 
L_13579:
        cmp     ebp,dword [esp-0140h+0170h]
        je      L_13619
        mov     edx,esi
        mov     eax,ebp
        mov     ecx,ebp
        movsx   edx,byte [edx]
        movsx   ecx,byte [ecx]
        cmp     edx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_13619
; Line 4077:         { 
; Line 4078:             swap(*__i, *__m); 
        mov     ecx,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [esp-0129h+0170h],dl
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [eax],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-0129h+0170h]
        mov     byte [ecx],al
; Line 3718: } 
L_14231:
        inc     dword [esp-013ch+0170h]
; Line 4080:         } 
L_13619:
        cmp     dword [esp-013ch+0170h],byte 00h
        jne     L_13626
; Line 4084:         { 
; Line 4085:             bool __fs = _VSTD::__insertion_sort_incomplete<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,ebp
        push    eax
        mov     eax,dword [esp-0148h+0178h]
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$ScSc~pSc~$qpScpScr#__less$ScSc~
        add     esp,byte 0ch
        mov     byte [esp-0149h+0170h],al
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,dword [esp-0150h+0174h]
        push    eax
        mov     eax,ebp
        inc     eax
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$ScSc~pSc~$qpScpScr#__less$ScSc~
        add     esp,byte 0ch
        and     al,al
        je      L_13630
; Line 4087:             { 
; Line 4088:                 if (__fs) 
        cmp     byte [esp-0149h+0170h],byte 00h
        jne     L_13435
L_13634:
        mov     eax,ebp
        mov     dword [esp-0150h+0170h],eax
; Line 4091:                 continue; 
        jmp     L_13437
L_13630:
; Line 4093:             else 
; Line 4094:             { 
; Line 4095:                 if (__fs) 
        cmp     byte [esp-0149h+0170h],byte 00h
        je      L_13644
; Line 4096:                 { 
; Line 4097:                     __first = ++__i; 
        mov     eax,ebp
        inc     eax
        mov     dword [esp-0148h+0170h],eax
; Line 4098:                     continue; 
        jmp     L_13437
L_13644:
; Line 4100:             } 
L_13640:
; Line 4101:         } 
L_13626:
        mov     eax,dword [esp-0150h+0170h]
        mov     ecx,ebp
        mov     edx,eax
        sub     edx,ecx
        mov     eax,dword [esp-0148h+0170h]
        sub     eax,ecx
        neg     eax
        cmp     eax,edx
        jge     L_13657
; Line 4104:         { 
; Line 4105:             _VSTD::__sort<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,ebp
        push    eax
        mov     eax,dword [esp-0148h+0178h]
        push    eax
        call    @std@__1@#__sort$r#__less$ScSc~pSc~$qpScpScr#__less$ScSc~
        add     esp,byte 0ch
        mov     eax,ebp
        inc     eax
        mov     dword [esp-0148h+0170h],eax
; Line 4108:         } 
        jmp     L_13662
L_13657:
; Line 4109:         else 
; Line 4110:         { 
; Line 4111:             _VSTD::__sort<_Compare>(__i+1, __last, __comp); 
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,dword [esp-0150h+0174h]
        push    eax
        mov     eax,ecx
        inc     eax
        push    eax
        call    @std@__1@#__sort$r#__less$ScSc~pSc~$qpScpScr#__less$ScSc~
        add     esp,byte 0ch
        mov     eax,ebp
        mov     dword [esp-0150h+0170h],eax
; Line 4114:         } 
L_13662:
; Line 4115:     } 
L_13439:
; Line 3934:     while (true) 
        jmp     L_13437
; Line 4116: } 
L_13438:
L_13435:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0160h
        ret
section code
section code
        section vsc@std@__1@#__sort3$r#__less$ucuc~puc~$qpucpucpucr#__less$ucuc~ virtual
        [bits 32]
@std@__1@#__sort3$r#__less$ucuc~puc~$qpucpucpucr#__less$ucuc~:
; Line 3689: unsigned 
        add     esp,0ffffff4ch
        push    ebx
        push    ebp
        push    esi
        push    edi
L_14285:
        mov     ecx,dword [esp+0ch+0c4h]
        mov     edx,dword [esp+08h+0c4h]
        mov     eax,dword [esp+04h+0c4h]
; Line 3692:     unsigned __r = 0; 
        xor     edi,edi
        mov     ebp,edx
        mov     ebx,edx
        mov     esi,eax
        movzx   ebp,byte [ebp]
        movzx   eax,byte [eax]
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_14288
; Line 3694:     { 
; Line 3695:         if (!__c(*__z, *__y))       
        mov     ebp,ecx
        mov     eax,ecx
        mov     ecx,ebx
        movzx   ebp,byte [ebp]
        movzx   ecx,byte [ecx]
        cmp     ebp,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_14292
        mov     eax,edi
        jmp     L_14286
L_14292:
        mov     ecx,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bl,byte [ebx]
        mov     byte [esp-0a5h+0c4h],bl
        mov     ebx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bl,byte [ebx]
        mov     byte [ecx],bl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-0a5h+0c4h]
        mov     byte [eax],cl
; Line 3718: } 
L_14368:
        mov     ecx,01h
        mov     eax,edx
        mov     ebx,edx
        mov     edx,esi
        movzx   ebx,byte [ebx]
        movzx   edx,byte [edx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_14297
; Line 3701:         { 
; Line 3702:             swap(*__x, *__y);       
        mov     ecx,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [esp-0a5h+0c4h],dl
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [ecx],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-0a5h+0c4h]
        mov     byte [eax],cl
; Line 3718: } 
L_14448:
        mov     ecx,02h
; Line 3704:         } 
L_14297:
        mov     eax,ecx
        jmp     L_14286
; Line 3706:     } 
L_14288:
        mov     edi,ecx
        mov     eax,ebx
        movzx   ecx,byte [ecx]
        movzx   eax,byte [eax]
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_14307
; Line 3708:     { 
; Line 3709:         swap(*__x, *__z);           
        mov     ecx,esi
        mov     eax,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [esp-0a5h+0c4h],dl
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [ecx],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-0a5h+0c4h]
        mov     byte [eax],cl
; Line 3718: } 
L_14528:
        mov     eax,01h
        jmp     L_14286
; Line 3712:     } 
L_14307:
        mov     ecx,esi
        mov     eax,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bl,byte [ebx]
        mov     byte [esp-0a5h+0c4h],bl
        mov     ebx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bl,byte [ebx]
        mov     byte [ecx],bl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-0a5h+0c4h]
        mov     byte [eax],cl
; Line 3718: } 
L_14592:
        mov     ecx,01h
        mov     ebx,edi
        mov     eax,edx
        movzx   ebx,byte [ebx]
        movzx   edx,byte [edx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_14314
; Line 3716:     { 
; Line 3717:         swap(*__y, *__z);           
        mov     ecx,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [esp-0a5h+0c4h],dl
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [eax],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-0a5h+0c4h]
        mov     byte [ecx],al
; Line 3718: } 
L_14672:
        mov     ecx,02h
; Line 3719:     } 
L_14314:
        mov     eax,ecx
; Line 3721: }                                   
L_14286:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0b4h
        ret
section code
section code
        section vsc@std@__1@#__sort4$r#__less$ucuc~puc~$qpucpucpucpucr#__less$ucuc~ virtual
        [bits 32]
@std@__1@#__sort4$r#__less$ucuc~puc~$qpucpucpucpucr#__less$ucuc~:
; Line 3726: unsigned 
        add     esp,byte 0ffffff90h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_14726:
        mov     ecx,dword [esp+014h+080h]
        mov     esi,dword [esp+010h+080h]
        mov     edi,dword [esp+0ch+080h]
        mov     eax,dword [esp+08h+080h]
        mov     dword [esp-070h+080h],eax
        mov     ebx,dword [esp+04h+080h]
; Line 3730:     unsigned __r = __sort3<_Compare>(__x1, __x2, __x3, __c); 
        push    ecx
        mov     eax,edi
        push    eax
        mov     eax,dword [esp-070h+088h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#__sort3$r#__less$ucuc~puc~$qpucpucpucr#__less$ucuc~
        add     esp,byte 010h
        mov     ebp,eax
        mov     ecx,esi
        mov     eax,edi
        mov     edx,edi
        movzx   esi,byte [esi]
        movzx   eax,byte [eax]
        cmp     esi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_14729
; Line 3732:     { 
; Line 3733:         swap(*__x3, *__x4); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [esp-05dh+080h],al
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [edx],al
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-05dh+080h]
        mov     byte [ecx],al
; Line 3718: } 
L_14781:
        inc     ebp
        mov     ecx,edi
        mov     eax,dword [esp-070h+080h]
        mov     edx,eax
        movzx   esi,byte [ecx]
        movzx   edx,byte [edx]
        cmp     esi,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_14733
; Line 3736:         { 
; Line 3737:             swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [esp-05dh+080h],dl
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [eax],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-05dh+080h]
        mov     byte [ecx],al
; Line 3718: } 
L_14861:
        inc     ebp
        mov     eax,dword [esp-070h+080h]
        mov     edx,ebx
        movzx   ebx,byte [eax]
        movzx   ecx,byte [edx]
        cmp     ebx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_14737
; Line 3740:             { 
; Line 3741:                 swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [edx]
        mov     byte [esp-05dh+080h],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [eax]
        mov     byte [edx],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-05dh+080h]
        mov     byte [eax],cl
; Line 3718: } 
L_14941:
        inc     ebp
; Line 3743:             } 
L_14737:
; Line 3744:         } 
L_14733:
; Line 3745:     } 
L_14729:
        mov     eax,ebp
; Line 3747: } 
L_14727:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 070h
        ret
section code
section code
        section vsc@std@__1@#__sort5$r#__less$ucuc~puc~$qpucpucpucpucpucr#__less$ucuc~ virtual
        [bits 32]
@std@__1@#__sort5$r#__less$ucuc~puc~$qpucpucpucpucpucr#__less$ucuc~:
; Line 3752: _LIBCPP_HIDDEN 
        add     esp,0ffffff68h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_14995:
        mov     ecx,dword [esp+018h+0a8h]
        mov     edi,dword [esp+014h+0a8h]
        mov     eax,dword [esp+010h+0a8h]
        mov     dword [esp-098h+0a8h],eax
        mov     eax,dword [esp+0ch+0a8h]
        mov     dword [esp-094h+0a8h],eax
        mov     esi,dword [esp+08h+0a8h]
        mov     ebx,dword [esp+04h+0a8h]
; Line 3757:     unsigned __r = __sort4<_Compare>(__x1, __x2, __x3, __x4, __c); 
        push    ecx
        mov     eax,dword [esp-098h+0ach]
        push    eax
        mov     eax,dword [esp-094h+0b0h]
        push    eax
        mov     eax,esi
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#__sort4$r#__less$ucuc~puc~$qpucpucpucpucr#__less$ucuc~
        add     esp,byte 014h
        mov     ebp,eax
        mov     ecx,edi
        mov     eax,dword [esp-098h+0a8h]
        mov     edx,eax
        movzx   edi,byte [edi]
        movzx   eax,byte [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_14998
; Line 3759:     { 
; Line 3760:         swap(*__x4, *__x5); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [esp-081h+0a8h],al
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [edx],al
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-081h+0a8h]
        mov     byte [ecx],al
; Line 3718: } 
L_15057:
        inc     ebp
        mov     edx,dword [esp-098h+0a8h]
        mov     ecx,edx
        mov     eax,dword [esp-094h+0a8h]
        mov     edi,eax
        movzx   edx,byte [edx]
        movzx   eax,byte [eax]
        cmp     edx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_15002
; Line 3763:         { 
; Line 3764:             swap(*__x3, *__x4); 
        mov     edx,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [esp-081h+0a8h],al
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [eax]
        mov     eax,edi
        mov     byte [eax],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-081h+0a8h]
        mov     eax,edx
        mov     byte [eax],cl
; Line 3718: } 
L_15137:
        inc     ebp
        mov     eax,dword [esp-094h+0a8h]
        mov     edx,eax
        mov     edi,esi
        mov     ecx,esi
        movzx   eax,byte [eax]
        movzx   edi,byte [edi]
        cmp     eax,edi
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_15006
; Line 3767:             { 
; Line 3768:                 swap(*__x2, *__x3); 
        mov     eax,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [esp-081h+0a8h],cl
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [eax],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-081h+0a8h]
        mov     ecx,edx
        mov     byte [ecx],al
; Line 3718: } 
L_15217:
        inc     ebp
        mov     eax,esi
        mov     edx,ebx
        movzx   ebx,byte [eax]
        movzx   ecx,byte [edx]
        cmp     ebx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_15010
; Line 3771:                 { 
; Line 3772:                     swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [edx]
        mov     byte [esp-081h+0a8h],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [eax]
        mov     byte [edx],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-081h+0a8h]
        mov     byte [eax],cl
; Line 3718: } 
L_15297:
        inc     ebp
; Line 3774:                 } 
L_15010:
; Line 3775:             } 
L_15006:
; Line 3776:         } 
L_15002:
; Line 3777:     } 
L_14998:
        mov     eax,ebp
; Line 3779: } 
L_14996:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,098h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_3$r#__less$ucuc~puc~$qpucpucr#__less$ucuc~ virtual
        [bits 32]
@std@__1@#__insertion_sort_3$r#__less$ucuc~puc~$qpucpucr#__less$ucuc~:
; Line 3817: void 
        add     esp,byte 0ffffffd0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_15351:
        mov     edx,dword [esp+0ch+040h]
        mov     esi,dword [esp+08h+040h]
        mov     ebx,dword [esp+04h+040h]
; Line 3820:     typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type; 
        mov     ecx,ebx
        mov     eax,ebx
        add     eax,byte 02h
        mov     edi,eax
        push    edx
        mov     eax,edi
        push    eax
        mov     eax,ebx
        inc     ecx
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ucuc~puc~$qpucpucpucr#__less$ucuc~
        add     esp,byte 010h
; Line 3823:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     ecx,edi
        inc     ecx
        cmp     ecx,esi
        je      L_15356
L_15354:
; Line 3824:     { 
; Line 3825:         if (__comp(*__i, *__j)) 
        mov     ebp,ecx
        mov     eax,edi
        mov     edx,edi
        movzx   ecx,byte [ecx]
        movzx   edx,byte [edx]
        cmp     ecx,edx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_15361
; Line 3826:         { 
; Line 3827:             value_type __t(_VSTD::move(*__i)); 
        mov     ecx,ebp
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [esp-01h+040h],cl
        mov     edx,eax
        mov     edi,ebp
; Line 3831:             { 
L_15365:
; Line 3832:                 *__j = _VSTD::move(*__k); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [eax]
        mov     eax,edi
        mov     byte [eax],cl
        mov     edi,edx
; Line 3834:             } while (__j != __first && __comp(__t, *--__k)); 
L_15367:
        cmp     edi,ebx
        je      L_15430
        dec     edx
        mov     eax,edx
        movzx   ecx,byte [esp-01h+040h]
        movzx   eax,byte [eax]
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_15365
L_15430:
L_15366:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-01h+040h]
        mov     ecx,edi
        mov     byte [ecx],al
; Line 3836:         } 
L_15361:
        mov     edi,ebp
; Line 3838:     } 
L_15357:
        mov     eax,ebp
        inc     eax
        mov     ecx,eax
L_15355:
        cmp     ecx,esi
        jne     L_15354
L_15356:
; Line 3839: } 
L_15352:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 030h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_incomplete$r#__less$ucuc~puc~$qpucpucr#__less$ucuc~ virtual
        [bits 32]
@std@__1@#__insertion_sort_incomplete$r#__less$ucuc~puc~$qpucpucr#__less$ucuc~:
; Line 3842: bool 
        add     esp,byte 0ffffffa4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_15466:
        mov     edx,dword [esp+0ch+06ch]
        mov     eax,dword [esp+08h+06ch]
        mov     dword [esp-058h+06ch],eax
        mov     ebx,dword [esp+04h+06ch]
; Line 3845:     switch (__last - __first) 
        mov     ecx,dword [esp-058h+06ch]
        mov     eax,ebx
        mov     esi,ecx
        sub     esi,eax
        mov     dword [esp-05ch+06ch],ecx
        cmp     esi,byte 06h
        jnc     L_15490
        push    esi
        mov     esi,dword [esi*4+L_65451]
        xchg    esi,dword [esp]
        ret
        times $$-$ & 3 nop
L_65451:
        dd      L_15472
        dd      L_15474
        dd      L_15476
        dd      L_15483
        dd      L_15485
        dd      L_15487
; Line 3846:     { 
; Line 3847:     case 0: 
L_15472:
L_15474:
        mov     al,01h
        jmp     L_15467
L_15476:
        mov     ecx,dword [esp-05ch+06ch]
        dec     ecx
        movzx   ebx,byte [ecx]
        movzx   edx,byte [eax]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_15478
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [eax]
        mov     byte [esp-019h+06ch],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [ecx]
        mov     byte [eax],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-019h+06ch]
        mov     byte [ecx],al
; Line 3718: } 
L_15554:
L_15478:
        mov     al,01h
        jmp     L_15467
L_15483:
        push    edx
        mov     ecx,dword [esp-05ch+070h]
        dec     ecx
        push    ecx
        mov     ecx,ebx
        inc     eax
        push    eax
        push    ecx
        call    @std@__1@#__sort3$r#__less$ucuc~puc~$qpucpucpucr#__less$ucuc~
        add     esp,byte 010h
        mov     al,01h
        jmp     L_15467
L_15485:
        push    edx
        mov     ecx,dword [esp-05ch+070h]
        dec     ecx
        push    ecx
        mov     ecx,ebx
        mov     edx,eax
        add     edx,byte 02h
        push    edx
        inc     eax
        push    eax
        push    ecx
        call    @std@__1@#__sort4$r#__less$ucuc~puc~$qpucpucpucpucr#__less$ucuc~
        add     esp,byte 014h
        mov     al,01h
        jmp     L_15467
L_15487:
        push    edx
        mov     ecx,dword [esp-05ch+070h]
        dec     ecx
        push    ecx
        mov     ecx,ebx
        mov     edx,eax
        add     edx,byte 03h
        push    edx
        mov     edx,eax
        add     edx,byte 02h
        push    edx
        inc     eax
        push    eax
        push    ecx
        call    @std@__1@#__sort5$r#__less$ucuc~puc~$qpucpucpucpucpucr#__less$ucuc~
        add     esp,byte 018h
        mov     al,01h
        jmp     L_15467
; Line 3863:     } 
L_15490:
L_15469:
        mov     ecx,eax
        add     ecx,byte 02h
        mov     esi,ecx
        push    edx
        mov     ecx,esi
        push    ecx
        mov     ecx,ebx
        inc     eax
        push    eax
        push    ecx
        call    @std@__1@#__sort3$r#__less$ucuc~puc~$qpucpucpucr#__less$ucuc~
        add     esp,byte 010h
        xor     edi,edi
; Line 3869:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     ecx,esi
        inc     ecx
        cmp     ecx,dword [esp-058h+06ch]
        je      L_15494
L_15492:
; Line 3870:     { 
; Line 3871:         if (__comp(*__i, *__j)) 
        mov     edx,ecx
        mov     eax,esi
        movzx   ecx,byte [ecx]
        movzx   esi,byte [esi]
        cmp     ecx,esi
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_15499
; Line 3872:         { 
; Line 3873:             value_type __t(_VSTD::move(*__i)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [esp-01h+06ch],cl
        mov     esi,eax
        mov     ecx,edx
; Line 3877:             { 
L_15503:
; Line 3878:                 *__j = _VSTD::move(*__k); 
        mov     eax,esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [ecx],al
        mov     ecx,esi
; Line 3880:             } while (__j != __first && __comp(__t, *--__k)); 
L_15505:
        cmp     ecx,ebx
        je      L_15653
        dec     esi
        mov     eax,esi
        movzx   ebp,byte [esp-01h+06ch]
        movzx   eax,byte [eax]
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_15503
L_15653:
L_15504:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-01h+06ch]
        mov     byte [ecx],al
        inc     edi
        cmp     edi,byte 08h
        jne     L_15512
        mov     ecx,edx
        inc     ecx
        mov     eax,dword [esp-05ch+06ch]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
        jmp     L_15467
L_15512:
; Line 3884:         } 
L_15499:
        mov     esi,edx
; Line 3886:     } 
L_15495:
        mov     eax,edx
        inc     eax
        mov     ecx,eax
L_15493:
        cmp     ecx,dword [esp-058h+06ch]
        jne     L_15492
L_15494:
        mov     al,01h
; Line 3888: } 
L_15467:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 05ch
        ret
section code
section code
        section vsc@std@__1@#__sort$r#__less$ucuc~puc~$qpucpucr#__less$ucuc~ virtual
        [bits 32]
@std@__1@#__sort$r#__less$ucuc~puc~$qpucpucr#__less$ucuc~:
; Line 3926: void 
        add     esp,0fffffea0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_15689:
        mov     eax,dword [esp+0ch+0170h]
        mov     dword [esp-0154h+0170h],eax
        mov     eax,dword [esp+08h+0170h]
        mov     dword [esp-0150h+0170h],eax
        mov     eax,dword [esp+04h+0170h]
        mov     dword [esp-0148h+0170h],eax
; Line 3930:     typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type; 
L_15692:
; Line 3935:     { 
; Line 3936:     __restart: 
L_15698:
        mov     ecx,dword [esp-0150h+0170h]
        mov     ebx,dword [esp-0148h+0170h]
        mov     edx,ecx
        sub     edx,ebx
        mov     eax,edx
        and     eax,eax
        jl      L_15720
        cmp     eax,byte 06h
        jge     L_15720
        push    eax
        mov     eax,dword [eax*4+L_65456]
        xchg    eax,dword [esp]
        ret
        times $$-$ & 3 nop
L_65456:
        dd      L_15702
        dd      L_15704
        dd      L_15706
        dd      L_15713
        dd      L_15715
        dd      L_15717
; Line 3939:         { 
; Line 3940:         case 0: 
L_15702:
L_15704:
        jmp     L_15690
L_15706:
        mov     eax,ecx
        dec     eax
        movzx   edx,byte [eax]
        movzx   ecx,byte [ebx]
        cmp     edx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_15690
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     dword [esp-015dh+0170h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-015dh+0170h]
        mov     cl,byte [ecx]
        mov     byte [esp-0129h+0170h],cl
        mov     dword [esp-0159h+0170h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0159h+0170h]
        mov     cl,byte [ecx]
        mov     byte [ebx],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-0129h+0170h]
        mov     byte [eax],cl
; Line 3718: } 
L_15958:
L_15708:
        jmp     L_15690
L_15713:
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,ecx
        dec     eax
        push    eax
        mov     eax,dword [esp-0148h+0178h]
        mov     ecx,ebx
        inc     ecx
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ucuc~puc~$qpucpucpucr#__less$ucuc~
        add     esp,byte 010h
        jmp     L_15690
L_15715:
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,ecx
        dec     eax
        push    eax
        mov     eax,dword [esp-0148h+0178h]
        mov     ecx,ebx
        add     ecx,byte 02h
        push    ecx
        mov     ecx,ebx
        inc     ecx
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$ucuc~puc~$qpucpucpucpucr#__less$ucuc~
        add     esp,byte 014h
        jmp     L_15690
L_15717:
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,ecx
        dec     eax
        push    eax
        mov     eax,dword [esp-0148h+0178h]
        mov     ecx,ebx
        add     ecx,byte 03h
        push    ecx
        mov     ecx,ebx
        add     ecx,byte 02h
        push    ecx
        mov     ecx,ebx
        inc     ecx
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$ucuc~puc~$qpucpucpucpucpucr#__less$ucuc~
        add     esp,byte 018h
        jmp     L_15690
; Line 3956:         } 
L_15720:
L_15699:
        cmp     edx,byte 06h
        jg      L_15722
; Line 3958:         { 
; Line 3959:             _VSTD::__insertion_sort_3<_Compare>(__first, __last, __comp); 
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,dword [esp-0150h+0174h]
        push    eax
        mov     eax,dword [esp-0148h+0178h]
        push    eax
        call    @std@__1@#__insertion_sort_3$r#__less$ucuc~puc~$qpucpucr#__less$ucuc~
        add     esp,byte 0ch
        jmp     L_15690
; Line 3961:         } 
L_15722:
        mov     eax,ebx
        dec     ecx
        mov     esi,ecx
; Line 3967:         { 
; Line 3968:         difference_type __delta; 
        cmp     edx,03e8h
        jl      L_15730
; Line 3970:         { 
; Line 3971:             __delta = __len/2; 
        mov     ecx,edx
        shr     ecx,01fh
        add     ecx,edx
        sar     ecx,01h
        add     eax,ecx
        mov     dword [esp-0140h+0170h],eax
        mov     eax,ecx
        shr     eax,01fh
        add     ecx,eax
        sar     ecx,01h
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,esi
        push    eax
        mov     eax,dword [esp-0140h+0178h]
        mov     edx,eax
        add     edx,ecx
        push    edx
        push    eax
        mov     eax,dword [esp-0148h+0180h]
        add     ecx,ebx
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$ucuc~puc~$qpucpucpucpucpucr#__less$ucuc~
        add     esp,byte 018h
        mov     dword [esp-013ch+0170h],eax
; Line 3975:         } 
        jmp     L_15735
L_15730:
; Line 3976:         else 
; Line 3977:         { 
; Line 3978:             __delta = __len/2; 
        mov     ecx,edx
        shr     ecx,01fh
        add     ecx,edx
        sar     ecx,01h
        add     eax,ecx
        mov     dword [esp-0140h+0170h],eax
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,esi
        push    eax
        mov     eax,dword [esp-0140h+0178h]
        push    eax
        mov     eax,dword [esp-0148h+017ch]
        push    eax
        call    @std@__1@#__sort3$r#__less$ucuc~puc~$qpucpucpucr#__less$ucuc~
        add     esp,byte 010h
        mov     dword [esp-013ch+0170h],eax
; Line 3981:         } 
L_15735:
; Line 3982:         } 
        mov     eax,dword [esp-0148h+0170h]
        mov     ecx,eax
        mov     edx,eax
        mov     edi,esi
        mov     ebx,edx
        mov     dword [esp-0144h+0170h],ebx
        mov     eax,dword [esp-0140h+0170h]
        mov     esi,eax
        movzx   ebx,byte [ebx]
        movzx   eax,byte [eax]
        cmp     ebx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_15743
; Line 3992:         { 
; Line 3995:             while (true) 
        mov     ebx,edi
L_15747:
; Line 3996:             { 
; Line 3997:                 if (__i == --__j) 
        mov     eax,ebx
        dec     eax
        mov     edi,eax
        cmp     edx,eax
        jne     L_15753
; Line 3998:                 { 
; Line 4001:                     ++__i;   
        mov     eax,dword [esp-0144h+0170h]
        inc     eax
        mov     edx,eax
        mov     eax,dword [esp-0150h+0170h]
        mov     edi,ecx
        dec     eax
        mov     ebx,eax
        mov     esi,eax
        movzx   edi,byte [edi]
        movzx   eax,byte [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_15757
; Line 4004:                     { 
; Line 4005:                         while (true) 
L_15761:
; Line 4006:                         { 
; Line 4007:                             if (__i == __j) 
        cmp     edx,ebx
        je      L_15690
L_15767:
        mov     ebp,ecx
        mov     eax,edx
        mov     edi,edx
        movzx   edx,byte [ebp]
        movzx   eax,byte [eax]
        cmp     edx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_15772
; Line 4010:                             { 
; Line 4011:                                 swap(*__i, *__j); 
        mov     eax,edi
        mov     edx,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [esp-0129h+0170h],cl
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [eax],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-0129h+0170h]
        mov     ecx,edx
        mov     byte [ecx],al
; Line 3718: } 
L_16070:
        inc     dword [esp-013ch+0170h]
        mov     eax,edi
        inc     eax
        mov     edx,eax
; Line 4014:                                 break; 
        jmp     L_15762
L_15772:
        mov     eax,edi
        inc     eax
        mov     edx,eax
; Line 4017:                         } 
L_15763:
        jmp     L_15761
L_15762:
; Line 4018:                     } 
L_15757:
        cmp     edx,ebx
        je      L_15690
L_15785:
L_15790:
; Line 4023:                     { 
; Line 4024:                         while (!__comp(*__first, *__i)) 
        mov     edi,dword [esp-0148h+0170h]
        mov     ecx,edi
        mov     eax,edx
        mov     ebx,edx
        movzx   edi,byte [edi]
        movzx   eax,byte [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_15797
L_15796:
        mov     eax,ebx
        inc     eax
        mov     edx,eax
L_15798:
        mov     edi,ecx
        mov     eax,edx
        mov     ebx,edx
        movzx   edi,byte [edi]
        movzx   eax,byte [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_15796
L_15797:
        mov     ebp,ecx
        mov     eax,esi
        dec     eax
        mov     edi,eax
        mov     esi,eax
        movzx   ebp,byte [ebp]
        movzx   eax,byte [eax]
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_15804
L_15803:
L_15805:
; Line 4026:                         while (__comp(*__first, *--__j)) 
        mov     ebp,ecx
        mov     eax,esi
        dec     eax
        mov     edi,eax
        mov     esi,eax
        movzx   ebp,byte [ebp]
        movzx   eax,byte [eax]
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_15803
L_15804:
        cmp     edx,edi
        jge     L_15791
; Line 4029:                             break; 
L_15810:
        mov     ecx,ebx
        mov     eax,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [esp-0129h+0170h],dl
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [ecx],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [esp-0129h+0170h]
        mov     byte [eax],cl
; Line 3718: } 
L_16198:
        inc     dword [esp-013ch+0170h]
        mov     eax,ebx
        inc     eax
        mov     edx,eax
; Line 4033:                     } 
L_15792:
; Line 4022:                     while (true) 
        jmp     L_15790
L_15791:
        mov     eax,ebx
        mov     dword [esp-0148h+0170h],eax
        jmp     L_15698
L_15753:
        mov     ebp,edi
        mov     ebx,edi
        mov     eax,esi
        movzx   ebp,byte [ebp]
        movzx   eax,byte [eax]
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_15821
; Line 4041:                 { 
; Line 4042:                     swap(*__i, *__j); 
        mov     eax,dword [esp-0144h+0170h]
        mov     edx,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [esp-0129h+0170h],cl
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cl,byte [ecx]
        mov     byte [esp-0155h+0170h],cl
        mov     byte [eax],cl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-0129h+0170h]
        mov     ecx,edx
        mov     byte [ecx],al
; Line 3718: } 
L_16278:
        inc     dword [esp-013ch+0170h]
; Line 4044:                     break;   
        jmp     L_15748
L_15821:
; Line 4046:             } 
L_15749:
        jmp     L_15747
L_15748:
; Line 4047:         } 
L_15743:
        mov     eax,dword [esp-0144h+0170h]
        inc     eax
        mov     ebp,eax
        cmp     ebp,edi
        jge     L_15834
; Line 4053:         { 
; Line 4056:             while (true) 
L_15838:
; Line 4057:             { 
; Line 4059:                 while (__comp(*__i, *__m)) 
        mov     ecx,ebp
        mov     ebx,ebp
        mov     eax,esi
        movzx   ecx,byte [ecx]
        movzx   eax,byte [eax]
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_15845
L_15844:
        mov     eax,ebx
        inc     eax
        mov     ebp,eax
L_15846:
        mov     ecx,ebp
        mov     ebx,ebp
        mov     eax,esi
        movzx   ecx,byte [ecx]
        movzx   eax,byte [eax]
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_15844
L_15845:
        dec     edi
        mov     ecx,edi
        mov     edx,edi
        mov     eax,esi
        movzx   ecx,byte [ecx]
        movzx   eax,byte [eax]
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_15852
L_15851:
L_15853:
; Line 4062:                 while (!__comp(*--__j, *__m)) 
        mov     eax,edx
        dec     eax
        mov     edi,eax
        mov     ecx,eax
        mov     edx,eax
        mov     eax,esi
        movzx   ecx,byte [ecx]
        movzx   eax,byte [eax]
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_15851
L_15852:
        cmp     ebp,edi
        jg      L_15839
; Line 4065:                     break; 
L_15858:
        mov     esi,ebx
        mov     ecx,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [esp-0129h+0170h],al
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [eax]
        mov     byte [esi],al
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-0129h+0170h]
        mov     byte [ecx],al
; Line 3718: } 
L_16406:
        inc     dword [esp-013ch+0170h]
        mov     eax,ebp
        cmp     dword [esp-0140h+0170h],eax
        jne     L_15863
        mov     eax,edx
        mov     dword [esp-0140h+0170h],eax
L_15863:
        mov     eax,ebx
        inc     eax
        mov     ebp,eax
; Line 4073:             } 
L_15840:
        mov     esi,dword [esp-0140h+0170h]
        jmp     L_15838
L_15839:
; Line 4074:         } 
L_15834:
        cmp     ebp,dword [esp-0140h+0170h]
        je      L_15874
        mov     edx,esi
        mov     eax,ebp
        mov     ecx,ebp
        movzx   edx,byte [edx]
        movzx   ecx,byte [ecx]
        cmp     edx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_15874
; Line 4077:         { 
; Line 4078:             swap(*__i, *__m); 
        mov     ecx,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [esp-0129h+0170h],dl
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dl,byte [edx]
        mov     byte [eax],dl
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     al,byte [esp-0129h+0170h]
        mov     byte [ecx],al
; Line 3718: } 
L_16486:
        inc     dword [esp-013ch+0170h]
; Line 4080:         } 
L_15874:
        cmp     dword [esp-013ch+0170h],byte 00h
        jne     L_15881
; Line 4084:         { 
; Line 4085:             bool __fs = _VSTD::__insertion_sort_incomplete<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,ebp
        push    eax
        mov     eax,dword [esp-0148h+0178h]
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$ucuc~puc~$qpucpucr#__less$ucuc~
        add     esp,byte 0ch
        mov     byte [esp-0149h+0170h],al
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,dword [esp-0150h+0174h]
        push    eax
        mov     eax,ebp
        inc     eax
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$ucuc~puc~$qpucpucr#__less$ucuc~
        add     esp,byte 0ch
        and     al,al
        je      L_15885
; Line 4087:             { 
; Line 4088:                 if (__fs) 
        cmp     byte [esp-0149h+0170h],byte 00h
        jne     L_15690
L_15889:
        mov     eax,ebp
        mov     dword [esp-0150h+0170h],eax
; Line 4091:                 continue; 
        jmp     L_15692
L_15885:
; Line 4093:             else 
; Line 4094:             { 
; Line 4095:                 if (__fs) 
        cmp     byte [esp-0149h+0170h],byte 00h
        je      L_15899
; Line 4096:                 { 
; Line 4097:                     __first = ++__i; 
        mov     eax,ebp
        inc     eax
        mov     dword [esp-0148h+0170h],eax
; Line 4098:                     continue; 
        jmp     L_15692
L_15899:
; Line 4100:             } 
L_15895:
; Line 4101:         } 
L_15881:
        mov     eax,dword [esp-0150h+0170h]
        mov     ecx,ebp
        mov     edx,eax
        sub     edx,ecx
        mov     eax,dword [esp-0148h+0170h]
        sub     eax,ecx
        neg     eax
        cmp     eax,edx
        jge     L_15912
; Line 4104:         { 
; Line 4105:             _VSTD::__sort<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,ebp
        push    eax
        mov     eax,dword [esp-0148h+0178h]
        push    eax
        call    @std@__1@#__sort$r#__less$ucuc~puc~$qpucpucr#__less$ucuc~
        add     esp,byte 0ch
        mov     eax,ebp
        inc     eax
        mov     dword [esp-0148h+0170h],eax
; Line 4108:         } 
        jmp     L_15917
L_15912:
; Line 4109:         else 
; Line 4110:         { 
; Line 4111:             _VSTD::__sort<_Compare>(__i+1, __last, __comp); 
        mov     eax,dword [esp-0154h+0170h]
        push    eax
        mov     eax,dword [esp-0150h+0174h]
        push    eax
        mov     eax,ecx
        inc     eax
        push    eax
        call    @std@__1@#__sort$r#__less$ucuc~puc~$qpucpucr#__less$ucuc~
        add     esp,byte 0ch
        mov     eax,ebp
        mov     dword [esp-0150h+0170h],eax
; Line 4114:         } 
L_15917:
; Line 4115:     } 
L_15694:
; Line 3934:     while (true) 
        jmp     L_15692
; Line 4116: } 
L_15693:
L_15690:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0160h
        ret
section code
section code
        section vsc@std@__1@#__sort3$r#__less$ss~ps~$qpspspsr#__less$ss~ virtual
        [bits 32]
@std@__1@#__sort3$r#__less$ss~ps~$qpspspsr#__less$ss~:
; Line 3689: unsigned 
        add     esp,0fffffef8h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_16540:
        mov     edx,dword [esp+0ch+0118h]
        mov     esi,dword [esp+08h+0118h]
        mov     edi,dword [esp+04h+0118h]
; Line 3692:     unsigned __r = 0; 
        xor     ebp,ebp
        mov     ecx,esi
        mov     eax,edi
        movsx   ebx,word [ecx]
        mov     dword [esp-0100h+0118h],ebx
        movsx   ebx,word [edi]
        cmp     dword [esp-0100h+0118h],ebx
        setl    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        jne     L_16543
; Line 3694:     { 
; Line 3695:         if (!__c(*__z, *__y))       
        mov     dword [esp-0cch+0118h],ecx
        movsx   edi,word [edx]
        mov     ebx,dword [esp-0cch+0118h]
        movsx   ebx,word [ebx]
        cmp     edi,ebx
        setl    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        jne     L_16547
        mov     eax,ebp
        jmp     L_16541
L_16547:
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bx,word [ecx]
        mov     word [esp-0b6h+0118h],bx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bx,word [edx]
        mov     word [ecx],bx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-0b6h+0118h]
        mov     word [edx],cx
; Line 3718: } 
L_16623:
        mov     edx,01h
        movsx   ebx,word [esi]
        movsx   ecx,word [eax]
        cmp     ebx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_16552
; Line 3701:         { 
; Line 3702:             swap(*__x, *__y);       
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [eax]
        mov     word [esp-0b6h+0118h],cx
        mov     dword [esp-0108h+0118h],esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0108h+0118h]
        mov     cx,word [ecx]
        mov     word [eax],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ax,word [esp-0b6h+0118h]
        mov     word [esi],ax
; Line 3718: } 
L_16703:
        mov     edx,02h
; Line 3704:         } 
L_16552:
        mov     eax,edx
        jmp     L_16541
; Line 3706:     } 
L_16543:
        movsx   ebx,word [edx]
        movsx   edi,word [ecx]
        cmp     ebx,edi
        setl    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_16562
; Line 3708:     { 
; Line 3709:         swap(*__x, *__z);           
        mov     dword [esp-0104h+0118h],eax
        mov     dword [esp-0f8h+0118h],edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-0104h+0118h]
        mov     dword [esp-0fch+0118h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0fch+0118h]
        mov     ax,word [eax]
        mov     word [esp-0b6h+0118h],ax
        mov     eax,dword [esp-0f8h+0118h]
        mov     dword [esp-0f0h+0118h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0f0h+0118h]
        mov     cx,word [eax]
        mov     eax,dword [esp-0104h+0118h]
        mov     word [eax],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-0b6h+0118h]
        mov     eax,dword [esp-0f8h+0118h]
        mov     word [eax],cx
; Line 3718: } 
L_16783:
        mov     eax,01h
        jmp     L_16541
; Line 3712:     } 
L_16562:
        mov     dword [esp-0f4h+0118h],eax
        mov     dword [esp-0dch+0118h],ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-0f4h+0118h]
        mov     dword [esp-0ech+0118h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0ech+0118h]
        mov     ax,word [eax]
        mov     word [esp-0b6h+0118h],ax
        mov     eax,dword [esp-0dch+0118h]
        mov     dword [esp-0d0h+0118h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0d0h+0118h]
        mov     cx,word [eax]
        mov     eax,dword [esp-0f4h+0118h]
        mov     word [eax],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-0b6h+0118h]
        mov     eax,dword [esp-0dch+0118h]
        mov     word [eax],cx
; Line 3718: } 
L_16847:
        mov     ecx,01h
        mov     dword [esp-0e4h+0118h],edx
        mov     dword [esp-0e8h+0118h],esi
        mov     eax,esi
        mov     dword [esp-0e0h+0118h],eax
        mov     eax,dword [esp-0e4h+0118h]
        movsx   ebx,word [eax]
        mov     eax,dword [esp-0e0h+0118h]
        mov     ax,word [eax]
        cwde
        cmp     ebx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_16569
; Line 3716:     { 
; Line 3717:         swap(*__y, *__z);           
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-0e8h+0118h]
        mov     dword [esp-0d4h+0118h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0d4h+0118h]
        mov     ax,word [eax]
        mov     word [esp-0b6h+0118h],ax
        mov     dword [esp-0d8h+0118h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0d8h+0118h]
        mov     cx,word [eax]
        mov     eax,dword [esp-0e8h+0118h]
        mov     word [eax],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ax,word [esp-0b6h+0118h]
        mov     word [edx],ax
; Line 3718: } 
L_16927:
        mov     ecx,02h
; Line 3719:     } 
L_16569:
        mov     eax,ecx
; Line 3721: }                                   
L_16541:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0108h
        ret
section code
section code
        section vsc@std@__1@#__sort4$r#__less$ss~ps~$qpspspspsr#__less$ss~ virtual
        [bits 32]
@std@__1@#__sort4$r#__less$ss~ps~$qpspspspsr#__less$ss~:
; Line 3726: unsigned 
        add     esp,byte 0ffffff84h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_16981:
        mov     ecx,dword [esp+014h+08ch]
        mov     esi,dword [esp+010h+08ch]
        mov     edi,dword [esp+0ch+08ch]
        mov     eax,dword [esp+08h+08ch]
        mov     dword [esp-07ch+08ch],eax
        mov     ebx,dword [esp+04h+08ch]
; Line 3730:     unsigned __r = __sort3<_Compare>(__x1, __x2, __x3, __c); 
        push    ecx
        mov     eax,edi
        push    eax
        mov     eax,dword [esp-07ch+094h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#__sort3$r#__less$ss~ps~$qpspspsr#__less$ss~
        add     esp,byte 010h
        mov     ebp,eax
        mov     ecx,esi
        mov     edx,esi
        mov     eax,edi
        mov     esi,edi
        movsx   edx,word [edx]
        mov     ax,word [eax]
        cwde
        cmp     edx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_16984
; Line 3732:     { 
; Line 3733:         swap(*__x3, *__x4); 
        mov     edx,esi
        mov     eax,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [ecx]
        mov     word [esp-066h+08ch],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [eax]
        mov     word [edx],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-066h+08ch]
        mov     word [eax],cx
; Line 3718: } 
L_17036:
        inc     ebp
        mov     eax,edi
        mov     ecx,dword [esp-07ch+08ch]
        mov     edx,ecx
        movsx   esi,word [eax]
        movsx   edx,word [edx]
        cmp     esi,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_16988
; Line 3736:         { 
; Line 3737:             swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [ecx]
        mov     word [esp-066h+08ch],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [eax]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-066h+08ch]
        mov     word [eax],cx
; Line 3718: } 
L_17116:
        inc     ebp
        mov     eax,dword [esp-07ch+08ch]
        mov     ecx,ebx
        movsx   ebx,word [eax]
        movsx   edx,word [ecx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_16992
; Line 3740:             { 
; Line 3741:                 swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [ecx]
        mov     word [esp-066h+08ch],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [eax]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-066h+08ch]
        mov     word [eax],cx
; Line 3718: } 
L_17196:
        inc     ebp
; Line 3743:             } 
L_16992:
; Line 3744:         } 
L_16988:
; Line 3745:     } 
L_16984:
        mov     eax,ebp
; Line 3747: } 
L_16982:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 07ch
        ret
section code
section code
        section vsc@std@__1@#__sort5$r#__less$ss~ps~$qpspspspspsr#__less$ss~ virtual
        [bits 32]
@std@__1@#__sort5$r#__less$ss~ps~$qpspspspspsr#__less$ss~:
; Line 3752: _LIBCPP_HIDDEN 
        add     esp,0ffffff54h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_17250:
        mov     ecx,dword [esp+018h+0bch]
        mov     ebx,dword [esp+014h+0bch]
        mov     eax,dword [esp+010h+0bch]
        mov     dword [esp-0a8h+0bch],eax
        mov     eax,dword [esp+0ch+0bch]
        mov     dword [esp-0a4h+0bch],eax
        mov     edi,dword [esp+08h+0bch]
        mov     esi,dword [esp+04h+0bch]
; Line 3757:     unsigned __r = __sort4<_Compare>(__x1, __x2, __x3, __x4, __c); 
        push    ecx
        mov     eax,dword [esp-0a8h+0c0h]
        push    eax
        mov     eax,dword [esp-0a4h+0c4h]
        push    eax
        mov     eax,edi
        push    eax
        mov     eax,esi
        push    eax
        call    @std@__1@#__sort4$r#__less$ss~ps~$qpspspspsr#__less$ss~
        add     esp,byte 014h
        mov     ebp,eax
        mov     edx,ebx
        mov     ecx,ebx
        mov     eax,dword [esp-0a8h+0bch]
        mov     ebx,eax
        movsx   ecx,word [ecx]
        mov     ax,word [eax]
        cwde
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_17253
; Line 3759:     { 
; Line 3760:         swap(*__x4, *__x5); 
        mov     ecx,ebx
        mov     eax,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [edx]
        mov     word [esp-08eh+0bch],dx
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [edx]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-08eh+0bch]
        mov     word [eax],cx
; Line 3718: } 
L_17312:
        inc     ebp
        mov     ebx,dword [esp-0a8h+0bch]
        mov     ecx,ebx
        mov     eax,dword [esp-0a4h+0bch]
        mov     edx,eax
        movsx   ebx,word [ebx]
        mov     ax,word [eax]
        cwde
        cmp     ebx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_17257
; Line 3763:         { 
; Line 3764:             swap(*__x3, *__x4); 
        mov     eax,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [ecx]
        mov     word [esp-08eh+0bch],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [eax]
        mov     word [edx],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-08eh+0bch]
        mov     word [eax],cx
; Line 3718: } 
L_17392:
        inc     ebp
        mov     eax,dword [esp-0a4h+0bch]
        mov     ecx,edi
        mov     edx,edi
        mov     dword [esp-0ach+0bch],edx
        movsx   ebx,word [eax]
        mov     edx,dword [esp-0ach+0bch]
        movsx   edx,word [edx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_17261
; Line 3767:             { 
; Line 3768:                 swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [ecx]
        mov     word [esp-08eh+0bch],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [eax]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-08eh+0bch]
        mov     word [eax],cx
; Line 3718: } 
L_17472:
        inc     ebp
        mov     eax,edi
        mov     ecx,esi
        movsx   ebx,word [eax]
        movsx   edx,word [ecx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_17265
; Line 3771:                 { 
; Line 3772:                     swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [ecx]
        mov     word [esp-08eh+0bch],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [eax]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-08eh+0bch]
        mov     word [eax],cx
; Line 3718: } 
L_17552:
        inc     ebp
; Line 3774:                 } 
L_17265:
; Line 3775:             } 
L_17261:
; Line 3776:         } 
L_17257:
; Line 3777:     } 
L_17253:
        mov     eax,ebp
; Line 3779: } 
L_17251:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0ach
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_3$r#__less$ss~ps~$qpspsr#__less$ss~ virtual
        [bits 32]
@std@__1@#__insertion_sort_3$r#__less$ss~ps~$qpspsr#__less$ss~:
; Line 3817: void 
        add     esp,byte 0ffffffd0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_17606:
        mov     edx,dword [esp+0ch+040h]
        mov     esi,dword [esp+08h+040h]
        mov     edi,dword [esp+04h+040h]
; Line 3820:     typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type; 
        mov     ecx,edi
        mov     eax,edi
        add     eax,byte 04h
        mov     ebx,eax
        push    edx
        mov     eax,ebx
        push    eax
        mov     eax,edi
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ss~ps~$qpspspsr#__less$ss~
        add     esp,byte 010h
; Line 3823:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     ecx,ebx
        add     ecx,byte 02h
        cmp     ecx,esi
        je      L_17611
L_17609:
; Line 3824:     { 
; Line 3825:         if (__comp(*__i, *__j)) 
        mov     edx,ecx
        mov     eax,ebx
        movsx   ecx,word [ecx]
        movsx   ebx,word [ebx]
        cmp     ecx,ebx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_17616
; Line 3826:         { 
; Line 3827:             value_type __t(_VSTD::move(*__i)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [ecx]
        mov     word [esp-02h+040h],cx
        mov     ebx,eax
        mov     eax,edx
; Line 3831:             { 
L_17620:
; Line 3832:                 *__j = _VSTD::move(*__k); 
        mov     ecx,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [ecx]
        mov     word [eax],cx
        mov     eax,ebx
; Line 3834:             } while (__j != __first && __comp(__t, *--__k)); 
L_17622:
        cmp     eax,edi
        je      L_17685
        sub     ebx,byte 02h
        mov     ecx,ebx
        movsx   ebp,word [esp-02h+040h]
        movsx   ecx,word [ecx]
        cmp     ebp,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_17620
L_17685:
L_17621:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-02h+040h]
        mov     word [eax],cx
; Line 3836:         } 
L_17616:
        mov     ebx,edx
; Line 3838:     } 
L_17612:
        mov     eax,edx
        add     eax,byte 02h
        mov     ecx,eax
L_17610:
        cmp     ecx,esi
        jne     L_17609
L_17611:
; Line 3839: } 
L_17607:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 030h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_incomplete$r#__less$ss~ps~$qpspsr#__less$ss~ virtual
        [bits 32]
@std@__1@#__insertion_sort_incomplete$r#__less$ss~ps~$qpspsr#__less$ss~:
; Line 3842: bool 
        add     esp,byte 0ffffffa0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_17721:
        mov     edx,dword [esp+0ch+070h]
        mov     eax,dword [esp+08h+070h]
        mov     dword [esp-05ch+070h],eax
        mov     ebx,dword [esp+04h+070h]
; Line 3845:     switch (__last - __first) 
        mov     eax,dword [esp-05ch+070h]
        mov     ecx,ebx
        mov     esi,eax
        sub     esi,ecx
        sar     esi,01h
        mov     dword [esp-060h+070h],eax
        cmp     esi,byte 06h
        jnc     L_17745
        push    esi
        mov     esi,dword [esi*4+L_65485]
        xchg    esi,dword [esp]
        ret
        times $$-$ & 3 nop
L_65485:
        dd      L_17727
        dd      L_17729
        dd      L_17731
        dd      L_17738
        dd      L_17740
        dd      L_17742
; Line 3846:     { 
; Line 3847:     case 0: 
L_17727:
L_17729:
        mov     al,01h
        jmp     L_17722
L_17731:
        mov     eax,dword [esp-060h+070h]
        sub     eax,byte 02h
        movsx   ebx,word [eax]
        movsx   edx,word [ecx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_17733
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [ecx]
        mov     word [esp-01ah+070h],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [eax]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-01ah+070h]
        mov     word [eax],cx
; Line 3718: } 
L_17809:
L_17733:
        mov     al,01h
        jmp     L_17722
L_17738:
        push    edx
        mov     eax,dword [esp-060h+074h]
        sub     eax,byte 02h
        push    eax
        mov     eax,ebx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ss~ps~$qpspspsr#__less$ss~
        add     esp,byte 010h
        mov     al,01h
        jmp     L_17722
L_17740:
        push    edx
        mov     eax,dword [esp-060h+074h]
        sub     eax,byte 02h
        push    eax
        mov     eax,ebx
        mov     edx,ecx
        add     edx,byte 04h
        push    edx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$ss~ps~$qpspspspsr#__less$ss~
        add     esp,byte 014h
        mov     al,01h
        jmp     L_17722
L_17742:
        push    edx
        mov     eax,dword [esp-060h+074h]
        sub     eax,byte 02h
        push    eax
        mov     eax,ebx
        mov     edx,ecx
        add     edx,byte 06h
        push    edx
        mov     edx,ecx
        add     edx,byte 04h
        push    edx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$ss~ps~$qpspspspspsr#__less$ss~
        add     esp,byte 018h
        mov     al,01h
        jmp     L_17722
; Line 3863:     } 
L_17745:
L_17724:
        mov     eax,ecx
        add     eax,byte 04h
        mov     esi,eax
        push    edx
        mov     eax,esi
        push    eax
        mov     eax,ebx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ss~ps~$qpspspsr#__less$ss~
        add     esp,byte 010h
        xor     edi,edi
; Line 3869:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     eax,esi
        add     eax,byte 02h
        cmp     eax,dword [esp-05ch+070h]
        je      L_17749
L_17747:
; Line 3870:     { 
; Line 3871:         if (__comp(*__i, *__j)) 
        mov     edx,eax
        mov     ecx,esi
        mov     ax,word [eax]
        cwde
        movsx   esi,word [esi]
        cmp     eax,esi
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_17754
; Line 3872:         { 
; Line 3873:             value_type __t(_VSTD::move(*__i)); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ax,word [eax]
        mov     word [esp-02h+070h],ax
        mov     esi,ecx
        mov     eax,edx
; Line 3877:             { 
L_17758:
; Line 3878:                 *__j = _VSTD::move(*__k); 
        mov     ecx,esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [ecx]
        mov     word [eax],cx
        mov     eax,esi
; Line 3880:             } while (__j != __first && __comp(__t, *--__k)); 
L_17760:
        cmp     eax,ebx
        je      L_17908
        sub     esi,byte 02h
        mov     ecx,esi
        movsx   ebp,word [esp-02h+070h]
        movsx   ecx,word [ecx]
        cmp     ebp,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_17758
L_17908:
L_17759:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-02h+070h]
        mov     word [eax],cx
        inc     edi
        cmp     edi,byte 08h
        jne     L_17767
        mov     ecx,edx
        add     ecx,byte 02h
        mov     eax,dword [esp-060h+070h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
        jmp     L_17722
L_17767:
; Line 3884:         } 
L_17754:
        mov     esi,edx
; Line 3886:     } 
L_17750:
        mov     eax,edx
        add     eax,byte 02h
L_17748:
        cmp     eax,dword [esp-05ch+070h]
        jne     L_17747
L_17749:
        mov     al,01h
; Line 3888: } 
L_17722:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 060h
        ret
section code
section code
        section vsc@std@__1@#__sort$r#__less$ss~ps~$qpspsr#__less$ss~ virtual
        [bits 32]
@std@__1@#__sort$r#__less$ss~ps~$qpspsr#__less$ss~:
; Line 3926: void 
        add     esp,0fffffe44h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_17944:
        mov     eax,dword [esp+0ch+01cch]
        mov     dword [esp-016ch+01cch],eax
        mov     eax,dword [esp+08h+01cch]
        mov     dword [esp-0168h+01cch],eax
        mov     eax,dword [esp+04h+01cch]
        mov     dword [esp-0160h+01cch],eax
; Line 3930:     typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type; 
L_17947:
; Line 3935:     { 
; Line 3936:     __restart: 
L_17953:
        mov     eax,dword [esp-0168h+01cch]
        mov     edx,dword [esp-0160h+01cch]
        mov     ecx,eax
        sub     ecx,edx
        sar     ecx,01h
        mov     ebx,ecx
        and     ebx,ebx
        jl      L_17975
        cmp     ebx,byte 06h
        jge     L_17975
        push    ebx
        mov     ebx,dword [ebx*4+L_65490]
        xchg    ebx,dword [esp]
        ret
        times $$-$ & 3 nop
L_65490:
        dd      L_17957
        dd      L_17959
        dd      L_17961
        dd      L_17968
        dd      L_17970
        dd      L_17972
; Line 3939:         { 
; Line 3940:         case 0: 
L_17957:
L_17959:
        jmp     L_17945
L_17961:
        sub     eax,byte 02h
        mov     dword [esp-01a8h+01cch],eax
        mov     dword [esp-01b8h+01cch],edx
        mov     ecx,dword [esp-01a8h+01cch]
        movsx   ebx,word [ecx]
        mov     ecx,dword [esp-01b8h+01cch]
        movsx   ecx,word [ecx]
        cmp     ebx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_17945
        mov     dword [esp-01a4h+01cch],edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,dword [esp-01a4h+01cch]
        mov     dword [esp-0180h+01cch],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0180h+01cch]
        mov     cx,word [ecx]
        mov     word [esp-013eh+01cch],cx
        mov     dword [esp-017ch+01cch],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-017ch+01cch]
        mov     dx,word [ecx]
        mov     ecx,dword [esp-01a4h+01cch]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-013eh+01cch]
        mov     word [eax],cx
; Line 3718: } 
L_18213:
L_17963:
        jmp     L_17945
L_17968:
        mov     ecx,dword [esp-016ch+01cch]
        push    ecx
        sub     eax,byte 02h
        push    eax
        mov     eax,dword [esp-0160h+01d4h]
        mov     ecx,edx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ss~ps~$qpspspsr#__less$ss~
        add     esp,byte 010h
        jmp     L_17945
L_17970:
        mov     ecx,dword [esp-016ch+01cch]
        push    ecx
        sub     eax,byte 02h
        push    eax
        mov     eax,dword [esp-0160h+01d4h]
        mov     ecx,edx
        add     ecx,byte 04h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$ss~ps~$qpspspspsr#__less$ss~
        add     esp,byte 014h
        jmp     L_17945
L_17972:
        mov     ecx,dword [esp-016ch+01cch]
        push    ecx
        sub     eax,byte 02h
        push    eax
        mov     eax,dword [esp-0160h+01d4h]
        mov     ecx,edx
        add     ecx,byte 06h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 04h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$ss~ps~$qpspspspspsr#__less$ss~
        add     esp,byte 018h
        jmp     L_17945
; Line 3956:         } 
L_17975:
L_17954:
        cmp     ecx,byte 06h
        jg      L_17977
; Line 3958:         { 
; Line 3959:             _VSTD::__insertion_sort_3<_Compare>(__first, __last, __comp); 
        mov     eax,dword [esp-016ch+01cch]
        push    eax
        mov     eax,dword [esp-0168h+01d0h]
        push    eax
        mov     eax,dword [esp-0160h+01d4h]
        push    eax
        call    @std@__1@#__insertion_sort_3$r#__less$ss~ps~$qpspsr#__less$ss~
        add     esp,byte 0ch
        jmp     L_17945
; Line 3961:         } 
L_17977:
        mov     esi,edx
        mov     dword [esp-0190h+01cch],eax
        sub     eax,byte 02h
        mov     ebx,eax
; Line 3967:         { 
; Line 3968:         difference_type __delta; 
        cmp     ecx,03e8h
        jl      L_17985
; Line 3970:         { 
; Line 3971:             __delta = __len/2; 
        mov     eax,ecx
        shr     eax,01fh
        add     eax,ecx
        sar     eax,01h
        mov     dword [esp-01ach+01cch],esi
        mov     esi,eax
        shl     esi,01h
        mov     ecx,dword [esp-01ach+01cch]
        add     ecx,esi
        mov     dword [esp-0158h+01cch],ecx
        mov     ecx,eax
        shr     ecx,01fh
        add     eax,ecx
        sar     eax,01h
        mov     ecx,dword [esp-016ch+01cch]
        push    ecx
        mov     ecx,ebx
        push    ecx
        mov     esi,dword [esp-0158h+01d4h]
        mov     ecx,eax
        shl     ecx,01h
        mov     eax,esi
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0158h+01d8h]
        push    eax
        mov     eax,edx
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0160h+01e0h]
        push    eax
        call    @std@__1@#__sort5$r#__less$ss~ps~$qpspspspspsr#__less$ss~
        add     esp,byte 018h
        mov     dword [esp-0154h+01cch],eax
; Line 3975:         } 
        jmp     L_17990
L_17985:
; Line 3976:         else 
; Line 3977:         { 
; Line 3978:             __delta = __len/2; 
        mov     dword [esp-01b0h+01cch],ecx
        shr     ecx,01fh
        mov     eax,dword [esp-01b0h+01cch]
        add     eax,ecx
        sar     eax,01h
        mov     dword [esp-0194h+01cch],esi
        mov     ecx,eax
        shl     ecx,01h
        mov     eax,dword [esp-0194h+01cch]
        add     eax,ecx
        mov     dword [esp-0158h+01cch],eax
        mov     eax,dword [esp-016ch+01cch]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0158h+01d4h]
        push    eax
        mov     eax,dword [esp-0160h+01d8h]
        push    eax
        call    @std@__1@#__sort3$r#__less$ss~ps~$qpspspsr#__less$ss~
        add     esp,byte 010h
        mov     dword [esp-0154h+01cch],eax
; Line 3981:         } 
L_17990:
; Line 3982:         } 
        mov     esi,dword [esp-0160h+01cch]
        mov     edx,esi
        mov     dword [esp-01b4h+01cch],ebx
        mov     ebx,esi
        mov     dword [esp-015ch+01cch],ebx
        mov     eax,dword [esp-0158h+01cch]
        mov     ecx,eax
        movsx   ebx,word [ebx]
        mov     ax,word [eax]
        cwde
        cmp     ebx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_17998
; Line 3992:         { 
; Line 3995:             while (true) 
        mov     eax,dword [esp-01b4h+01cch]
L_18002:
; Line 3996:             { 
; Line 3997:                 if (__i == --__j) 
        sub     eax,byte 02h
        mov     dword [esp-01b4h+01cch],eax
        cmp     esi,eax
        jne     L_18008
; Line 3998:                 { 
; Line 4001:                     ++__i;   
        mov     eax,dword [esp-015ch+01cch]
        add     eax,byte 02h
        mov     esi,eax
        mov     eax,dword [esp-0168h+01cch]
        mov     edi,edx
        sub     eax,byte 02h
        mov     ecx,eax
        mov     ebx,eax
        movsx   edi,word [edi]
        mov     ax,word [eax]
        cwde
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_18012
; Line 4004:                     { 
; Line 4005:                         while (true) 
L_18016:
; Line 4006:                         { 
; Line 4007:                             if (__i == __j) 
        cmp     esi,ecx
        je      L_17945
L_18022:
        mov     edi,edx
        mov     eax,esi
        movsx   edi,word [edi]
        mov     ax,word [eax]
        cwde
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_18027
; Line 4010:                             { 
; Line 4011:                                 swap(*__i, *__j); 
        mov     edx,esi
        mov     eax,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edi,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     di,word [edi]
        mov     word [esp-013eh+01cch],di
        mov     edi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     di,word [edi]
        mov     word [edx],di
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [esp-013eh+01cch]
        mov     word [eax],dx
; Line 3718: } 
L_18325:
        inc     dword [esp-0154h+01cch]
        add     esi,byte 02h
; Line 4014:                                 break; 
        jmp     L_18017
L_18027:
        add     esi,byte 02h
; Line 4017:                         } 
L_18018:
        jmp     L_18016
L_18017:
; Line 4018:                     } 
L_18012:
        mov     dword [esp-018ch+01cch],ecx
        cmp     esi,dword [esp-018ch+01cch]
        je      L_17945
L_18040:
L_18045:
; Line 4023:                     { 
; Line 4024:                         while (!__comp(*__first, *__i)) 
        mov     edi,dword [esp-0160h+01cch]
        mov     ecx,edi
        mov     eax,esi
        mov     edx,esi
        movsx   edi,word [edi]
        mov     ax,word [eax]
        cwde
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_18052
L_18051:
        mov     eax,edx
        add     eax,byte 02h
        mov     esi,eax
L_18053:
        mov     edi,ecx
        mov     eax,esi
        mov     edx,esi
        movsx   edi,word [edi]
        mov     ax,word [eax]
        cwde
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_18051
L_18052:
        mov     ebp,ecx
        mov     eax,ebx
        sub     eax,byte 02h
        mov     edi,eax
        mov     ebx,eax
        movsx   ebp,word [ebp]
        mov     ax,word [eax]
        cwde
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_18059
L_18058:
L_18060:
; Line 4026:                         while (__comp(*__first, *--__j)) 
        mov     ebp,ecx
        mov     eax,ebx
        sub     eax,byte 02h
        mov     edi,eax
        mov     ebx,eax
        movsx   ebp,word [ebp]
        mov     ax,word [eax]
        cwde
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_18058
L_18059:
        cmp     esi,edi
        jge     L_18046
; Line 4029:                             break; 
L_18065:
        mov     ecx,edx
        mov     eax,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     esi,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     si,word [esi]
        mov     word [esp-013eh+01cch],si
        mov     esi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     si,word [esi]
        mov     word [ecx],si
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-013eh+01cch]
        mov     word [eax],cx
; Line 3718: } 
L_18453:
        inc     dword [esp-0154h+01cch]
        mov     eax,edx
        add     eax,byte 02h
        mov     esi,eax
; Line 4033:                     } 
L_18047:
; Line 4022:                     while (true) 
        jmp     L_18045
L_18046:
        mov     eax,edx
        mov     dword [esp-0160h+01cch],eax
        jmp     L_17953
L_18008:
        mov     eax,dword [esp-01b4h+01cch]
        mov     ebx,eax
        mov     dword [esp-01a0h+01cch],ecx
        movsx   edi,word [ebx]
        mov     ebx,dword [esp-01a0h+01cch]
        mov     dword [esp-0178h+01cch],ebx
        movsx   ebx,word [ebx]
        cmp     edi,ebx
        setl    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_18076
; Line 4041:                 { 
; Line 4042:                     swap(*__i, *__j); 
        mov     edx,dword [esp-015ch+01cch]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bx,word [ebx]
        mov     word [esp-013eh+01cch],bx
        mov     ebx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bx,word [ebx]
        mov     word [edx],bx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [esp-013eh+01cch]
        mov     dword [esp-01bch+01cch],eax
        mov     word [eax],dx
; Line 3718: } 
L_18533:
        inc     dword [esp-0154h+01cch]
; Line 4044:                     break;   
        jmp     L_18003
L_18076:
; Line 4046:             } 
L_18004:
        jmp     L_18002
L_18003:
; Line 4047:         } 
L_17998:
        mov     eax,dword [esp-015ch+01cch]
        add     eax,byte 02h
        mov     ebx,eax
        cmp     ebx,dword [esp-01b4h+01cch]
        jge     L_18089
; Line 4053:         { 
; Line 4056:             while (true) 
L_18093:
; Line 4057:             { 
; Line 4059:                 while (__comp(*__i, *__m)) 
        mov     esi,ebx
        mov     edx,ebx
        mov     eax,ecx
        movsx   esi,word [esi]
        mov     ax,word [eax]
        cwde
        cmp     esi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_18100
L_18099:
        mov     eax,edx
        add     eax,byte 02h
        mov     ebx,eax
L_18101:
        mov     esi,ebx
        mov     edx,ebx
        mov     eax,ecx
        movsx   esi,word [esi]
        mov     ax,word [eax]
        cwde
        cmp     esi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_18099
L_18100:
        sub     dword [esp-01b4h+01cch],byte 02h
        mov     edi,dword [esp-01b4h+01cch]
        mov     esi,edi
        mov     eax,ecx
        mov     dword [esp-019ch+01cch],eax
        movsx   edi,word [edi]
        mov     eax,dword [esp-019ch+01cch]
        mov     dword [esp-0174h+01cch],eax
        mov     ax,word [eax]
        cwde
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_18107
L_18106:
L_18108:
; Line 4062:                 while (!__comp(*--__j, *__m)) 
        mov     eax,esi
        sub     eax,byte 02h
        mov     dword [esp-01b4h+01cch],eax
        mov     edi,eax
        mov     esi,eax
        mov     eax,ecx
        mov     dword [esp-0198h+01cch],eax
        movsx   edi,word [edi]
        mov     eax,dword [esp-0198h+01cch]
        mov     dword [esp-0170h+01cch],eax
        mov     ax,word [eax]
        cwde
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_18106
L_18107:
        cmp     ebx,dword [esp-01b4h+01cch]
        jg      L_18094
; Line 4065:                     break; 
L_18113:
        mov     ecx,edx
        mov     eax,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edi,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     di,word [edi]
        mov     word [esp-013eh+01cch],di
        mov     edi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     di,word [edi]
        mov     word [ecx],di
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-013eh+01cch]
        mov     word [eax],cx
; Line 3718: } 
L_18661:
        inc     dword [esp-0154h+01cch]
        mov     eax,ebx
        cmp     dword [esp-0158h+01cch],eax
        jne     L_18118
        mov     eax,esi
        mov     dword [esp-0158h+01cch],eax
L_18118:
        mov     eax,edx
        add     eax,byte 02h
        mov     ebx,eax
; Line 4073:             } 
L_18095:
        mov     ecx,dword [esp-0158h+01cch]
        jmp     L_18093
L_18094:
; Line 4074:         } 
L_18089:
        cmp     ebx,dword [esp-0158h+01cch]
        je      L_18129
        mov     esi,ecx
        mov     eax,ebx
        mov     edx,ebx
        movsx   esi,word [esi]
        movsx   edx,word [edx]
        cmp     esi,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_18129
; Line 4077:         { 
; Line 4078:             swap(*__i, *__m); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [edx]
        mov     word [esp-013eh+01cch],dx
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [edx]
        mov     dword [esp-0184h+01cch],eax
        mov     word [eax],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [esp-013eh+01cch]
        mov     dword [esp-0188h+01cch],ecx
        mov     eax,ecx
        mov     word [eax],dx
; Line 3718: } 
L_18741:
        inc     dword [esp-0154h+01cch]
; Line 4080:         } 
L_18129:
        cmp     dword [esp-0154h+01cch],byte 00h
        jne     L_18136
; Line 4084:         { 
; Line 4085:             bool __fs = _VSTD::__insertion_sort_incomplete<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-016ch+01cch]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0160h+01d4h]
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$ss~ps~$qpspsr#__less$ss~
        add     esp,byte 0ch
        mov     byte [esp-0161h+01cch],al
        mov     eax,dword [esp-016ch+01cch]
        push    eax
        mov     eax,dword [esp-0168h+01d0h]
        push    eax
        mov     eax,ebx
        add     eax,byte 02h
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$ss~ps~$qpspsr#__less$ss~
        add     esp,byte 0ch
        and     al,al
        je      L_18140
; Line 4087:             { 
; Line 4088:                 if (__fs) 
        cmp     byte [esp-0161h+01cch],byte 00h
        jne     L_17945
L_18144:
        mov     eax,ebx
        mov     dword [esp-0168h+01cch],eax
; Line 4091:                 continue; 
        jmp     L_17947
L_18140:
; Line 4093:             else 
; Line 4094:             { 
; Line 4095:                 if (__fs) 
        cmp     byte [esp-0161h+01cch],byte 00h
        je      L_18154
; Line 4096:                 { 
; Line 4097:                     __first = ++__i; 
        mov     eax,ebx
        add     eax,byte 02h
        mov     dword [esp-0160h+01cch],eax
; Line 4098:                     continue; 
        jmp     L_17947
L_18154:
; Line 4100:             } 
L_18150:
; Line 4101:         } 
L_18136:
        mov     eax,dword [esp-0168h+01cch]
        mov     ecx,ebx
        sub     eax,ecx
        mov     edx,eax
        sar     edx,01h
        mov     eax,dword [esp-0160h+01cch]
        sub     eax,ecx
        neg     eax
        imul    eax,byte 01h
        sar     eax,01h
        cmp     eax,edx
        jge     L_18167
; Line 4104:         { 
; Line 4105:             _VSTD::__sort<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-016ch+01cch]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0160h+01d4h]
        push    eax
        call    @std@__1@#__sort$r#__less$ss~ps~$qpspsr#__less$ss~
        add     esp,byte 0ch
        mov     eax,ebx
        add     eax,byte 02h
        mov     dword [esp-0160h+01cch],eax
; Line 4108:         } 
        jmp     L_18172
L_18167:
; Line 4109:         else 
; Line 4110:         { 
; Line 4111:             _VSTD::__sort<_Compare>(__i+1, __last, __comp); 
        mov     eax,dword [esp-016ch+01cch]
        push    eax
        mov     eax,dword [esp-0168h+01d0h]
        push    eax
        mov     eax,ecx
        add     eax,byte 02h
        push    eax
        call    @std@__1@#__sort$r#__less$ss~ps~$qpspsr#__less$ss~
        add     esp,byte 0ch
        mov     eax,ebx
        mov     dword [esp-0168h+01cch],eax
; Line 4114:         } 
L_18172:
; Line 4115:     } 
L_17949:
; Line 3934:     while (true) 
        jmp     L_17947
; Line 4116: } 
L_17948:
L_17945:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,01bch
        ret
section code
section code
        section vsc@std@__1@#__sort3$r#__less$usus~pus~$qpuspuspusr#__less$usus~ virtual
        [bits 32]
@std@__1@#__sort3$r#__less$usus~pus~$qpuspuspusr#__less$usus~:
; Line 3689: unsigned 
        add     esp,0fffffef8h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_18795:
        mov     edx,dword [esp+0ch+0118h]
        mov     esi,dword [esp+08h+0118h]
        mov     edi,dword [esp+04h+0118h]
; Line 3692:     unsigned __r = 0; 
        xor     ebp,ebp
        mov     ecx,esi
        mov     eax,edi
        movzx   ebx,word [ecx]
        mov     dword [esp-0100h+0118h],ebx
        movzx   ebx,word [edi]
        cmp     dword [esp-0100h+0118h],ebx
        setl    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        jne     L_18798
; Line 3694:     { 
; Line 3695:         if (!__c(*__z, *__y))       
        mov     dword [esp-0cch+0118h],ecx
        movzx   edi,word [edx]
        mov     ebx,dword [esp-0cch+0118h]
        movzx   ebx,word [ebx]
        cmp     edi,ebx
        setl    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        jne     L_18802
        mov     eax,ebp
        jmp     L_18796
L_18802:
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bx,word [ecx]
        mov     word [esp-0b6h+0118h],bx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bx,word [edx]
        mov     word [ecx],bx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-0b6h+0118h]
        mov     word [edx],cx
; Line 3718: } 
L_18878:
        mov     edx,01h
        movzx   ebx,word [esi]
        movzx   ecx,word [eax]
        cmp     ebx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_18807
; Line 3701:         { 
; Line 3702:             swap(*__x, *__y);       
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [eax]
        mov     word [esp-0b6h+0118h],cx
        mov     dword [esp-0108h+0118h],esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0108h+0118h]
        mov     cx,word [ecx]
        mov     word [eax],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ax,word [esp-0b6h+0118h]
        mov     word [esi],ax
; Line 3718: } 
L_18958:
        mov     edx,02h
; Line 3704:         } 
L_18807:
        mov     eax,edx
        jmp     L_18796
; Line 3706:     } 
L_18798:
        movzx   ebx,word [edx]
        movzx   edi,word [ecx]
        cmp     ebx,edi
        setl    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_18817
; Line 3708:     { 
; Line 3709:         swap(*__x, *__z);           
        mov     dword [esp-0104h+0118h],eax
        mov     dword [esp-0f8h+0118h],edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-0104h+0118h]
        mov     dword [esp-0fch+0118h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0fch+0118h]
        mov     ax,word [eax]
        mov     word [esp-0b6h+0118h],ax
        mov     eax,dword [esp-0f8h+0118h]
        mov     dword [esp-0f0h+0118h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0f0h+0118h]
        mov     cx,word [eax]
        mov     eax,dword [esp-0104h+0118h]
        mov     word [eax],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-0b6h+0118h]
        mov     eax,dword [esp-0f8h+0118h]
        mov     word [eax],cx
; Line 3718: } 
L_19038:
        mov     eax,01h
        jmp     L_18796
; Line 3712:     } 
L_18817:
        mov     dword [esp-0f4h+0118h],eax
        mov     dword [esp-0dch+0118h],ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-0f4h+0118h]
        mov     dword [esp-0ech+0118h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0ech+0118h]
        mov     ax,word [eax]
        mov     word [esp-0b6h+0118h],ax
        mov     eax,dword [esp-0dch+0118h]
        mov     dword [esp-0d0h+0118h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0d0h+0118h]
        mov     cx,word [eax]
        mov     eax,dword [esp-0f4h+0118h]
        mov     word [eax],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-0b6h+0118h]
        mov     eax,dword [esp-0dch+0118h]
        mov     word [eax],cx
; Line 3718: } 
L_19102:
        mov     ecx,01h
        mov     dword [esp-0e4h+0118h],edx
        mov     dword [esp-0e8h+0118h],esi
        mov     eax,esi
        mov     dword [esp-0e0h+0118h],eax
        mov     eax,dword [esp-0e4h+0118h]
        movzx   ebx,word [eax]
        mov     eax,dword [esp-0e0h+0118h]
        movzx   eax,word [eax]
        cmp     ebx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_18824
; Line 3716:     { 
; Line 3717:         swap(*__y, *__z);           
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-0e8h+0118h]
        mov     dword [esp-0d4h+0118h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0d4h+0118h]
        mov     ax,word [eax]
        mov     word [esp-0b6h+0118h],ax
        mov     dword [esp-0d8h+0118h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0d8h+0118h]
        mov     cx,word [eax]
        mov     eax,dword [esp-0e8h+0118h]
        mov     word [eax],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ax,word [esp-0b6h+0118h]
        mov     word [edx],ax
; Line 3718: } 
L_19182:
        mov     ecx,02h
; Line 3719:     } 
L_18824:
        mov     eax,ecx
; Line 3721: }                                   
L_18796:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0108h
        ret
section code
section code
        section vsc@std@__1@#__sort4$r#__less$usus~pus~$qpuspuspuspusr#__less$usus~ virtual
        [bits 32]
@std@__1@#__sort4$r#__less$usus~pus~$qpuspuspuspusr#__less$usus~:
; Line 3726: unsigned 
        add     esp,byte 0ffffff84h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_19236:
        mov     ecx,dword [esp+014h+08ch]
        mov     esi,dword [esp+010h+08ch]
        mov     edi,dword [esp+0ch+08ch]
        mov     eax,dword [esp+08h+08ch]
        mov     dword [esp-07ch+08ch],eax
        mov     ebx,dword [esp+04h+08ch]
; Line 3730:     unsigned __r = __sort3<_Compare>(__x1, __x2, __x3, __c); 
        push    ecx
        mov     eax,edi
        push    eax
        mov     eax,dword [esp-07ch+094h]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#__sort3$r#__less$usus~pus~$qpuspuspusr#__less$usus~
        add     esp,byte 010h
        mov     ebp,eax
        mov     ecx,esi
        mov     edx,esi
        mov     eax,edi
        mov     esi,edi
        movzx   edx,word [edx]
        movzx   eax,word [eax]
        cmp     edx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_19239
; Line 3732:     { 
; Line 3733:         swap(*__x3, *__x4); 
        mov     edx,esi
        mov     eax,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [ecx]
        mov     word [esp-066h+08ch],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [eax]
        mov     word [edx],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-066h+08ch]
        mov     word [eax],cx
; Line 3718: } 
L_19291:
        inc     ebp
        mov     eax,edi
        mov     ecx,dword [esp-07ch+08ch]
        mov     edx,ecx
        movzx   esi,word [eax]
        movzx   edx,word [edx]
        cmp     esi,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_19243
; Line 3736:         { 
; Line 3737:             swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [ecx]
        mov     word [esp-066h+08ch],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [eax]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-066h+08ch]
        mov     word [eax],cx
; Line 3718: } 
L_19371:
        inc     ebp
        mov     eax,dword [esp-07ch+08ch]
        mov     ecx,ebx
        movzx   ebx,word [eax]
        movzx   edx,word [ecx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_19247
; Line 3740:             { 
; Line 3741:                 swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [ecx]
        mov     word [esp-066h+08ch],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [eax]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-066h+08ch]
        mov     word [eax],cx
; Line 3718: } 
L_19451:
        inc     ebp
; Line 3743:             } 
L_19247:
; Line 3744:         } 
L_19243:
; Line 3745:     } 
L_19239:
        mov     eax,ebp
; Line 3747: } 
L_19237:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 07ch
        ret
section code
section code
        section vsc@std@__1@#__sort5$r#__less$usus~pus~$qpuspuspuspuspusr#__less$usus~ virtual
        [bits 32]
@std@__1@#__sort5$r#__less$usus~pus~$qpuspuspuspuspusr#__less$usus~:
; Line 3752: _LIBCPP_HIDDEN 
        add     esp,0ffffff54h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_19505:
        mov     ecx,dword [esp+018h+0bch]
        mov     ebx,dword [esp+014h+0bch]
        mov     eax,dword [esp+010h+0bch]
        mov     dword [esp-0a8h+0bch],eax
        mov     eax,dword [esp+0ch+0bch]
        mov     dword [esp-0a4h+0bch],eax
        mov     edi,dword [esp+08h+0bch]
        mov     esi,dword [esp+04h+0bch]
; Line 3757:     unsigned __r = __sort4<_Compare>(__x1, __x2, __x3, __x4, __c); 
        push    ecx
        mov     eax,dword [esp-0a8h+0c0h]
        push    eax
        mov     eax,dword [esp-0a4h+0c4h]
        push    eax
        mov     eax,edi
        push    eax
        mov     eax,esi
        push    eax
        call    @std@__1@#__sort4$r#__less$usus~pus~$qpuspuspuspusr#__less$usus~
        add     esp,byte 014h
        mov     ebp,eax
        mov     edx,ebx
        mov     ecx,ebx
        mov     eax,dword [esp-0a8h+0bch]
        mov     ebx,eax
        movzx   ecx,word [ecx]
        movzx   eax,word [eax]
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_19508
; Line 3759:     { 
; Line 3760:         swap(*__x4, *__x5); 
        mov     ecx,ebx
        mov     eax,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [edx]
        mov     word [esp-08eh+0bch],dx
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [edx]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-08eh+0bch]
        mov     word [eax],cx
; Line 3718: } 
L_19567:
        inc     ebp
        mov     ebx,dword [esp-0a8h+0bch]
        mov     ecx,ebx
        mov     eax,dword [esp-0a4h+0bch]
        mov     edx,eax
        movzx   ebx,word [ebx]
        movzx   eax,word [eax]
        cmp     ebx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_19512
; Line 3763:         { 
; Line 3764:             swap(*__x3, *__x4); 
        mov     eax,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [ecx]
        mov     word [esp-08eh+0bch],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [eax]
        mov     word [edx],cx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-08eh+0bch]
        mov     word [eax],cx
; Line 3718: } 
L_19647:
        inc     ebp
        mov     eax,dword [esp-0a4h+0bch]
        mov     ecx,edi
        mov     edx,edi
        mov     dword [esp-0ach+0bch],edx
        movzx   ebx,word [eax]
        mov     edx,dword [esp-0ach+0bch]
        movzx   edx,word [edx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_19516
; Line 3767:             { 
; Line 3768:                 swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [ecx]
        mov     word [esp-08eh+0bch],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [eax]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-08eh+0bch]
        mov     word [eax],cx
; Line 3718: } 
L_19727:
        inc     ebp
        mov     eax,edi
        mov     ecx,esi
        movzx   ebx,word [eax]
        movzx   edx,word [ecx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_19520
; Line 3771:                 { 
; Line 3772:                     swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [ecx]
        mov     word [esp-08eh+0bch],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [eax]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-08eh+0bch]
        mov     word [eax],cx
; Line 3718: } 
L_19807:
        inc     ebp
; Line 3774:                 } 
L_19520:
; Line 3775:             } 
L_19516:
; Line 3776:         } 
L_19512:
; Line 3777:     } 
L_19508:
        mov     eax,ebp
; Line 3779: } 
L_19506:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0ach
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_3$r#__less$usus~pus~$qpuspusr#__less$usus~ virtual
        [bits 32]
@std@__1@#__insertion_sort_3$r#__less$usus~pus~$qpuspusr#__less$usus~:
; Line 3817: void 
        add     esp,byte 0ffffffd0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_19861:
        mov     edx,dword [esp+0ch+040h]
        mov     esi,dword [esp+08h+040h]
        mov     edi,dword [esp+04h+040h]
; Line 3820:     typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type; 
        mov     ecx,edi
        mov     eax,edi
        add     eax,byte 04h
        mov     ebx,eax
        push    edx
        mov     eax,ebx
        push    eax
        mov     eax,edi
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$usus~pus~$qpuspuspusr#__less$usus~
        add     esp,byte 010h
; Line 3823:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     ecx,ebx
        add     ecx,byte 02h
        cmp     ecx,esi
        je      L_19866
L_19864:
; Line 3824:     { 
; Line 3825:         if (__comp(*__i, *__j)) 
        mov     edx,ecx
        mov     eax,ebx
        movzx   ecx,word [ecx]
        movzx   ebx,word [ebx]
        cmp     ecx,ebx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_19871
; Line 3826:         { 
; Line 3827:             value_type __t(_VSTD::move(*__i)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [ecx]
        mov     word [esp-02h+040h],cx
        mov     ebx,eax
        mov     eax,edx
; Line 3831:             { 
L_19875:
; Line 3832:                 *__j = _VSTD::move(*__k); 
        mov     ecx,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [ecx]
        mov     word [eax],cx
        mov     eax,ebx
; Line 3834:             } while (__j != __first && __comp(__t, *--__k)); 
L_19877:
        cmp     eax,edi
        je      L_19940
        sub     ebx,byte 02h
        mov     ecx,ebx
        movzx   ebp,word [esp-02h+040h]
        movzx   ecx,word [ecx]
        cmp     ebp,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_19875
L_19940:
L_19876:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-02h+040h]
        mov     word [eax],cx
; Line 3836:         } 
L_19871:
        mov     ebx,edx
; Line 3838:     } 
L_19867:
        mov     eax,edx
        add     eax,byte 02h
        mov     ecx,eax
L_19865:
        cmp     ecx,esi
        jne     L_19864
L_19866:
; Line 3839: } 
L_19862:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 030h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_incomplete$r#__less$usus~pus~$qpuspusr#__less$usus~ virtual
        [bits 32]
@std@__1@#__insertion_sort_incomplete$r#__less$usus~pus~$qpuspusr#__less$usus~:
; Line 3842: bool 
        add     esp,byte 0ffffffa0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_19976:
        mov     edx,dword [esp+0ch+070h]
        mov     eax,dword [esp+08h+070h]
        mov     dword [esp-05ch+070h],eax
        mov     ebx,dword [esp+04h+070h]
; Line 3845:     switch (__last - __first) 
        mov     eax,dword [esp-05ch+070h]
        mov     ecx,ebx
        mov     esi,eax
        sub     esi,ecx
        sar     esi,01h
        mov     dword [esp-060h+070h],eax
        cmp     esi,byte 06h
        jnc     L_20000
        push    esi
        mov     esi,dword [esi*4+L_65519]
        xchg    esi,dword [esp]
        ret
        times $$-$ & 3 nop
L_65519:
        dd      L_19982
        dd      L_19984
        dd      L_19986
        dd      L_19993
        dd      L_19995
        dd      L_19997
; Line 3846:     { 
; Line 3847:     case 0: 
L_19982:
L_19984:
        mov     al,01h
        jmp     L_19977
L_19986:
        mov     eax,dword [esp-060h+070h]
        sub     eax,byte 02h
        movzx   ebx,word [eax]
        movzx   edx,word [ecx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_19988
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [ecx]
        mov     word [esp-01ah+070h],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [eax]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-01ah+070h]
        mov     word [eax],cx
; Line 3718: } 
L_20064:
L_19988:
        mov     al,01h
        jmp     L_19977
L_19993:
        push    edx
        mov     eax,dword [esp-060h+074h]
        sub     eax,byte 02h
        push    eax
        mov     eax,ebx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$usus~pus~$qpuspuspusr#__less$usus~
        add     esp,byte 010h
        mov     al,01h
        jmp     L_19977
L_19995:
        push    edx
        mov     eax,dword [esp-060h+074h]
        sub     eax,byte 02h
        push    eax
        mov     eax,ebx
        mov     edx,ecx
        add     edx,byte 04h
        push    edx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$usus~pus~$qpuspuspuspusr#__less$usus~
        add     esp,byte 014h
        mov     al,01h
        jmp     L_19977
L_19997:
        push    edx
        mov     eax,dword [esp-060h+074h]
        sub     eax,byte 02h
        push    eax
        mov     eax,ebx
        mov     edx,ecx
        add     edx,byte 06h
        push    edx
        mov     edx,ecx
        add     edx,byte 04h
        push    edx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$usus~pus~$qpuspuspuspuspusr#__less$usus~
        add     esp,byte 018h
        mov     al,01h
        jmp     L_19977
; Line 3863:     } 
L_20000:
L_19979:
        mov     eax,ecx
        add     eax,byte 04h
        mov     esi,eax
        push    edx
        mov     eax,esi
        push    eax
        mov     eax,ebx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$usus~pus~$qpuspuspusr#__less$usus~
        add     esp,byte 010h
        xor     edi,edi
; Line 3869:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     eax,esi
        add     eax,byte 02h
        cmp     eax,dword [esp-05ch+070h]
        je      L_20004
L_20002:
; Line 3870:     { 
; Line 3871:         if (__comp(*__i, *__j)) 
        mov     edx,eax
        mov     ecx,esi
        movzx   eax,word [eax]
        movzx   esi,word [esi]
        cmp     eax,esi
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_20009
; Line 3872:         { 
; Line 3873:             value_type __t(_VSTD::move(*__i)); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ax,word [eax]
        mov     word [esp-02h+070h],ax
        mov     esi,ecx
        mov     eax,edx
; Line 3877:             { 
L_20013:
; Line 3878:                 *__j = _VSTD::move(*__k); 
        mov     ecx,esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [ecx]
        mov     word [eax],cx
        mov     eax,esi
; Line 3880:             } while (__j != __first && __comp(__t, *--__k)); 
L_20015:
        cmp     eax,ebx
        je      L_20163
        sub     esi,byte 02h
        mov     ecx,esi
        movzx   ebp,word [esp-02h+070h]
        movzx   ecx,word [ecx]
        cmp     ebp,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_20013
L_20163:
L_20014:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-02h+070h]
        mov     word [eax],cx
        inc     edi
        cmp     edi,byte 08h
        jne     L_20022
        mov     ecx,edx
        add     ecx,byte 02h
        mov     eax,dword [esp-060h+070h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
        jmp     L_19977
L_20022:
; Line 3884:         } 
L_20009:
        mov     esi,edx
; Line 3886:     } 
L_20005:
        mov     eax,edx
        add     eax,byte 02h
L_20003:
        cmp     eax,dword [esp-05ch+070h]
        jne     L_20002
L_20004:
        mov     al,01h
; Line 3888: } 
L_19977:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 060h
        ret
section code
section code
        section vsc@std@__1@#__sort$r#__less$usus~pus~$qpuspusr#__less$usus~ virtual
        [bits 32]
@std@__1@#__sort$r#__less$usus~pus~$qpuspusr#__less$usus~:
; Line 3926: void 
        add     esp,0fffffe44h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_20199:
        mov     eax,dword [esp+0ch+01cch]
        mov     dword [esp-016ch+01cch],eax
        mov     eax,dword [esp+08h+01cch]
        mov     dword [esp-0168h+01cch],eax
        mov     eax,dword [esp+04h+01cch]
        mov     dword [esp-0160h+01cch],eax
; Line 3930:     typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type; 
L_20202:
; Line 3935:     { 
; Line 3936:     __restart: 
L_20208:
        mov     eax,dword [esp-0168h+01cch]
        mov     edx,dword [esp-0160h+01cch]
        mov     ecx,eax
        sub     ecx,edx
        sar     ecx,01h
        mov     ebx,ecx
        and     ebx,ebx
        jl      L_20230
        cmp     ebx,byte 06h
        jge     L_20230
        push    ebx
        mov     ebx,dword [ebx*4+L_65524]
        xchg    ebx,dword [esp]
        ret
        times $$-$ & 3 nop
L_65524:
        dd      L_20212
        dd      L_20214
        dd      L_20216
        dd      L_20223
        dd      L_20225
        dd      L_20227
; Line 3939:         { 
; Line 3940:         case 0: 
L_20212:
L_20214:
        jmp     L_20200
L_20216:
        sub     eax,byte 02h
        mov     dword [esp-01a8h+01cch],eax
        mov     dword [esp-01b8h+01cch],edx
        mov     ecx,dword [esp-01a8h+01cch]
        movzx   ebx,word [ecx]
        mov     ecx,dword [esp-01b8h+01cch]
        movzx   ecx,word [ecx]
        cmp     ebx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_20200
        mov     dword [esp-01a4h+01cch],edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,dword [esp-01a4h+01cch]
        mov     dword [esp-0180h+01cch],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0180h+01cch]
        mov     cx,word [ecx]
        mov     word [esp-013eh+01cch],cx
        mov     dword [esp-017ch+01cch],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-017ch+01cch]
        mov     dx,word [ecx]
        mov     ecx,dword [esp-01a4h+01cch]
        mov     word [ecx],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-013eh+01cch]
        mov     word [eax],cx
; Line 3718: } 
L_20468:
L_20218:
        jmp     L_20200
L_20223:
        mov     ecx,dword [esp-016ch+01cch]
        push    ecx
        sub     eax,byte 02h
        push    eax
        mov     eax,dword [esp-0160h+01d4h]
        mov     ecx,edx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$usus~pus~$qpuspuspusr#__less$usus~
        add     esp,byte 010h
        jmp     L_20200
L_20225:
        mov     ecx,dword [esp-016ch+01cch]
        push    ecx
        sub     eax,byte 02h
        push    eax
        mov     eax,dword [esp-0160h+01d4h]
        mov     ecx,edx
        add     ecx,byte 04h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$usus~pus~$qpuspuspuspusr#__less$usus~
        add     esp,byte 014h
        jmp     L_20200
L_20227:
        mov     ecx,dword [esp-016ch+01cch]
        push    ecx
        sub     eax,byte 02h
        push    eax
        mov     eax,dword [esp-0160h+01d4h]
        mov     ecx,edx
        add     ecx,byte 06h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 04h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 02h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$usus~pus~$qpuspuspuspuspusr#__less$usus~
        add     esp,byte 018h
        jmp     L_20200
; Line 3956:         } 
L_20230:
L_20209:
        cmp     ecx,byte 06h
        jg      L_20232
; Line 3958:         { 
; Line 3959:             _VSTD::__insertion_sort_3<_Compare>(__first, __last, __comp); 
        mov     eax,dword [esp-016ch+01cch]
        push    eax
        mov     eax,dword [esp-0168h+01d0h]
        push    eax
        mov     eax,dword [esp-0160h+01d4h]
        push    eax
        call    @std@__1@#__insertion_sort_3$r#__less$usus~pus~$qpuspusr#__less$usus~
        add     esp,byte 0ch
        jmp     L_20200
; Line 3961:         } 
L_20232:
        mov     esi,edx
        mov     dword [esp-0190h+01cch],eax
        sub     eax,byte 02h
        mov     ebx,eax
; Line 3967:         { 
; Line 3968:         difference_type __delta; 
        cmp     ecx,03e8h
        jl      L_20240
; Line 3970:         { 
; Line 3971:             __delta = __len/2; 
        mov     eax,ecx
        shr     eax,01fh
        add     eax,ecx
        sar     eax,01h
        mov     dword [esp-01ach+01cch],esi
        mov     esi,eax
        shl     esi,01h
        mov     ecx,dword [esp-01ach+01cch]
        add     ecx,esi
        mov     dword [esp-0158h+01cch],ecx
        mov     ecx,eax
        shr     ecx,01fh
        add     eax,ecx
        sar     eax,01h
        mov     ecx,dword [esp-016ch+01cch]
        push    ecx
        mov     ecx,ebx
        push    ecx
        mov     esi,dword [esp-0158h+01d4h]
        mov     ecx,eax
        shl     ecx,01h
        mov     eax,esi
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0158h+01d8h]
        push    eax
        mov     eax,edx
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0160h+01e0h]
        push    eax
        call    @std@__1@#__sort5$r#__less$usus~pus~$qpuspuspuspuspusr#__less$usus~
        add     esp,byte 018h
        mov     dword [esp-0154h+01cch],eax
; Line 3975:         } 
        jmp     L_20245
L_20240:
; Line 3976:         else 
; Line 3977:         { 
; Line 3978:             __delta = __len/2; 
        mov     dword [esp-01b0h+01cch],ecx
        shr     ecx,01fh
        mov     eax,dword [esp-01b0h+01cch]
        add     eax,ecx
        sar     eax,01h
        mov     dword [esp-0194h+01cch],esi
        mov     ecx,eax
        shl     ecx,01h
        mov     eax,dword [esp-0194h+01cch]
        add     eax,ecx
        mov     dword [esp-0158h+01cch],eax
        mov     eax,dword [esp-016ch+01cch]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0158h+01d4h]
        push    eax
        mov     eax,dword [esp-0160h+01d8h]
        push    eax
        call    @std@__1@#__sort3$r#__less$usus~pus~$qpuspuspusr#__less$usus~
        add     esp,byte 010h
        mov     dword [esp-0154h+01cch],eax
; Line 3981:         } 
L_20245:
; Line 3982:         } 
        mov     esi,dword [esp-0160h+01cch]
        mov     edx,esi
        mov     dword [esp-01b4h+01cch],ebx
        mov     ebx,esi
        mov     dword [esp-015ch+01cch],ebx
        mov     eax,dword [esp-0158h+01cch]
        mov     ecx,eax
        movzx   ebx,word [ebx]
        movzx   eax,word [eax]
        cmp     ebx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_20253
; Line 3992:         { 
; Line 3995:             while (true) 
        mov     eax,dword [esp-01b4h+01cch]
L_20257:
; Line 3996:             { 
; Line 3997:                 if (__i == --__j) 
        sub     eax,byte 02h
        mov     dword [esp-01b4h+01cch],eax
        cmp     esi,eax
        jne     L_20263
; Line 3998:                 { 
; Line 4001:                     ++__i;   
        mov     eax,dword [esp-015ch+01cch]
        add     eax,byte 02h
        mov     esi,eax
        mov     eax,dword [esp-0168h+01cch]
        mov     edi,edx
        sub     eax,byte 02h
        mov     ecx,eax
        mov     ebx,eax
        movzx   edi,word [edi]
        movzx   eax,word [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_20267
; Line 4004:                     { 
; Line 4005:                         while (true) 
L_20271:
; Line 4006:                         { 
; Line 4007:                             if (__i == __j) 
        cmp     esi,ecx
        je      L_20200
L_20277:
        mov     edi,edx
        mov     eax,esi
        movzx   edi,word [edi]
        movzx   eax,word [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_20282
; Line 4010:                             { 
; Line 4011:                                 swap(*__i, *__j); 
        mov     edx,esi
        mov     eax,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edi,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     di,word [edi]
        mov     word [esp-013eh+01cch],di
        mov     edi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     di,word [edi]
        mov     word [edx],di
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [esp-013eh+01cch]
        mov     word [eax],dx
; Line 3718: } 
L_20580:
        inc     dword [esp-0154h+01cch]
        add     esi,byte 02h
; Line 4014:                                 break; 
        jmp     L_20272
L_20282:
        add     esi,byte 02h
; Line 4017:                         } 
L_20273:
        jmp     L_20271
L_20272:
; Line 4018:                     } 
L_20267:
        mov     dword [esp-018ch+01cch],ecx
        cmp     esi,dword [esp-018ch+01cch]
        je      L_20200
L_20295:
L_20300:
; Line 4023:                     { 
; Line 4024:                         while (!__comp(*__first, *__i)) 
        mov     edi,dword [esp-0160h+01cch]
        mov     ecx,edi
        mov     eax,esi
        mov     edx,esi
        movzx   edi,word [edi]
        movzx   eax,word [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_20307
L_20306:
        mov     eax,edx
        add     eax,byte 02h
        mov     esi,eax
L_20308:
        mov     edi,ecx
        mov     eax,esi
        mov     edx,esi
        movzx   edi,word [edi]
        movzx   eax,word [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_20306
L_20307:
        mov     ebp,ecx
        mov     eax,ebx
        sub     eax,byte 02h
        mov     edi,eax
        mov     ebx,eax
        movzx   ebp,word [ebp]
        movzx   eax,word [eax]
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_20314
L_20313:
L_20315:
; Line 4026:                         while (__comp(*__first, *--__j)) 
        mov     ebp,ecx
        mov     eax,ebx
        sub     eax,byte 02h
        mov     edi,eax
        mov     ebx,eax
        movzx   ebp,word [ebp]
        movzx   eax,word [eax]
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_20313
L_20314:
        cmp     esi,edi
        jge     L_20301
; Line 4029:                             break; 
L_20320:
        mov     ecx,edx
        mov     eax,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     esi,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     si,word [esi]
        mov     word [esp-013eh+01cch],si
        mov     esi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     si,word [esi]
        mov     word [ecx],si
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-013eh+01cch]
        mov     word [eax],cx
; Line 3718: } 
L_20708:
        inc     dword [esp-0154h+01cch]
        mov     eax,edx
        add     eax,byte 02h
        mov     esi,eax
; Line 4033:                     } 
L_20302:
; Line 4022:                     while (true) 
        jmp     L_20300
L_20301:
        mov     eax,edx
        mov     dword [esp-0160h+01cch],eax
        jmp     L_20208
L_20263:
        mov     eax,dword [esp-01b4h+01cch]
        mov     ebx,eax
        mov     dword [esp-01a0h+01cch],ecx
        movzx   edi,word [ebx]
        mov     ebx,dword [esp-01a0h+01cch]
        mov     dword [esp-0178h+01cch],ebx
        movzx   ebx,word [ebx]
        cmp     edi,ebx
        setl    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_20331
; Line 4041:                 { 
; Line 4042:                     swap(*__i, *__j); 
        mov     edx,dword [esp-015ch+01cch]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bx,word [ebx]
        mov     word [esp-013eh+01cch],bx
        mov     ebx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     bx,word [ebx]
        mov     word [edx],bx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [esp-013eh+01cch]
        mov     dword [esp-01bch+01cch],eax
        mov     word [eax],dx
; Line 3718: } 
L_20788:
        inc     dword [esp-0154h+01cch]
; Line 4044:                     break;   
        jmp     L_20258
L_20331:
; Line 4046:             } 
L_20259:
        jmp     L_20257
L_20258:
; Line 4047:         } 
L_20253:
        mov     eax,dword [esp-015ch+01cch]
        add     eax,byte 02h
        mov     ebx,eax
        cmp     ebx,dword [esp-01b4h+01cch]
        jge     L_20344
; Line 4053:         { 
; Line 4056:             while (true) 
L_20348:
; Line 4057:             { 
; Line 4059:                 while (__comp(*__i, *__m)) 
        mov     esi,ebx
        mov     edx,ebx
        mov     eax,ecx
        movzx   esi,word [esi]
        movzx   eax,word [eax]
        cmp     esi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_20355
L_20354:
        mov     eax,edx
        add     eax,byte 02h
        mov     ebx,eax
L_20356:
        mov     esi,ebx
        mov     edx,ebx
        mov     eax,ecx
        movzx   esi,word [esi]
        movzx   eax,word [eax]
        cmp     esi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_20354
L_20355:
        sub     dword [esp-01b4h+01cch],byte 02h
        mov     edi,dword [esp-01b4h+01cch]
        mov     esi,edi
        mov     eax,ecx
        mov     dword [esp-019ch+01cch],eax
        movzx   edi,word [edi]
        mov     eax,dword [esp-019ch+01cch]
        mov     dword [esp-0174h+01cch],eax
        movzx   eax,word [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_20362
L_20361:
L_20363:
; Line 4062:                 while (!__comp(*--__j, *__m)) 
        mov     eax,esi
        sub     eax,byte 02h
        mov     dword [esp-01b4h+01cch],eax
        mov     edi,eax
        mov     esi,eax
        mov     eax,ecx
        mov     dword [esp-0198h+01cch],eax
        movzx   edi,word [edi]
        mov     eax,dword [esp-0198h+01cch]
        mov     dword [esp-0170h+01cch],eax
        movzx   eax,word [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_20361
L_20362:
        cmp     ebx,dword [esp-01b4h+01cch]
        jg      L_20349
; Line 4065:                     break; 
L_20368:
        mov     ecx,edx
        mov     eax,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edi,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     di,word [edi]
        mov     word [esp-013eh+01cch],di
        mov     edi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     di,word [edi]
        mov     word [ecx],di
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     cx,word [esp-013eh+01cch]
        mov     word [eax],cx
; Line 3718: } 
L_20916:
        inc     dword [esp-0154h+01cch]
        mov     eax,ebx
        cmp     dword [esp-0158h+01cch],eax
        jne     L_20373
        mov     eax,esi
        mov     dword [esp-0158h+01cch],eax
L_20373:
        mov     eax,edx
        add     eax,byte 02h
        mov     ebx,eax
; Line 4073:             } 
L_20350:
        mov     ecx,dword [esp-0158h+01cch]
        jmp     L_20348
L_20349:
; Line 4074:         } 
L_20344:
        cmp     ebx,dword [esp-0158h+01cch]
        je      L_20384
        mov     esi,ecx
        mov     eax,ebx
        mov     edx,ebx
        movzx   esi,word [esi]
        movzx   edx,word [edx]
        cmp     esi,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_20384
; Line 4077:         { 
; Line 4078:             swap(*__i, *__m); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [edx]
        mov     word [esp-013eh+01cch],dx
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [edx]
        mov     dword [esp-0184h+01cch],eax
        mov     word [eax],dx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     dx,word [esp-013eh+01cch]
        mov     dword [esp-0188h+01cch],ecx
        mov     eax,ecx
        mov     word [eax],dx
; Line 3718: } 
L_20996:
        inc     dword [esp-0154h+01cch]
; Line 4080:         } 
L_20384:
        cmp     dword [esp-0154h+01cch],byte 00h
        jne     L_20391
; Line 4084:         { 
; Line 4085:             bool __fs = _VSTD::__insertion_sort_incomplete<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-016ch+01cch]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0160h+01d4h]
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$usus~pus~$qpuspusr#__less$usus~
        add     esp,byte 0ch
        mov     byte [esp-0161h+01cch],al
        mov     eax,dword [esp-016ch+01cch]
        push    eax
        mov     eax,dword [esp-0168h+01d0h]
        push    eax
        mov     eax,ebx
        add     eax,byte 02h
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$usus~pus~$qpuspusr#__less$usus~
        add     esp,byte 0ch
        and     al,al
        je      L_20395
; Line 4087:             { 
; Line 4088:                 if (__fs) 
        cmp     byte [esp-0161h+01cch],byte 00h
        jne     L_20200
L_20399:
        mov     eax,ebx
        mov     dword [esp-0168h+01cch],eax
; Line 4091:                 continue; 
        jmp     L_20202
L_20395:
; Line 4093:             else 
; Line 4094:             { 
; Line 4095:                 if (__fs) 
        cmp     byte [esp-0161h+01cch],byte 00h
        je      L_20409
; Line 4096:                 { 
; Line 4097:                     __first = ++__i; 
        mov     eax,ebx
        add     eax,byte 02h
        mov     dword [esp-0160h+01cch],eax
; Line 4098:                     continue; 
        jmp     L_20202
L_20409:
; Line 4100:             } 
L_20405:
; Line 4101:         } 
L_20391:
        mov     eax,dword [esp-0168h+01cch]
        mov     ecx,ebx
        sub     eax,ecx
        mov     edx,eax
        sar     edx,01h
        mov     eax,dword [esp-0160h+01cch]
        sub     eax,ecx
        neg     eax
        imul    eax,byte 01h
        sar     eax,01h
        cmp     eax,edx
        jge     L_20422
; Line 4104:         { 
; Line 4105:             _VSTD::__sort<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-016ch+01cch]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0160h+01d4h]
        push    eax
        call    @std@__1@#__sort$r#__less$usus~pus~$qpuspusr#__less$usus~
        add     esp,byte 0ch
        mov     eax,ebx
        add     eax,byte 02h
        mov     dword [esp-0160h+01cch],eax
; Line 4108:         } 
        jmp     L_20427
L_20422:
; Line 4109:         else 
; Line 4110:         { 
; Line 4111:             _VSTD::__sort<_Compare>(__i+1, __last, __comp); 
        mov     eax,dword [esp-016ch+01cch]
        push    eax
        mov     eax,dword [esp-0168h+01d0h]
        push    eax
        mov     eax,ecx
        add     eax,byte 02h
        push    eax
        call    @std@__1@#__sort$r#__less$usus~pus~$qpuspusr#__less$usus~
        add     esp,byte 0ch
        mov     eax,ebx
        mov     dword [esp-0168h+01cch],eax
; Line 4114:         } 
L_20427:
; Line 4115:     } 
L_20204:
; Line 3934:     while (true) 
        jmp     L_20202
; Line 4116: } 
L_20203:
L_20200:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,01bch
        ret
section code
section code
        section vsc@std@__1@#__sort3$r#__less$ii~pi~$qpipipir#__less$ii~ virtual
        [bits 32]
@std@__1@#__sort3$r#__less$ii~pi~$qpipipir#__less$ii~:
; Line 3689: unsigned 
        add     esp,0fffffed0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_21050:
        mov     edx,dword [esp+0ch+0140h]
        mov     esi,dword [esp+08h+0140h]
        mov     edi,dword [esp+04h+0140h]
; Line 3692:     unsigned __r = 0; 
        xor     ebp,ebp
        mov     ecx,esi
        mov     eax,edi
        mov     ebx,dword [ecx]
        mov     dword [esp-0128h+0140h],ebx
        mov     ebx,dword [edi]
        cmp     dword [esp-0128h+0140h],ebx
        setl    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        jne     L_21053
; Line 3694:     { 
; Line 3695:         if (!__c(*__z, *__y))       
        mov     dword [esp-0f4h+0140h],ecx
        mov     edi,dword [edx]
        mov     ebx,dword [esp-0f4h+0140h]
        mov     ebx,dword [ebx]
        cmp     edi,ebx
        setl    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        jne     L_21057
        mov     eax,ebp
        jmp     L_21051
L_21057:
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ebx,dword [ecx]
        mov     dword [esp-0d8h+0140h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ebx,dword [edx]
        mov     dword [ecx],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0d8h+0140h]
        mov     dword [edx],ecx
; Line 3718: } 
L_21133:
        mov     edx,01h
        mov     ebx,dword [esi]
        mov     ecx,dword [eax]
        cmp     ebx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_21062
; Line 3701:         { 
; Line 3702:             swap(*__x, *__y);       
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     dword [esp-0d8h+0140h],ecx
        mov     dword [esp-0130h+0140h],esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0130h+0140h]
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0d8h+0140h]
        mov     dword [esi],eax
; Line 3718: } 
L_21213:
        mov     edx,02h
; Line 3704:         } 
L_21062:
        mov     eax,edx
        jmp     L_21051
; Line 3706:     } 
L_21053:
        mov     ebx,dword [edx]
        cmp     ebx,dword [ecx]
        setl    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_21072
; Line 3708:     { 
; Line 3709:         swap(*__x, *__z);           
        mov     dword [esp-012ch+0140h],eax
        mov     dword [esp-0120h+0140h],edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-012ch+0140h]
        mov     dword [esp-0124h+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0124h+0140h]
        mov     eax,dword [eax]
        mov     dword [esp-0d8h+0140h],eax
        mov     eax,dword [esp-0120h+0140h]
        mov     dword [esp-0118h+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0118h+0140h]
        mov     ecx,dword [eax]
        mov     eax,dword [esp-012ch+0140h]
        mov     dword [eax],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0d8h+0140h]
        mov     eax,dword [esp-0120h+0140h]
        mov     dword [eax],ecx
; Line 3718: } 
L_21293:
        mov     eax,01h
        jmp     L_21051
; Line 3712:     } 
L_21072:
        mov     dword [esp-011ch+0140h],eax
        mov     dword [esp-0104h+0140h],ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-011ch+0140h]
        mov     dword [esp-0114h+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0114h+0140h]
        mov     eax,dword [eax]
        mov     dword [esp-0d8h+0140h],eax
        mov     eax,dword [esp-0104h+0140h]
        mov     dword [esp-0f8h+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0f8h+0140h]
        mov     ecx,dword [eax]
        mov     eax,dword [esp-011ch+0140h]
        mov     dword [eax],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0d8h+0140h]
        mov     eax,dword [esp-0104h+0140h]
        mov     dword [eax],ecx
; Line 3718: } 
L_21357:
        mov     ecx,01h
        mov     dword [esp-010ch+0140h],edx
        mov     dword [esp-0110h+0140h],esi
        mov     eax,esi
        mov     dword [esp-0108h+0140h],eax
        mov     eax,dword [esp-010ch+0140h]
        mov     ebx,dword [eax]
        mov     eax,dword [esp-0108h+0140h]
        mov     eax,dword [eax]
        cmp     ebx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_21079
; Line 3716:     { 
; Line 3717:         swap(*__y, *__z);           
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-0110h+0140h]
        mov     dword [esp-0fch+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0fch+0140h]
        mov     eax,dword [eax]
        mov     dword [esp-0d8h+0140h],eax
        mov     dword [esp-0100h+0140h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0100h+0140h]
        mov     ecx,dword [eax]
        mov     eax,dword [esp-0110h+0140h]
        mov     dword [eax],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0d8h+0140h]
        mov     dword [edx],eax
; Line 3718: } 
L_21437:
        mov     ecx,02h
; Line 3719:     } 
L_21079:
        mov     eax,ecx
; Line 3721: }                                   
L_21051:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0130h
        ret
section code
section code
        section vsc@std@__1@#__sort4$r#__less$ii~pi~$qpipipipir#__less$ii~ virtual
        [bits 32]
@std@__1@#__sort4$r#__less$ii~pi~$qpipipipir#__less$ii~:
; Line 3726: unsigned 
        add     esp,0ffffff6ch
        push    ebx
        push    ebp
        push    esi
        push    edi
L_21491:
        mov     ecx,dword [esp+014h+0a4h]
        mov     esi,dword [esp+010h+0a4h]
        mov     edi,dword [esp+0ch+0a4h]
        mov     eax,dword [esp+08h+0a4h]
        mov     dword [esp-094h+0a4h],eax
        mov     ebx,dword [esp+04h+0a4h]
; Line 3730:     unsigned __r = __sort3<_Compare>(__x1, __x2, __x3, __c); 
        push    ecx
        mov     eax,edi
        push    eax
        mov     eax,dword [esp-094h+0ach]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#__sort3$r#__less$ii~pi~$qpipipir#__less$ii~
        add     esp,byte 010h
        mov     ebp,eax
        mov     ecx,esi
        mov     edx,esi
        mov     eax,edi
        mov     esi,edi
        mov     edx,dword [edx]
        mov     eax,dword [eax]
        cmp     edx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_21494
; Line 3732:     { 
; Line 3733:         swap(*__x3, *__x4); 
        mov     edx,esi
        mov     eax,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [esp-078h+0a4h],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     dword [edx],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-078h+0a4h]
        mov     dword [eax],ecx
; Line 3718: } 
L_21546:
        inc     ebp
        mov     eax,edi
        mov     ecx,dword [esp-094h+0a4h]
        mov     edx,ecx
        mov     esi,dword [eax]
        mov     edx,dword [edx]
        cmp     esi,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_21498
; Line 3736:         { 
; Line 3737:             swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-078h+0a4h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-078h+0a4h]
        mov     dword [eax],ecx
; Line 3718: } 
L_21626:
        inc     ebp
        mov     eax,dword [esp-094h+0a4h]
        mov     ecx,ebx
        mov     ebx,dword [eax]
        mov     edx,dword [ecx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_21502
; Line 3740:             { 
; Line 3741:                 swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-078h+0a4h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-078h+0a4h]
        mov     dword [eax],ecx
; Line 3718: } 
L_21706:
        inc     ebp
; Line 3743:             } 
L_21502:
; Line 3744:         } 
L_21498:
; Line 3745:     } 
L_21494:
        mov     eax,ebp
; Line 3747: } 
L_21492:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,094h
        ret
section code
section code
        section vsc@std@__1@#__sort5$r#__less$ii~pi~$qpipipipipir#__less$ii~ virtual
        [bits 32]
@std@__1@#__sort5$r#__less$ii~pi~$qpipipipipir#__less$ii~:
; Line 3752: _LIBCPP_HIDDEN 
        add     esp,0ffffff34h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_21760:
        mov     ecx,dword [esp+018h+0dch]
        mov     ebx,dword [esp+014h+0dch]
        mov     eax,dword [esp+010h+0dch]
        mov     dword [esp-0c8h+0dch],eax
        mov     eax,dword [esp+0ch+0dch]
        mov     dword [esp-0c4h+0dch],eax
        mov     edi,dword [esp+08h+0dch]
        mov     esi,dword [esp+04h+0dch]
; Line 3757:     unsigned __r = __sort4<_Compare>(__x1, __x2, __x3, __x4, __c); 
        push    ecx
        mov     eax,dword [esp-0c8h+0e0h]
        push    eax
        mov     eax,dword [esp-0c4h+0e4h]
        push    eax
        mov     eax,edi
        push    eax
        mov     eax,esi
        push    eax
        call    @std@__1@#__sort4$r#__less$ii~pi~$qpipipipir#__less$ii~
        add     esp,byte 014h
        mov     ebp,eax
        mov     edx,ebx
        mov     ecx,ebx
        mov     eax,dword [esp-0c8h+0dch]
        mov     ebx,eax
        mov     ecx,dword [ecx]
        mov     eax,dword [eax]
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_21763
; Line 3759:     { 
; Line 3760:         swap(*__x4, *__x5); 
        mov     ecx,ebx
        mov     eax,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [esp-0a8h+0dch],edx
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0a8h+0dch]
        mov     dword [eax],ecx
; Line 3718: } 
L_21822:
        inc     ebp
        mov     ebx,dword [esp-0c8h+0dch]
        mov     ecx,ebx
        mov     eax,dword [esp-0c4h+0dch]
        mov     edx,eax
        mov     ebx,dword [ebx]
        mov     eax,dword [eax]
        cmp     ebx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_21767
; Line 3763:         { 
; Line 3764:             swap(*__x3, *__x4); 
        mov     eax,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [esp-0a8h+0dch],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     dword [edx],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0a8h+0dch]
        mov     dword [eax],ecx
; Line 3718: } 
L_21902:
        inc     ebp
        mov     eax,dword [esp-0c4h+0dch]
        mov     ecx,edi
        mov     edx,edi
        mov     dword [esp-0cch+0dch],edx
        mov     ebx,dword [eax]
        mov     edx,dword [esp-0cch+0dch]
        mov     edx,dword [edx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_21771
; Line 3767:             { 
; Line 3768:                 swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-0a8h+0dch],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0a8h+0dch]
        mov     dword [eax],ecx
; Line 3718: } 
L_21982:
        inc     ebp
        mov     eax,edi
        mov     ecx,esi
        mov     ebx,dword [eax]
        mov     edx,dword [ecx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_21775
; Line 3771:                 { 
; Line 3772:                     swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-0a8h+0dch],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0a8h+0dch]
        mov     dword [eax],ecx
; Line 3718: } 
L_22062:
        inc     ebp
; Line 3774:                 } 
L_21775:
; Line 3775:             } 
L_21771:
; Line 3776:         } 
L_21767:
; Line 3777:     } 
L_21763:
        mov     eax,ebp
; Line 3779: } 
L_21761:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0cch
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_3$r#__less$ii~pi~$qpipir#__less$ii~ virtual
        [bits 32]
@std@__1@#__insertion_sort_3$r#__less$ii~pi~$qpipir#__less$ii~:
; Line 3817: void 
        add     esp,byte 0ffffffcch
        push    ebx
        push    ebp
        push    esi
        push    edi
L_22116:
        mov     edx,dword [esp+0ch+044h]
        mov     esi,dword [esp+08h+044h]
        mov     edi,dword [esp+04h+044h]
; Line 3820:     typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type; 
        mov     ecx,edi
        mov     eax,edi
        add     eax,byte 08h
        mov     ebx,eax
        push    edx
        mov     eax,ebx
        push    eax
        mov     eax,edi
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ii~pi~$qpipipir#__less$ii~
        add     esp,byte 010h
; Line 3823:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     ecx,ebx
        add     ecx,byte 04h
        cmp     ecx,esi
        je      L_22121
L_22119:
; Line 3824:     { 
; Line 3825:         if (__comp(*__i, *__j)) 
        mov     edx,ecx
        mov     eax,ebx
        mov     ecx,dword [ecx]
        cmp     ecx,dword [ebx]
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_22126
; Line 3826:         { 
; Line 3827:             value_type __t(_VSTD::move(*__i)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [esp-04h+044h],ecx
        mov     ebx,eax
        mov     eax,edx
; Line 3831:             { 
L_22130:
; Line 3832:                 *__j = _VSTD::move(*__k); 
        mov     ecx,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
        mov     eax,ebx
; Line 3834:             } while (__j != __first && __comp(__t, *--__k)); 
L_22132:
        cmp     eax,edi
        je      L_22195
        sub     ebx,byte 04h
        mov     ecx,ebx
        mov     ebp,dword [esp-04h+044h]
        mov     ecx,dword [ecx]
        cmp     ebp,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_22130
L_22195:
L_22131:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-04h+044h]
        mov     dword [eax],ecx
; Line 3836:         } 
L_22126:
        mov     ebx,edx
; Line 3838:     } 
L_22122:
        mov     eax,edx
        add     eax,byte 04h
        mov     ecx,eax
L_22120:
        cmp     ecx,esi
        jne     L_22119
L_22121:
; Line 3839: } 
L_22117:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_incomplete$r#__less$ii~pi~$qpipir#__less$ii~ virtual
        [bits 32]
@std@__1@#__insertion_sort_incomplete$r#__less$ii~pi~$qpipir#__less$ii~:
; Line 3842: bool 
        add     esp,byte 0ffffff94h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_22231:
        mov     edx,dword [esp+0ch+07ch]
        mov     eax,dword [esp+08h+07ch]
        mov     dword [esp-068h+07ch],eax
        mov     ebx,dword [esp+04h+07ch]
; Line 3845:     switch (__last - __first) 
        mov     eax,dword [esp-068h+07ch]
        mov     ecx,ebx
        mov     esi,eax
        sub     esi,ecx
        sar     esi,02h
        mov     dword [esp-06ch+07ch],eax
        cmp     esi,byte 06h
        jnc     L_22255
        push    esi
        mov     esi,dword [esi*4+L_65553]
        xchg    esi,dword [esp]
        ret
        times $$-$ & 3 nop
L_65553:
        dd      L_22237
        dd      L_22239
        dd      L_22241
        dd      L_22248
        dd      L_22250
        dd      L_22252
; Line 3846:     { 
; Line 3847:     case 0: 
L_22237:
L_22239:
        mov     al,01h
        jmp     L_22232
L_22241:
        mov     eax,dword [esp-06ch+07ch]
        sub     eax,byte 04h
        mov     ebx,dword [eax]
        mov     edx,dword [ecx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_22243
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-01ch+07ch],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-01ch+07ch]
        mov     dword [eax],ecx
; Line 3718: } 
L_22319:
L_22243:
        mov     al,01h
        jmp     L_22232
L_22248:
        push    edx
        mov     eax,dword [esp-06ch+080h]
        sub     eax,byte 04h
        push    eax
        mov     eax,ebx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ii~pi~$qpipipir#__less$ii~
        add     esp,byte 010h
        mov     al,01h
        jmp     L_22232
L_22250:
        push    edx
        mov     eax,dword [esp-06ch+080h]
        sub     eax,byte 04h
        push    eax
        mov     eax,ebx
        mov     edx,ecx
        add     edx,byte 08h
        push    edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$ii~pi~$qpipipipir#__less$ii~
        add     esp,byte 014h
        mov     al,01h
        jmp     L_22232
L_22252:
        push    edx
        mov     eax,dword [esp-06ch+080h]
        sub     eax,byte 04h
        push    eax
        mov     eax,ebx
        mov     edx,ecx
        add     edx,byte 0ch
        push    edx
        mov     edx,ecx
        add     edx,byte 08h
        push    edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$ii~pi~$qpipipipipir#__less$ii~
        add     esp,byte 018h
        mov     al,01h
        jmp     L_22232
; Line 3863:     } 
L_22255:
L_22234:
        mov     eax,ecx
        add     eax,byte 08h
        mov     esi,eax
        push    edx
        mov     eax,esi
        push    eax
        mov     eax,ebx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ii~pi~$qpipipir#__less$ii~
        add     esp,byte 010h
        xor     edi,edi
; Line 3869:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     eax,esi
        add     eax,byte 04h
        cmp     eax,dword [esp-068h+07ch]
        je      L_22259
L_22257:
; Line 3870:     { 
; Line 3871:         if (__comp(*__i, *__j)) 
        mov     edx,eax
        mov     ecx,esi
        mov     eax,dword [eax]
        cmp     eax,dword [esi]
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_22264
; Line 3872:         { 
; Line 3873:             value_type __t(_VSTD::move(*__i)); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [eax]
        mov     dword [esp-04h+07ch],eax
        mov     esi,ecx
        mov     eax,edx
; Line 3877:             { 
L_22268:
; Line 3878:                 *__j = _VSTD::move(*__k); 
        mov     ecx,esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
        mov     eax,esi
; Line 3880:             } while (__j != __first && __comp(__t, *--__k)); 
L_22270:
        cmp     eax,ebx
        je      L_22418
        sub     esi,byte 04h
        mov     ecx,esi
        mov     ebp,dword [esp-04h+07ch]
        mov     ecx,dword [ecx]
        cmp     ebp,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_22268
L_22418:
L_22269:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-04h+07ch]
        mov     dword [eax],ecx
        inc     edi
        cmp     edi,byte 08h
        jne     L_22277
        mov     ecx,edx
        add     ecx,byte 04h
        mov     eax,dword [esp-06ch+07ch]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
        jmp     L_22232
L_22277:
; Line 3884:         } 
L_22264:
        mov     esi,edx
; Line 3886:     } 
L_22260:
        mov     eax,edx
        add     eax,byte 04h
L_22258:
        cmp     eax,dword [esp-068h+07ch]
        jne     L_22257
L_22259:
        mov     al,01h
; Line 3888: } 
L_22232:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 06ch
        ret
section code
section code
        section vsc@std@__1@#__sort$r#__less$ii~pi~$qpipir#__less$ii~ virtual
        [bits 32]
@std@__1@#__sort$r#__less$ii~pi~$qpipir#__less$ii~:
; Line 3926: void 
        add     esp,0fffffe14h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_22454:
        mov     eax,dword [esp+0ch+01fch]
        mov     dword [esp-019ch+01fch],eax
        mov     eax,dword [esp+08h+01fch]
        mov     dword [esp-0198h+01fch],eax
        mov     eax,dword [esp+04h+01fch]
        mov     dword [esp-0190h+01fch],eax
; Line 3930:     typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type; 
L_22457:
; Line 3935:     { 
; Line 3936:     __restart: 
L_22463:
        mov     eax,dword [esp-0198h+01fch]
        mov     edx,dword [esp-0190h+01fch]
        mov     ecx,eax
        sub     ecx,edx
        sar     ecx,02h
        mov     ebx,ecx
        and     ebx,ebx
        jl      L_22485
        cmp     ebx,byte 06h
        jge     L_22485
        push    ebx
        mov     ebx,dword [ebx*4+L_65558]
        xchg    ebx,dword [esp]
        ret
        times $$-$ & 3 nop
L_65558:
        dd      L_22467
        dd      L_22469
        dd      L_22471
        dd      L_22478
        dd      L_22480
        dd      L_22482
; Line 3939:         { 
; Line 3940:         case 0: 
L_22467:
L_22469:
        jmp     L_22455
L_22471:
        sub     eax,byte 04h
        mov     dword [esp-01d8h+01fch],eax
        mov     dword [esp-01e8h+01fch],edx
        mov     ecx,dword [esp-01d8h+01fch]
        mov     ebx,dword [ecx]
        mov     ecx,dword [esp-01e8h+01fch]
        mov     ecx,dword [ecx]
        cmp     ebx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_22455
        mov     dword [esp-01d4h+01fch],edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,dword [esp-01d4h+01fch]
        mov     dword [esp-01b0h+01fch],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-01b0h+01fch]
        mov     ecx,dword [ecx]
        mov     dword [esp-0168h+01fch],ecx
        mov     dword [esp-01ach+01fch],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-01ach+01fch]
        mov     edx,dword [ecx]
        mov     ecx,dword [esp-01d4h+01fch]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0168h+01fch]
        mov     dword [eax],ecx
; Line 3718: } 
L_22723:
L_22473:
        jmp     L_22455
L_22478:
        mov     ecx,dword [esp-019ch+01fch]
        push    ecx
        sub     eax,byte 04h
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        mov     ecx,edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ii~pi~$qpipipir#__less$ii~
        add     esp,byte 010h
        jmp     L_22455
L_22480:
        mov     ecx,dword [esp-019ch+01fch]
        push    ecx
        sub     eax,byte 04h
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        mov     ecx,edx
        add     ecx,byte 08h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$ii~pi~$qpipipipir#__less$ii~
        add     esp,byte 014h
        jmp     L_22455
L_22482:
        mov     ecx,dword [esp-019ch+01fch]
        push    ecx
        sub     eax,byte 04h
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        mov     ecx,edx
        add     ecx,byte 0ch
        push    ecx
        mov     ecx,edx
        add     ecx,byte 08h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$ii~pi~$qpipipipipir#__less$ii~
        add     esp,byte 018h
        jmp     L_22455
; Line 3956:         } 
L_22485:
L_22464:
        cmp     ecx,byte 06h
        jg      L_22487
; Line 3958:         { 
; Line 3959:             _VSTD::__insertion_sort_3<_Compare>(__first, __last, __comp); 
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,dword [esp-0198h+0200h]
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        push    eax
        call    @std@__1@#__insertion_sort_3$r#__less$ii~pi~$qpipir#__less$ii~
        add     esp,byte 0ch
        jmp     L_22455
; Line 3961:         } 
L_22487:
        mov     esi,edx
        mov     dword [esp-01c0h+01fch],eax
        sub     eax,byte 04h
        mov     ebx,eax
; Line 3967:         { 
; Line 3968:         difference_type __delta; 
        cmp     ecx,03e8h
        jl      L_22495
; Line 3970:         { 
; Line 3971:             __delta = __len/2; 
        mov     eax,ecx
        shr     eax,01fh
        add     eax,ecx
        sar     eax,01h
        mov     dword [esp-01dch+01fch],esi
        mov     esi,eax
        shl     esi,02h
        mov     ecx,dword [esp-01dch+01fch]
        add     ecx,esi
        mov     dword [esp-0188h+01fch],ecx
        mov     ecx,eax
        shr     ecx,01fh
        add     eax,ecx
        sar     eax,01h
        mov     ecx,dword [esp-019ch+01fch]
        push    ecx
        mov     ecx,ebx
        push    ecx
        mov     esi,dword [esp-0188h+0204h]
        mov     ecx,eax
        shl     ecx,02h
        mov     eax,esi
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0188h+0208h]
        push    eax
        mov     eax,edx
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0190h+0210h]
        push    eax
        call    @std@__1@#__sort5$r#__less$ii~pi~$qpipipipipir#__less$ii~
        add     esp,byte 018h
        mov     dword [esp-0184h+01fch],eax
; Line 3975:         } 
        jmp     L_22500
L_22495:
; Line 3976:         else 
; Line 3977:         { 
; Line 3978:             __delta = __len/2; 
        mov     dword [esp-01e0h+01fch],ecx
        shr     ecx,01fh
        mov     eax,dword [esp-01e0h+01fch]
        add     eax,ecx
        sar     eax,01h
        mov     dword [esp-01c4h+01fch],esi
        mov     ecx,eax
        shl     ecx,02h
        mov     eax,dword [esp-01c4h+01fch]
        add     eax,ecx
        mov     dword [esp-0188h+01fch],eax
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0188h+0204h]
        push    eax
        mov     eax,dword [esp-0190h+0208h]
        push    eax
        call    @std@__1@#__sort3$r#__less$ii~pi~$qpipipir#__less$ii~
        add     esp,byte 010h
        mov     dword [esp-0184h+01fch],eax
; Line 3981:         } 
L_22500:
; Line 3982:         } 
        mov     esi,dword [esp-0190h+01fch]
        mov     edx,esi
        mov     dword [esp-01e4h+01fch],ebx
        mov     ebx,esi
        mov     dword [esp-018ch+01fch],ebx
        mov     eax,dword [esp-0188h+01fch]
        mov     ecx,eax
        mov     ebx,dword [ebx]
        mov     eax,dword [eax]
        cmp     ebx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_22508
; Line 3992:         { 
; Line 3995:             while (true) 
        mov     eax,dword [esp-01e4h+01fch]
L_22512:
; Line 3996:             { 
; Line 3997:                 if (__i == --__j) 
        sub     eax,byte 04h
        mov     dword [esp-01e4h+01fch],eax
        cmp     esi,eax
        jne     L_22518
; Line 3998:                 { 
; Line 4001:                     ++__i;   
        mov     eax,dword [esp-018ch+01fch]
        add     eax,byte 04h
        mov     esi,eax
        mov     eax,dword [esp-0198h+01fch]
        mov     edi,edx
        sub     eax,byte 04h
        mov     ecx,eax
        mov     ebx,eax
        mov     edi,dword [edi]
        mov     eax,dword [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_22522
; Line 4004:                     { 
; Line 4005:                         while (true) 
L_22526:
; Line 4006:                         { 
; Line 4007:                             if (__i == __j) 
        cmp     esi,ecx
        je      L_22455
L_22532:
        mov     edi,edx
        mov     eax,esi
        mov     edi,dword [edi]
        mov     eax,dword [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_22537
; Line 4010:                             { 
; Line 4011:                                 swap(*__i, *__j); 
        mov     edx,esi
        mov     eax,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edi,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edi,dword [edi]
        mov     dword [esp-0168h+01fch],edi
        mov     edi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edi,dword [edi]
        mov     dword [edx],edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [esp-0168h+01fch]
        mov     dword [eax],edx
; Line 3718: } 
L_22835:
        inc     dword [esp-0184h+01fch]
        add     esi,byte 04h
; Line 4014:                                 break; 
        jmp     L_22527
L_22537:
        add     esi,byte 04h
; Line 4017:                         } 
L_22528:
        jmp     L_22526
L_22527:
; Line 4018:                     } 
L_22522:
        mov     dword [esp-01bch+01fch],ecx
        cmp     esi,dword [esp-01bch+01fch]
        je      L_22455
L_22550:
L_22555:
; Line 4023:                     { 
; Line 4024:                         while (!__comp(*__first, *__i)) 
        mov     edi,dword [esp-0190h+01fch]
        mov     ecx,edi
        mov     eax,esi
        mov     edx,esi
        mov     edi,dword [edi]
        mov     eax,dword [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_22562
L_22561:
        mov     eax,edx
        add     eax,byte 04h
        mov     esi,eax
L_22563:
        mov     edi,ecx
        mov     eax,esi
        mov     edx,esi
        mov     edi,dword [edi]
        mov     eax,dword [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_22561
L_22562:
        mov     ebp,ecx
        mov     eax,ebx
        sub     eax,byte 04h
        mov     edi,eax
        mov     ebx,eax
        mov     ebp,dword [ebp]
        mov     eax,dword [eax]
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_22569
L_22568:
L_22570:
; Line 4026:                         while (__comp(*__first, *--__j)) 
        mov     ebp,ecx
        mov     eax,ebx
        sub     eax,byte 04h
        mov     edi,eax
        mov     ebx,eax
        mov     ebp,dword [ebp]
        mov     eax,dword [eax]
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_22568
L_22569:
        cmp     esi,edi
        jge     L_22556
; Line 4029:                             break; 
L_22575:
        mov     ecx,edx
        mov     eax,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     esi,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [esi]
        mov     dword [esp-0168h+01fch],esi
        mov     esi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [esi]
        mov     dword [ecx],esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0168h+01fch]
        mov     dword [eax],ecx
; Line 3718: } 
L_22963:
        inc     dword [esp-0184h+01fch]
        mov     eax,edx
        add     eax,byte 04h
        mov     esi,eax
; Line 4033:                     } 
L_22557:
; Line 4022:                     while (true) 
        jmp     L_22555
L_22556:
        mov     eax,edx
        mov     dword [esp-0190h+01fch],eax
        jmp     L_22463
L_22518:
        mov     eax,dword [esp-01e4h+01fch]
        mov     ebx,eax
        mov     dword [esp-01d0h+01fch],ecx
        mov     edi,dword [ebx]
        mov     ebx,dword [esp-01d0h+01fch]
        mov     dword [esp-01a8h+01fch],ebx
        mov     ebx,dword [ebx]
        cmp     edi,ebx
        setl    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_22586
; Line 4041:                 { 
; Line 4042:                     swap(*__i, *__j); 
        mov     edx,dword [esp-018ch+01fch]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ebx,dword [ebx]
        mov     dword [esp-0168h+01fch],ebx
        mov     ebx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ebx,dword [ebx]
        mov     dword [edx],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [esp-0168h+01fch]
        mov     dword [esp-01ech+01fch],eax
        mov     dword [eax],edx
; Line 3718: } 
L_23043:
        inc     dword [esp-0184h+01fch]
; Line 4044:                     break;   
        jmp     L_22513
L_22586:
; Line 4046:             } 
L_22514:
        jmp     L_22512
L_22513:
; Line 4047:         } 
L_22508:
        mov     eax,dword [esp-018ch+01fch]
        add     eax,byte 04h
        mov     ebx,eax
        cmp     ebx,dword [esp-01e4h+01fch]
        jge     L_22599
; Line 4053:         { 
; Line 4056:             while (true) 
L_22603:
; Line 4057:             { 
; Line 4059:                 while (__comp(*__i, *__m)) 
        mov     esi,ebx
        mov     edx,ebx
        mov     eax,ecx
        mov     esi,dword [esi]
        mov     eax,dword [eax]
        cmp     esi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_22610
L_22609:
        mov     eax,edx
        add     eax,byte 04h
        mov     ebx,eax
L_22611:
        mov     esi,ebx
        mov     edx,ebx
        mov     eax,ecx
        mov     esi,dword [esi]
        mov     eax,dword [eax]
        cmp     esi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_22609
L_22610:
        sub     dword [esp-01e4h+01fch],byte 04h
        mov     edi,dword [esp-01e4h+01fch]
        mov     esi,edi
        mov     eax,ecx
        mov     dword [esp-01cch+01fch],eax
        mov     edi,dword [edi]
        mov     eax,dword [esp-01cch+01fch]
        mov     dword [esp-01a4h+01fch],eax
        mov     eax,dword [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_22617
L_22616:
L_22618:
; Line 4062:                 while (!__comp(*--__j, *__m)) 
        mov     eax,esi
        sub     eax,byte 04h
        mov     dword [esp-01e4h+01fch],eax
        mov     edi,eax
        mov     esi,eax
        mov     eax,ecx
        mov     dword [esp-01c8h+01fch],eax
        mov     edi,dword [edi]
        mov     eax,dword [esp-01c8h+01fch]
        mov     dword [esp-01a0h+01fch],eax
        mov     eax,dword [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_22616
L_22617:
        cmp     ebx,dword [esp-01e4h+01fch]
        jg      L_22604
; Line 4065:                     break; 
L_22623:
        mov     ecx,edx
        mov     eax,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edi,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edi,dword [edi]
        mov     dword [esp-0168h+01fch],edi
        mov     edi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edi,dword [edi]
        mov     dword [ecx],edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0168h+01fch]
        mov     dword [eax],ecx
; Line 3718: } 
L_23171:
        inc     dword [esp-0184h+01fch]
        mov     eax,ebx
        cmp     dword [esp-0188h+01fch],eax
        jne     L_22628
        mov     eax,esi
        mov     dword [esp-0188h+01fch],eax
L_22628:
        mov     eax,edx
        add     eax,byte 04h
        mov     ebx,eax
; Line 4073:             } 
L_22605:
        mov     ecx,dword [esp-0188h+01fch]
        jmp     L_22603
L_22604:
; Line 4074:         } 
L_22599:
        cmp     ebx,dword [esp-0188h+01fch]
        je      L_22639
        mov     esi,ecx
        mov     eax,ebx
        mov     edx,ebx
        mov     esi,dword [esi]
        mov     edx,dword [edx]
        cmp     esi,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_22639
; Line 4077:         { 
; Line 4078:             swap(*__i, *__m); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [esp-0168h+01fch],edx
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [esp-01b4h+01fch],eax
        mov     dword [eax],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [esp-0168h+01fch]
        mov     dword [esp-01b8h+01fch],ecx
        mov     eax,ecx
        mov     dword [eax],edx
; Line 3718: } 
L_23251:
        inc     dword [esp-0184h+01fch]
; Line 4080:         } 
L_22639:
        cmp     dword [esp-0184h+01fch],byte 00h
        jne     L_22646
; Line 4084:         { 
; Line 4085:             bool __fs = _VSTD::__insertion_sort_incomplete<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$ii~pi~$qpipir#__less$ii~
        add     esp,byte 0ch
        mov     byte [esp-0191h+01fch],al
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,dword [esp-0198h+0200h]
        push    eax
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$ii~pi~$qpipir#__less$ii~
        add     esp,byte 0ch
        and     al,al
        je      L_22650
; Line 4087:             { 
; Line 4088:                 if (__fs) 
        cmp     byte [esp-0191h+01fch],byte 00h
        jne     L_22455
L_22654:
        mov     eax,ebx
        mov     dword [esp-0198h+01fch],eax
; Line 4091:                 continue; 
        jmp     L_22457
L_22650:
; Line 4093:             else 
; Line 4094:             { 
; Line 4095:                 if (__fs) 
        cmp     byte [esp-0191h+01fch],byte 00h
        je      L_22664
; Line 4096:                 { 
; Line 4097:                     __first = ++__i; 
        mov     eax,ebx
        add     eax,byte 04h
        mov     dword [esp-0190h+01fch],eax
; Line 4098:                     continue; 
        jmp     L_22457
L_22664:
; Line 4100:             } 
L_22660:
; Line 4101:         } 
L_22646:
        mov     eax,dword [esp-0198h+01fch]
        mov     ecx,ebx
        sub     eax,ecx
        mov     edx,eax
        sar     edx,02h
        mov     eax,dword [esp-0190h+01fch]
        sub     eax,ecx
        neg     eax
        imul    eax,byte 01h
        sar     eax,02h
        cmp     eax,edx
        jge     L_22677
; Line 4104:         { 
; Line 4105:             _VSTD::__sort<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        push    eax
        call    @std@__1@#__sort$r#__less$ii~pi~$qpipir#__less$ii~
        add     esp,byte 0ch
        mov     eax,ebx
        add     eax,byte 04h
        mov     dword [esp-0190h+01fch],eax
; Line 4108:         } 
        jmp     L_22682
L_22677:
; Line 4109:         else 
; Line 4110:         { 
; Line 4111:             _VSTD::__sort<_Compare>(__i+1, __last, __comp); 
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,dword [esp-0198h+0200h]
        push    eax
        mov     eax,ecx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__sort$r#__less$ii~pi~$qpipir#__less$ii~
        add     esp,byte 0ch
        mov     eax,ebx
        mov     dword [esp-0198h+01fch],eax
; Line 4114:         } 
L_22682:
; Line 4115:     } 
L_22459:
; Line 3934:     while (true) 
        jmp     L_22457
; Line 4116: } 
L_22458:
L_22455:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,01ech
        ret
section code
section code
        section vsc@std@__1@#__sort3$r#__less$uiui~pui~$qpuipuipuir#__less$uiui~ virtual
        [bits 32]
@std@__1@#__sort3$r#__less$uiui~pui~$qpuipuipuir#__less$uiui~:
; Line 3689: unsigned 
        add     esp,0fffffed0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_23305:
        mov     edx,dword [esp+0ch+0140h]
        mov     esi,dword [esp+08h+0140h]
        mov     edi,dword [esp+04h+0140h]
; Line 3692:     unsigned __r = 0; 
        xor     ebp,ebp
        mov     ecx,esi
        mov     eax,edi
        mov     ebx,dword [ecx]
        mov     dword [esp-0128h+0140h],ebx
        mov     ebx,dword [edi]
        cmp     dword [esp-0128h+0140h],ebx
        setc    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        jne     L_23308
; Line 3694:     { 
; Line 3695:         if (!__c(*__z, *__y))       
        mov     dword [esp-0f4h+0140h],ecx
        mov     edi,dword [edx]
        mov     ebx,dword [esp-0f4h+0140h]
        mov     ebx,dword [ebx]
        cmp     edi,ebx
        setc    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        jne     L_23312
        mov     eax,ebp
        jmp     L_23306
L_23312:
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ebx,dword [ecx]
        mov     dword [esp-0d8h+0140h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ebx,dword [edx]
        mov     dword [ecx],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0d8h+0140h]
        mov     dword [edx],ecx
; Line 3718: } 
L_23388:
        mov     edx,01h
        mov     ebx,dword [esi]
        mov     ecx,dword [eax]
        cmp     ebx,ecx
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_23317
; Line 3701:         { 
; Line 3702:             swap(*__x, *__y);       
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     dword [esp-0d8h+0140h],ecx
        mov     dword [esp-0130h+0140h],esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0130h+0140h]
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0d8h+0140h]
        mov     dword [esi],eax
; Line 3718: } 
L_23468:
        mov     edx,02h
; Line 3704:         } 
L_23317:
        mov     eax,edx
        jmp     L_23306
; Line 3706:     } 
L_23308:
        mov     ebx,dword [edx]
        cmp     ebx,dword [ecx]
        setc    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_23327
; Line 3708:     { 
; Line 3709:         swap(*__x, *__z);           
        mov     dword [esp-012ch+0140h],eax
        mov     dword [esp-0120h+0140h],edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-012ch+0140h]
        mov     dword [esp-0124h+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0124h+0140h]
        mov     eax,dword [eax]
        mov     dword [esp-0d8h+0140h],eax
        mov     eax,dword [esp-0120h+0140h]
        mov     dword [esp-0118h+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0118h+0140h]
        mov     ecx,dword [eax]
        mov     eax,dword [esp-012ch+0140h]
        mov     dword [eax],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0d8h+0140h]
        mov     eax,dword [esp-0120h+0140h]
        mov     dword [eax],ecx
; Line 3718: } 
L_23548:
        mov     eax,01h
        jmp     L_23306
; Line 3712:     } 
L_23327:
        mov     dword [esp-011ch+0140h],eax
        mov     dword [esp-0104h+0140h],ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-011ch+0140h]
        mov     dword [esp-0114h+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0114h+0140h]
        mov     eax,dword [eax]
        mov     dword [esp-0d8h+0140h],eax
        mov     eax,dword [esp-0104h+0140h]
        mov     dword [esp-0f8h+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0f8h+0140h]
        mov     ecx,dword [eax]
        mov     eax,dword [esp-011ch+0140h]
        mov     dword [eax],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0d8h+0140h]
        mov     eax,dword [esp-0104h+0140h]
        mov     dword [eax],ecx
; Line 3718: } 
L_23612:
        mov     ecx,01h
        mov     dword [esp-010ch+0140h],edx
        mov     dword [esp-0110h+0140h],esi
        mov     eax,esi
        mov     dword [esp-0108h+0140h],eax
        mov     eax,dword [esp-010ch+0140h]
        mov     ebx,dword [eax]
        mov     eax,dword [esp-0108h+0140h]
        mov     eax,dword [eax]
        cmp     ebx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_23334
; Line 3716:     { 
; Line 3717:         swap(*__y, *__z);           
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-0110h+0140h]
        mov     dword [esp-0fch+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0fch+0140h]
        mov     eax,dword [eax]
        mov     dword [esp-0d8h+0140h],eax
        mov     dword [esp-0100h+0140h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0100h+0140h]
        mov     ecx,dword [eax]
        mov     eax,dword [esp-0110h+0140h]
        mov     dword [eax],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0d8h+0140h]
        mov     dword [edx],eax
; Line 3718: } 
L_23692:
        mov     ecx,02h
; Line 3719:     } 
L_23334:
        mov     eax,ecx
; Line 3721: }                                   
L_23306:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0130h
        ret
section code
section code
        section vsc@std@__1@#__sort4$r#__less$uiui~pui~$qpuipuipuipuir#__less$uiui~ virtual
        [bits 32]
@std@__1@#__sort4$r#__less$uiui~pui~$qpuipuipuipuir#__less$uiui~:
; Line 3726: unsigned 
        add     esp,0ffffff6ch
        push    ebx
        push    ebp
        push    esi
        push    edi
L_23746:
        mov     ecx,dword [esp+014h+0a4h]
        mov     esi,dword [esp+010h+0a4h]
        mov     edi,dword [esp+0ch+0a4h]
        mov     eax,dword [esp+08h+0a4h]
        mov     dword [esp-094h+0a4h],eax
        mov     ebx,dword [esp+04h+0a4h]
; Line 3730:     unsigned __r = __sort3<_Compare>(__x1, __x2, __x3, __c); 
        push    ecx
        mov     eax,edi
        push    eax
        mov     eax,dword [esp-094h+0ach]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#__sort3$r#__less$uiui~pui~$qpuipuipuir#__less$uiui~
        add     esp,byte 010h
        mov     ebp,eax
        mov     ecx,esi
        mov     edx,esi
        mov     eax,edi
        mov     esi,edi
        mov     edx,dword [edx]
        mov     eax,dword [eax]
        cmp     edx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_23749
; Line 3732:     { 
; Line 3733:         swap(*__x3, *__x4); 
        mov     edx,esi
        mov     eax,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [esp-078h+0a4h],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     dword [edx],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-078h+0a4h]
        mov     dword [eax],ecx
; Line 3718: } 
L_23801:
        inc     ebp
        mov     eax,edi
        mov     ecx,dword [esp-094h+0a4h]
        mov     edx,ecx
        mov     esi,dword [eax]
        mov     edx,dword [edx]
        cmp     esi,edx
        setc    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_23753
; Line 3736:         { 
; Line 3737:             swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-078h+0a4h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-078h+0a4h]
        mov     dword [eax],ecx
; Line 3718: } 
L_23881:
        inc     ebp
        mov     eax,dword [esp-094h+0a4h]
        mov     ecx,ebx
        mov     ebx,dword [eax]
        mov     edx,dword [ecx]
        cmp     ebx,edx
        setc    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_23757
; Line 3740:             { 
; Line 3741:                 swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-078h+0a4h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-078h+0a4h]
        mov     dword [eax],ecx
; Line 3718: } 
L_23961:
        inc     ebp
; Line 3743:             } 
L_23757:
; Line 3744:         } 
L_23753:
; Line 3745:     } 
L_23749:
        mov     eax,ebp
; Line 3747: } 
L_23747:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,094h
        ret
section code
section code
        section vsc@std@__1@#__sort5$r#__less$uiui~pui~$qpuipuipuipuipuir#__less$uiui~ virtual
        [bits 32]
@std@__1@#__sort5$r#__less$uiui~pui~$qpuipuipuipuipuir#__less$uiui~:
; Line 3752: _LIBCPP_HIDDEN 
        add     esp,0ffffff34h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_24015:
        mov     ecx,dword [esp+018h+0dch]
        mov     ebx,dword [esp+014h+0dch]
        mov     eax,dword [esp+010h+0dch]
        mov     dword [esp-0c8h+0dch],eax
        mov     eax,dword [esp+0ch+0dch]
        mov     dword [esp-0c4h+0dch],eax
        mov     edi,dword [esp+08h+0dch]
        mov     esi,dword [esp+04h+0dch]
; Line 3757:     unsigned __r = __sort4<_Compare>(__x1, __x2, __x3, __x4, __c); 
        push    ecx
        mov     eax,dword [esp-0c8h+0e0h]
        push    eax
        mov     eax,dword [esp-0c4h+0e4h]
        push    eax
        mov     eax,edi
        push    eax
        mov     eax,esi
        push    eax
        call    @std@__1@#__sort4$r#__less$uiui~pui~$qpuipuipuipuir#__less$uiui~
        add     esp,byte 014h
        mov     ebp,eax
        mov     edx,ebx
        mov     ecx,ebx
        mov     eax,dword [esp-0c8h+0dch]
        mov     ebx,eax
        mov     ecx,dword [ecx]
        mov     eax,dword [eax]
        cmp     ecx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_24018
; Line 3759:     { 
; Line 3760:         swap(*__x4, *__x5); 
        mov     ecx,ebx
        mov     eax,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [esp-0a8h+0dch],edx
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0a8h+0dch]
        mov     dword [eax],ecx
; Line 3718: } 
L_24077:
        inc     ebp
        mov     ebx,dword [esp-0c8h+0dch]
        mov     ecx,ebx
        mov     eax,dword [esp-0c4h+0dch]
        mov     edx,eax
        mov     ebx,dword [ebx]
        mov     eax,dword [eax]
        cmp     ebx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_24022
; Line 3763:         { 
; Line 3764:             swap(*__x3, *__x4); 
        mov     eax,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [esp-0a8h+0dch],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     dword [edx],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0a8h+0dch]
        mov     dword [eax],ecx
; Line 3718: } 
L_24157:
        inc     ebp
        mov     eax,dword [esp-0c4h+0dch]
        mov     ecx,edi
        mov     edx,edi
        mov     dword [esp-0cch+0dch],edx
        mov     ebx,dword [eax]
        mov     edx,dword [esp-0cch+0dch]
        mov     edx,dword [edx]
        cmp     ebx,edx
        setc    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_24026
; Line 3767:             { 
; Line 3768:                 swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-0a8h+0dch],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0a8h+0dch]
        mov     dword [eax],ecx
; Line 3718: } 
L_24237:
        inc     ebp
        mov     eax,edi
        mov     ecx,esi
        mov     ebx,dword [eax]
        mov     edx,dword [ecx]
        cmp     ebx,edx
        setc    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_24030
; Line 3771:                 { 
; Line 3772:                     swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-0a8h+0dch],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0a8h+0dch]
        mov     dword [eax],ecx
; Line 3718: } 
L_24317:
        inc     ebp
; Line 3774:                 } 
L_24030:
; Line 3775:             } 
L_24026:
; Line 3776:         } 
L_24022:
; Line 3777:     } 
L_24018:
        mov     eax,ebp
; Line 3779: } 
L_24016:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0cch
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_3$r#__less$uiui~pui~$qpuipuir#__less$uiui~ virtual
        [bits 32]
@std@__1@#__insertion_sort_3$r#__less$uiui~pui~$qpuipuir#__less$uiui~:
; Line 3817: void 
        add     esp,byte 0ffffffcch
        push    ebx
        push    ebp
        push    esi
        push    edi
L_24371:
        mov     edx,dword [esp+0ch+044h]
        mov     esi,dword [esp+08h+044h]
        mov     edi,dword [esp+04h+044h]
; Line 3820:     typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type; 
        mov     ecx,edi
        mov     eax,edi
        add     eax,byte 08h
        mov     ebx,eax
        push    edx
        mov     eax,ebx
        push    eax
        mov     eax,edi
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$uiui~pui~$qpuipuipuir#__less$uiui~
        add     esp,byte 010h
; Line 3823:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     ecx,ebx
        add     ecx,byte 04h
        cmp     ecx,esi
        je      L_24376
L_24374:
; Line 3824:     { 
; Line 3825:         if (__comp(*__i, *__j)) 
        mov     edx,ecx
        mov     eax,ebx
        mov     ecx,dword [ecx]
        cmp     ecx,dword [ebx]
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_24381
; Line 3826:         { 
; Line 3827:             value_type __t(_VSTD::move(*__i)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [esp-04h+044h],ecx
        mov     ebx,eax
        mov     eax,edx
; Line 3831:             { 
L_24385:
; Line 3832:                 *__j = _VSTD::move(*__k); 
        mov     ecx,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
        mov     eax,ebx
; Line 3834:             } while (__j != __first && __comp(__t, *--__k)); 
L_24387:
        cmp     eax,edi
        je      L_24450
        sub     ebx,byte 04h
        mov     ecx,ebx
        mov     ebp,dword [esp-04h+044h]
        mov     ecx,dword [ecx]
        cmp     ebp,ecx
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_24385
L_24450:
L_24386:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-04h+044h]
        mov     dword [eax],ecx
; Line 3836:         } 
L_24381:
        mov     ebx,edx
; Line 3838:     } 
L_24377:
        mov     eax,edx
        add     eax,byte 04h
        mov     ecx,eax
L_24375:
        cmp     ecx,esi
        jne     L_24374
L_24376:
; Line 3839: } 
L_24372:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_incomplete$r#__less$uiui~pui~$qpuipuir#__less$uiui~ virtual
        [bits 32]
@std@__1@#__insertion_sort_incomplete$r#__less$uiui~pui~$qpuipuir#__less$uiui~:
; Line 3842: bool 
        add     esp,byte 0ffffff94h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_24486:
        mov     edx,dword [esp+0ch+07ch]
        mov     eax,dword [esp+08h+07ch]
        mov     dword [esp-068h+07ch],eax
        mov     ebx,dword [esp+04h+07ch]
; Line 3845:     switch (__last - __first) 
        mov     eax,dword [esp-068h+07ch]
        mov     ecx,ebx
        mov     esi,eax
        sub     esi,ecx
        sar     esi,02h
        mov     dword [esp-06ch+07ch],eax
        cmp     esi,byte 06h
        jnc     L_24510
        push    esi
        mov     esi,dword [esi*4+L_65587]
        xchg    esi,dword [esp]
        ret
        times $$-$ & 3 nop
L_65587:
        dd      L_24492
        dd      L_24494
        dd      L_24496
        dd      L_24503
        dd      L_24505
        dd      L_24507
; Line 3846:     { 
; Line 3847:     case 0: 
L_24492:
L_24494:
        mov     al,01h
        jmp     L_24487
L_24496:
        mov     eax,dword [esp-06ch+07ch]
        sub     eax,byte 04h
        mov     ebx,dword [eax]
        mov     edx,dword [ecx]
        cmp     ebx,edx
        setc    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_24498
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-01ch+07ch],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-01ch+07ch]
        mov     dword [eax],ecx
; Line 3718: } 
L_24574:
L_24498:
        mov     al,01h
        jmp     L_24487
L_24503:
        push    edx
        mov     eax,dword [esp-06ch+080h]
        sub     eax,byte 04h
        push    eax
        mov     eax,ebx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$uiui~pui~$qpuipuipuir#__less$uiui~
        add     esp,byte 010h
        mov     al,01h
        jmp     L_24487
L_24505:
        push    edx
        mov     eax,dword [esp-06ch+080h]
        sub     eax,byte 04h
        push    eax
        mov     eax,ebx
        mov     edx,ecx
        add     edx,byte 08h
        push    edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$uiui~pui~$qpuipuipuipuir#__less$uiui~
        add     esp,byte 014h
        mov     al,01h
        jmp     L_24487
L_24507:
        push    edx
        mov     eax,dword [esp-06ch+080h]
        sub     eax,byte 04h
        push    eax
        mov     eax,ebx
        mov     edx,ecx
        add     edx,byte 0ch
        push    edx
        mov     edx,ecx
        add     edx,byte 08h
        push    edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$uiui~pui~$qpuipuipuipuipuir#__less$uiui~
        add     esp,byte 018h
        mov     al,01h
        jmp     L_24487
; Line 3863:     } 
L_24510:
L_24489:
        mov     eax,ecx
        add     eax,byte 08h
        mov     esi,eax
        push    edx
        mov     eax,esi
        push    eax
        mov     eax,ebx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$uiui~pui~$qpuipuipuir#__less$uiui~
        add     esp,byte 010h
        xor     edi,edi
; Line 3869:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     eax,esi
        add     eax,byte 04h
        cmp     eax,dword [esp-068h+07ch]
        je      L_24514
L_24512:
; Line 3870:     { 
; Line 3871:         if (__comp(*__i, *__j)) 
        mov     edx,eax
        mov     ecx,esi
        mov     eax,dword [eax]
        cmp     eax,dword [esi]
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_24519
; Line 3872:         { 
; Line 3873:             value_type __t(_VSTD::move(*__i)); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [eax]
        mov     dword [esp-04h+07ch],eax
        mov     esi,ecx
        mov     eax,edx
; Line 3877:             { 
L_24523:
; Line 3878:                 *__j = _VSTD::move(*__k); 
        mov     ecx,esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
        mov     eax,esi
; Line 3880:             } while (__j != __first && __comp(__t, *--__k)); 
L_24525:
        cmp     eax,ebx
        je      L_24673
        sub     esi,byte 04h
        mov     ecx,esi
        mov     ebp,dword [esp-04h+07ch]
        mov     ecx,dword [ecx]
        cmp     ebp,ecx
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_24523
L_24673:
L_24524:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-04h+07ch]
        mov     dword [eax],ecx
        inc     edi
        cmp     edi,byte 08h
        jne     L_24532
        mov     ecx,edx
        add     ecx,byte 04h
        mov     eax,dword [esp-06ch+07ch]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
        jmp     L_24487
L_24532:
; Line 3884:         } 
L_24519:
        mov     esi,edx
; Line 3886:     } 
L_24515:
        mov     eax,edx
        add     eax,byte 04h
L_24513:
        cmp     eax,dword [esp-068h+07ch]
        jne     L_24512
L_24514:
        mov     al,01h
; Line 3888: } 
L_24487:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 06ch
        ret
section code
section code
        section vsc@std@__1@#__sort$r#__less$uiui~pui~$qpuipuir#__less$uiui~ virtual
        [bits 32]
@std@__1@#__sort$r#__less$uiui~pui~$qpuipuir#__less$uiui~:
; Line 3926: void 
        add     esp,0fffffe14h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_24709:
        mov     eax,dword [esp+0ch+01fch]
        mov     dword [esp-019ch+01fch],eax
        mov     eax,dword [esp+08h+01fch]
        mov     dword [esp-0198h+01fch],eax
        mov     eax,dword [esp+04h+01fch]
        mov     dword [esp-0190h+01fch],eax
; Line 3930:     typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type; 
L_24712:
; Line 3935:     { 
; Line 3936:     __restart: 
L_24718:
        mov     eax,dword [esp-0198h+01fch]
        mov     edx,dword [esp-0190h+01fch]
        mov     ecx,eax
        sub     ecx,edx
        sar     ecx,02h
        mov     ebx,ecx
        and     ebx,ebx
        jl      L_24740
        cmp     ebx,byte 06h
        jge     L_24740
        push    ebx
        mov     ebx,dword [ebx*4+L_65592]
        xchg    ebx,dword [esp]
        ret
        times $$-$ & 3 nop
L_65592:
        dd      L_24722
        dd      L_24724
        dd      L_24726
        dd      L_24733
        dd      L_24735
        dd      L_24737
; Line 3939:         { 
; Line 3940:         case 0: 
L_24722:
L_24724:
        jmp     L_24710
L_24726:
        sub     eax,byte 04h
        mov     dword [esp-01d8h+01fch],eax
        mov     dword [esp-01e8h+01fch],edx
        mov     ecx,dword [esp-01d8h+01fch]
        mov     ebx,dword [ecx]
        mov     ecx,dword [esp-01e8h+01fch]
        mov     ecx,dword [ecx]
        cmp     ebx,ecx
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_24710
        mov     dword [esp-01d4h+01fch],edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,dword [esp-01d4h+01fch]
        mov     dword [esp-01b0h+01fch],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-01b0h+01fch]
        mov     ecx,dword [ecx]
        mov     dword [esp-0168h+01fch],ecx
        mov     dword [esp-01ach+01fch],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-01ach+01fch]
        mov     edx,dword [ecx]
        mov     ecx,dword [esp-01d4h+01fch]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0168h+01fch]
        mov     dword [eax],ecx
; Line 3718: } 
L_24978:
L_24728:
        jmp     L_24710
L_24733:
        mov     ecx,dword [esp-019ch+01fch]
        push    ecx
        sub     eax,byte 04h
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        mov     ecx,edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$uiui~pui~$qpuipuipuir#__less$uiui~
        add     esp,byte 010h
        jmp     L_24710
L_24735:
        mov     ecx,dword [esp-019ch+01fch]
        push    ecx
        sub     eax,byte 04h
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        mov     ecx,edx
        add     ecx,byte 08h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$uiui~pui~$qpuipuipuipuir#__less$uiui~
        add     esp,byte 014h
        jmp     L_24710
L_24737:
        mov     ecx,dword [esp-019ch+01fch]
        push    ecx
        sub     eax,byte 04h
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        mov     ecx,edx
        add     ecx,byte 0ch
        push    ecx
        mov     ecx,edx
        add     ecx,byte 08h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$uiui~pui~$qpuipuipuipuipuir#__less$uiui~
        add     esp,byte 018h
        jmp     L_24710
; Line 3956:         } 
L_24740:
L_24719:
        cmp     ecx,byte 06h
        jg      L_24742
; Line 3958:         { 
; Line 3959:             _VSTD::__insertion_sort_3<_Compare>(__first, __last, __comp); 
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,dword [esp-0198h+0200h]
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        push    eax
        call    @std@__1@#__insertion_sort_3$r#__less$uiui~pui~$qpuipuir#__less$uiui~
        add     esp,byte 0ch
        jmp     L_24710
; Line 3961:         } 
L_24742:
        mov     esi,edx
        mov     dword [esp-01c0h+01fch],eax
        sub     eax,byte 04h
        mov     ebx,eax
; Line 3967:         { 
; Line 3968:         difference_type __delta; 
        cmp     ecx,03e8h
        jl      L_24750
; Line 3970:         { 
; Line 3971:             __delta = __len/2; 
        mov     eax,ecx
        shr     eax,01fh
        add     eax,ecx
        sar     eax,01h
        mov     dword [esp-01dch+01fch],esi
        mov     esi,eax
        shl     esi,02h
        mov     ecx,dword [esp-01dch+01fch]
        add     ecx,esi
        mov     dword [esp-0188h+01fch],ecx
        mov     ecx,eax
        shr     ecx,01fh
        add     eax,ecx
        sar     eax,01h
        mov     ecx,dword [esp-019ch+01fch]
        push    ecx
        mov     ecx,ebx
        push    ecx
        mov     esi,dword [esp-0188h+0204h]
        mov     ecx,eax
        shl     ecx,02h
        mov     eax,esi
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0188h+0208h]
        push    eax
        mov     eax,edx
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0190h+0210h]
        push    eax
        call    @std@__1@#__sort5$r#__less$uiui~pui~$qpuipuipuipuipuir#__less$uiui~
        add     esp,byte 018h
        mov     dword [esp-0184h+01fch],eax
; Line 3975:         } 
        jmp     L_24755
L_24750:
; Line 3976:         else 
; Line 3977:         { 
; Line 3978:             __delta = __len/2; 
        mov     dword [esp-01e0h+01fch],ecx
        shr     ecx,01fh
        mov     eax,dword [esp-01e0h+01fch]
        add     eax,ecx
        sar     eax,01h
        mov     dword [esp-01c4h+01fch],esi
        mov     ecx,eax
        shl     ecx,02h
        mov     eax,dword [esp-01c4h+01fch]
        add     eax,ecx
        mov     dword [esp-0188h+01fch],eax
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0188h+0204h]
        push    eax
        mov     eax,dword [esp-0190h+0208h]
        push    eax
        call    @std@__1@#__sort3$r#__less$uiui~pui~$qpuipuipuir#__less$uiui~
        add     esp,byte 010h
        mov     dword [esp-0184h+01fch],eax
; Line 3981:         } 
L_24755:
; Line 3982:         } 
        mov     esi,dword [esp-0190h+01fch]
        mov     edx,esi
        mov     dword [esp-01e4h+01fch],ebx
        mov     ebx,esi
        mov     dword [esp-018ch+01fch],ebx
        mov     eax,dword [esp-0188h+01fch]
        mov     ecx,eax
        mov     ebx,dword [ebx]
        mov     eax,dword [eax]
        cmp     ebx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_24763
; Line 3992:         { 
; Line 3995:             while (true) 
        mov     eax,dword [esp-01e4h+01fch]
L_24767:
; Line 3996:             { 
; Line 3997:                 if (__i == --__j) 
        sub     eax,byte 04h
        mov     dword [esp-01e4h+01fch],eax
        cmp     esi,eax
        jne     L_24773
; Line 3998:                 { 
; Line 4001:                     ++__i;   
        mov     eax,dword [esp-018ch+01fch]
        add     eax,byte 04h
        mov     esi,eax
        mov     eax,dword [esp-0198h+01fch]
        mov     edi,edx
        sub     eax,byte 04h
        mov     ecx,eax
        mov     ebx,eax
        mov     edi,dword [edi]
        mov     eax,dword [eax]
        cmp     edi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_24777
; Line 4004:                     { 
; Line 4005:                         while (true) 
L_24781:
; Line 4006:                         { 
; Line 4007:                             if (__i == __j) 
        cmp     esi,ecx
        je      L_24710
L_24787:
        mov     edi,edx
        mov     eax,esi
        mov     edi,dword [edi]
        mov     eax,dword [eax]
        cmp     edi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_24792
; Line 4010:                             { 
; Line 4011:                                 swap(*__i, *__j); 
        mov     edx,esi
        mov     eax,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edi,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edi,dword [edi]
        mov     dword [esp-0168h+01fch],edi
        mov     edi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edi,dword [edi]
        mov     dword [edx],edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [esp-0168h+01fch]
        mov     dword [eax],edx
; Line 3718: } 
L_25090:
        inc     dword [esp-0184h+01fch]
        add     esi,byte 04h
; Line 4014:                                 break; 
        jmp     L_24782
L_24792:
        add     esi,byte 04h
; Line 4017:                         } 
L_24783:
        jmp     L_24781
L_24782:
; Line 4018:                     } 
L_24777:
        mov     dword [esp-01bch+01fch],ecx
        cmp     esi,dword [esp-01bch+01fch]
        je      L_24710
L_24805:
L_24810:
; Line 4023:                     { 
; Line 4024:                         while (!__comp(*__first, *__i)) 
        mov     edi,dword [esp-0190h+01fch]
        mov     ecx,edi
        mov     eax,esi
        mov     edx,esi
        mov     edi,dword [edi]
        mov     eax,dword [eax]
        cmp     edi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_24817
L_24816:
        mov     eax,edx
        add     eax,byte 04h
        mov     esi,eax
L_24818:
        mov     edi,ecx
        mov     eax,esi
        mov     edx,esi
        mov     edi,dword [edi]
        mov     eax,dword [eax]
        cmp     edi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_24816
L_24817:
        mov     ebp,ecx
        mov     eax,ebx
        sub     eax,byte 04h
        mov     edi,eax
        mov     ebx,eax
        mov     ebp,dword [ebp]
        mov     eax,dword [eax]
        cmp     ebp,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_24824
L_24823:
L_24825:
; Line 4026:                         while (__comp(*__first, *--__j)) 
        mov     ebp,ecx
        mov     eax,ebx
        sub     eax,byte 04h
        mov     edi,eax
        mov     ebx,eax
        mov     ebp,dword [ebp]
        mov     eax,dword [eax]
        cmp     ebp,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_24823
L_24824:
        cmp     esi,edi
        jge     L_24811
; Line 4029:                             break; 
L_24830:
        mov     ecx,edx
        mov     eax,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     esi,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [esi]
        mov     dword [esp-0168h+01fch],esi
        mov     esi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [esi]
        mov     dword [ecx],esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0168h+01fch]
        mov     dword [eax],ecx
; Line 3718: } 
L_25218:
        inc     dword [esp-0184h+01fch]
        mov     eax,edx
        add     eax,byte 04h
        mov     esi,eax
; Line 4033:                     } 
L_24812:
; Line 4022:                     while (true) 
        jmp     L_24810
L_24811:
        mov     eax,edx
        mov     dword [esp-0190h+01fch],eax
        jmp     L_24718
L_24773:
        mov     eax,dword [esp-01e4h+01fch]
        mov     ebx,eax
        mov     dword [esp-01d0h+01fch],ecx
        mov     edi,dword [ebx]
        mov     ebx,dword [esp-01d0h+01fch]
        mov     dword [esp-01a8h+01fch],ebx
        mov     ebx,dword [ebx]
        cmp     edi,ebx
        setc    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_24841
; Line 4041:                 { 
; Line 4042:                     swap(*__i, *__j); 
        mov     edx,dword [esp-018ch+01fch]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ebx,dword [ebx]
        mov     dword [esp-0168h+01fch],ebx
        mov     ebx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ebx,dword [ebx]
        mov     dword [edx],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [esp-0168h+01fch]
        mov     dword [esp-01ech+01fch],eax
        mov     dword [eax],edx
; Line 3718: } 
L_25298:
        inc     dword [esp-0184h+01fch]
; Line 4044:                     break;   
        jmp     L_24768
L_24841:
; Line 4046:             } 
L_24769:
        jmp     L_24767
L_24768:
; Line 4047:         } 
L_24763:
        mov     eax,dword [esp-018ch+01fch]
        add     eax,byte 04h
        mov     ebx,eax
        cmp     ebx,dword [esp-01e4h+01fch]
        jge     L_24854
; Line 4053:         { 
; Line 4056:             while (true) 
L_24858:
; Line 4057:             { 
; Line 4059:                 while (__comp(*__i, *__m)) 
        mov     esi,ebx
        mov     edx,ebx
        mov     eax,ecx
        mov     esi,dword [esi]
        mov     eax,dword [eax]
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_24865
L_24864:
        mov     eax,edx
        add     eax,byte 04h
        mov     ebx,eax
L_24866:
        mov     esi,ebx
        mov     edx,ebx
        mov     eax,ecx
        mov     esi,dword [esi]
        mov     eax,dword [eax]
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_24864
L_24865:
        sub     dword [esp-01e4h+01fch],byte 04h
        mov     edi,dword [esp-01e4h+01fch]
        mov     esi,edi
        mov     eax,ecx
        mov     dword [esp-01cch+01fch],eax
        mov     edi,dword [edi]
        mov     eax,dword [esp-01cch+01fch]
        mov     dword [esp-01a4h+01fch],eax
        mov     eax,dword [eax]
        cmp     edi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_24872
L_24871:
L_24873:
; Line 4062:                 while (!__comp(*--__j, *__m)) 
        mov     eax,esi
        sub     eax,byte 04h
        mov     dword [esp-01e4h+01fch],eax
        mov     edi,eax
        mov     esi,eax
        mov     eax,ecx
        mov     dword [esp-01c8h+01fch],eax
        mov     edi,dword [edi]
        mov     eax,dword [esp-01c8h+01fch]
        mov     dword [esp-01a0h+01fch],eax
        mov     eax,dword [eax]
        cmp     edi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_24871
L_24872:
        cmp     ebx,dword [esp-01e4h+01fch]
        jg      L_24859
; Line 4065:                     break; 
L_24878:
        mov     ecx,edx
        mov     eax,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edi,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edi,dword [edi]
        mov     dword [esp-0168h+01fch],edi
        mov     edi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edi,dword [edi]
        mov     dword [ecx],edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0168h+01fch]
        mov     dword [eax],ecx
; Line 3718: } 
L_25426:
        inc     dword [esp-0184h+01fch]
        mov     eax,ebx
        cmp     dword [esp-0188h+01fch],eax
        jne     L_24883
        mov     eax,esi
        mov     dword [esp-0188h+01fch],eax
L_24883:
        mov     eax,edx
        add     eax,byte 04h
        mov     ebx,eax
; Line 4073:             } 
L_24860:
        mov     ecx,dword [esp-0188h+01fch]
        jmp     L_24858
L_24859:
; Line 4074:         } 
L_24854:
        cmp     ebx,dword [esp-0188h+01fch]
        je      L_24894
        mov     esi,ecx
        mov     eax,ebx
        mov     edx,ebx
        mov     esi,dword [esi]
        mov     edx,dword [edx]
        cmp     esi,edx
        setc    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_24894
; Line 4077:         { 
; Line 4078:             swap(*__i, *__m); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [esp-0168h+01fch],edx
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [esp-01b4h+01fch],eax
        mov     dword [eax],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [esp-0168h+01fch]
        mov     dword [esp-01b8h+01fch],ecx
        mov     eax,ecx
        mov     dword [eax],edx
; Line 3718: } 
L_25506:
        inc     dword [esp-0184h+01fch]
; Line 4080:         } 
L_24894:
        cmp     dword [esp-0184h+01fch],byte 00h
        jne     L_24901
; Line 4084:         { 
; Line 4085:             bool __fs = _VSTD::__insertion_sort_incomplete<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$uiui~pui~$qpuipuir#__less$uiui~
        add     esp,byte 0ch
        mov     byte [esp-0191h+01fch],al
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,dword [esp-0198h+0200h]
        push    eax
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$uiui~pui~$qpuipuir#__less$uiui~
        add     esp,byte 0ch
        and     al,al
        je      L_24905
; Line 4087:             { 
; Line 4088:                 if (__fs) 
        cmp     byte [esp-0191h+01fch],byte 00h
        jne     L_24710
L_24909:
        mov     eax,ebx
        mov     dword [esp-0198h+01fch],eax
; Line 4091:                 continue; 
        jmp     L_24712
L_24905:
; Line 4093:             else 
; Line 4094:             { 
; Line 4095:                 if (__fs) 
        cmp     byte [esp-0191h+01fch],byte 00h
        je      L_24919
; Line 4096:                 { 
; Line 4097:                     __first = ++__i; 
        mov     eax,ebx
        add     eax,byte 04h
        mov     dword [esp-0190h+01fch],eax
; Line 4098:                     continue; 
        jmp     L_24712
L_24919:
; Line 4100:             } 
L_24915:
; Line 4101:         } 
L_24901:
        mov     eax,dword [esp-0198h+01fch]
        mov     ecx,ebx
        sub     eax,ecx
        mov     edx,eax
        sar     edx,02h
        mov     eax,dword [esp-0190h+01fch]
        sub     eax,ecx
        neg     eax
        imul    eax,byte 01h
        sar     eax,02h
        cmp     eax,edx
        jge     L_24932
; Line 4104:         { 
; Line 4105:             _VSTD::__sort<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        push    eax
        call    @std@__1@#__sort$r#__less$uiui~pui~$qpuipuir#__less$uiui~
        add     esp,byte 0ch
        mov     eax,ebx
        add     eax,byte 04h
        mov     dword [esp-0190h+01fch],eax
; Line 4108:         } 
        jmp     L_24937
L_24932:
; Line 4109:         else 
; Line 4110:         { 
; Line 4111:             _VSTD::__sort<_Compare>(__i+1, __last, __comp); 
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,dword [esp-0198h+0200h]
        push    eax
        mov     eax,ecx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__sort$r#__less$uiui~pui~$qpuipuir#__less$uiui~
        add     esp,byte 0ch
        mov     eax,ebx
        mov     dword [esp-0198h+01fch],eax
; Line 4114:         } 
L_24937:
; Line 4115:     } 
L_24714:
; Line 3934:     while (true) 
        jmp     L_24712
; Line 4116: } 
L_24713:
L_24710:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,01ech
        ret
section code
section code
        section vsc@std@__1@#__sort3$r#__less$ll~pl~$qplplplr#__less$ll~ virtual
        [bits 32]
@std@__1@#__sort3$r#__less$ll~pl~$qplplplr#__less$ll~:
; Line 3689: unsigned 
        add     esp,0fffffed0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_25560:
        mov     edx,dword [esp+0ch+0140h]
        mov     esi,dword [esp+08h+0140h]
        mov     edi,dword [esp+04h+0140h]
; Line 3692:     unsigned __r = 0; 
        xor     ebp,ebp
        mov     ecx,esi
        mov     eax,edi
        mov     ebx,dword [ecx]
        mov     dword [esp-0128h+0140h],ebx
        mov     ebx,dword [edi]
        cmp     dword [esp-0128h+0140h],ebx
        setl    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        jne     L_25563
; Line 3694:     { 
; Line 3695:         if (!__c(*__z, *__y))       
        mov     dword [esp-0f4h+0140h],ecx
        mov     edi,dword [edx]
        mov     ebx,dword [esp-0f4h+0140h]
        mov     ebx,dword [ebx]
        cmp     edi,ebx
        setl    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        jne     L_25567
        mov     eax,ebp
        jmp     L_25561
L_25567:
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ebx,dword [ecx]
        mov     dword [esp-0d8h+0140h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ebx,dword [edx]
        mov     dword [ecx],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0d8h+0140h]
        mov     dword [edx],ecx
; Line 3718: } 
L_25643:
        mov     edx,01h
        mov     ebx,dword [esi]
        mov     ecx,dword [eax]
        cmp     ebx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_25572
; Line 3701:         { 
; Line 3702:             swap(*__x, *__y);       
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     dword [esp-0d8h+0140h],ecx
        mov     dword [esp-0130h+0140h],esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0130h+0140h]
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0d8h+0140h]
        mov     dword [esi],eax
; Line 3718: } 
L_25723:
        mov     edx,02h
; Line 3704:         } 
L_25572:
        mov     eax,edx
        jmp     L_25561
; Line 3706:     } 
L_25563:
        mov     ebx,dword [edx]
        cmp     ebx,dword [ecx]
        setl    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_25582
; Line 3708:     { 
; Line 3709:         swap(*__x, *__z);           
        mov     dword [esp-012ch+0140h],eax
        mov     dword [esp-0120h+0140h],edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-012ch+0140h]
        mov     dword [esp-0124h+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0124h+0140h]
        mov     eax,dword [eax]
        mov     dword [esp-0d8h+0140h],eax
        mov     eax,dword [esp-0120h+0140h]
        mov     dword [esp-0118h+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0118h+0140h]
        mov     ecx,dword [eax]
        mov     eax,dword [esp-012ch+0140h]
        mov     dword [eax],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0d8h+0140h]
        mov     eax,dword [esp-0120h+0140h]
        mov     dword [eax],ecx
; Line 3718: } 
L_25803:
        mov     eax,01h
        jmp     L_25561
; Line 3712:     } 
L_25582:
        mov     dword [esp-011ch+0140h],eax
        mov     dword [esp-0104h+0140h],ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-011ch+0140h]
        mov     dword [esp-0114h+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0114h+0140h]
        mov     eax,dword [eax]
        mov     dword [esp-0d8h+0140h],eax
        mov     eax,dword [esp-0104h+0140h]
        mov     dword [esp-0f8h+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0f8h+0140h]
        mov     ecx,dword [eax]
        mov     eax,dword [esp-011ch+0140h]
        mov     dword [eax],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0d8h+0140h]
        mov     eax,dword [esp-0104h+0140h]
        mov     dword [eax],ecx
; Line 3718: } 
L_25867:
        mov     ecx,01h
        mov     dword [esp-010ch+0140h],edx
        mov     dword [esp-0110h+0140h],esi
        mov     eax,esi
        mov     dword [esp-0108h+0140h],eax
        mov     eax,dword [esp-010ch+0140h]
        mov     ebx,dword [eax]
        mov     eax,dword [esp-0108h+0140h]
        mov     eax,dword [eax]
        cmp     ebx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_25589
; Line 3716:     { 
; Line 3717:         swap(*__y, *__z);           
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-0110h+0140h]
        mov     dword [esp-0fch+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0fch+0140h]
        mov     eax,dword [eax]
        mov     dword [esp-0d8h+0140h],eax
        mov     dword [esp-0100h+0140h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0100h+0140h]
        mov     ecx,dword [eax]
        mov     eax,dword [esp-0110h+0140h]
        mov     dword [eax],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0d8h+0140h]
        mov     dword [edx],eax
; Line 3718: } 
L_25947:
        mov     ecx,02h
; Line 3719:     } 
L_25589:
        mov     eax,ecx
; Line 3721: }                                   
L_25561:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0130h
        ret
section code
section code
        section vsc@std@__1@#__sort4$r#__less$ll~pl~$qplplplplr#__less$ll~ virtual
        [bits 32]
@std@__1@#__sort4$r#__less$ll~pl~$qplplplplr#__less$ll~:
; Line 3726: unsigned 
        add     esp,0ffffff6ch
        push    ebx
        push    ebp
        push    esi
        push    edi
L_26001:
        mov     ecx,dword [esp+014h+0a4h]
        mov     esi,dword [esp+010h+0a4h]
        mov     edi,dword [esp+0ch+0a4h]
        mov     eax,dword [esp+08h+0a4h]
        mov     dword [esp-094h+0a4h],eax
        mov     ebx,dword [esp+04h+0a4h]
; Line 3730:     unsigned __r = __sort3<_Compare>(__x1, __x2, __x3, __c); 
        push    ecx
        mov     eax,edi
        push    eax
        mov     eax,dword [esp-094h+0ach]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#__sort3$r#__less$ll~pl~$qplplplr#__less$ll~
        add     esp,byte 010h
        mov     ebp,eax
        mov     ecx,esi
        mov     edx,esi
        mov     eax,edi
        mov     esi,edi
        mov     edx,dword [edx]
        mov     eax,dword [eax]
        cmp     edx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_26004
; Line 3732:     { 
; Line 3733:         swap(*__x3, *__x4); 
        mov     edx,esi
        mov     eax,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [esp-078h+0a4h],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     dword [edx],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-078h+0a4h]
        mov     dword [eax],ecx
; Line 3718: } 
L_26056:
        inc     ebp
        mov     eax,edi
        mov     ecx,dword [esp-094h+0a4h]
        mov     edx,ecx
        mov     esi,dword [eax]
        mov     edx,dword [edx]
        cmp     esi,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_26008
; Line 3736:         { 
; Line 3737:             swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-078h+0a4h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-078h+0a4h]
        mov     dword [eax],ecx
; Line 3718: } 
L_26136:
        inc     ebp
        mov     eax,dword [esp-094h+0a4h]
        mov     ecx,ebx
        mov     ebx,dword [eax]
        mov     edx,dword [ecx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_26012
; Line 3740:             { 
; Line 3741:                 swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-078h+0a4h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-078h+0a4h]
        mov     dword [eax],ecx
; Line 3718: } 
L_26216:
        inc     ebp
; Line 3743:             } 
L_26012:
; Line 3744:         } 
L_26008:
; Line 3745:     } 
L_26004:
        mov     eax,ebp
; Line 3747: } 
L_26002:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,094h
        ret
section code
section code
        section vsc@std@__1@#__sort5$r#__less$ll~pl~$qplplplplplr#__less$ll~ virtual
        [bits 32]
@std@__1@#__sort5$r#__less$ll~pl~$qplplplplplr#__less$ll~:
; Line 3752: _LIBCPP_HIDDEN 
        add     esp,0ffffff34h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_26270:
        mov     ecx,dword [esp+018h+0dch]
        mov     ebx,dword [esp+014h+0dch]
        mov     eax,dword [esp+010h+0dch]
        mov     dword [esp-0c8h+0dch],eax
        mov     eax,dword [esp+0ch+0dch]
        mov     dword [esp-0c4h+0dch],eax
        mov     edi,dword [esp+08h+0dch]
        mov     esi,dword [esp+04h+0dch]
; Line 3757:     unsigned __r = __sort4<_Compare>(__x1, __x2, __x3, __x4, __c); 
        push    ecx
        mov     eax,dword [esp-0c8h+0e0h]
        push    eax
        mov     eax,dword [esp-0c4h+0e4h]
        push    eax
        mov     eax,edi
        push    eax
        mov     eax,esi
        push    eax
        call    @std@__1@#__sort4$r#__less$ll~pl~$qplplplplr#__less$ll~
        add     esp,byte 014h
        mov     ebp,eax
        mov     edx,ebx
        mov     ecx,ebx
        mov     eax,dword [esp-0c8h+0dch]
        mov     ebx,eax
        mov     ecx,dword [ecx]
        mov     eax,dword [eax]
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_26273
; Line 3759:     { 
; Line 3760:         swap(*__x4, *__x5); 
        mov     ecx,ebx
        mov     eax,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [esp-0a8h+0dch],edx
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0a8h+0dch]
        mov     dword [eax],ecx
; Line 3718: } 
L_26332:
        inc     ebp
        mov     ebx,dword [esp-0c8h+0dch]
        mov     ecx,ebx
        mov     eax,dword [esp-0c4h+0dch]
        mov     edx,eax
        mov     ebx,dword [ebx]
        mov     eax,dword [eax]
        cmp     ebx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_26277
; Line 3763:         { 
; Line 3764:             swap(*__x3, *__x4); 
        mov     eax,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [esp-0a8h+0dch],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     dword [edx],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0a8h+0dch]
        mov     dword [eax],ecx
; Line 3718: } 
L_26412:
        inc     ebp
        mov     eax,dword [esp-0c4h+0dch]
        mov     ecx,edi
        mov     edx,edi
        mov     dword [esp-0cch+0dch],edx
        mov     ebx,dword [eax]
        mov     edx,dword [esp-0cch+0dch]
        mov     edx,dword [edx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_26281
; Line 3767:             { 
; Line 3768:                 swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-0a8h+0dch],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0a8h+0dch]
        mov     dword [eax],ecx
; Line 3718: } 
L_26492:
        inc     ebp
        mov     eax,edi
        mov     ecx,esi
        mov     ebx,dword [eax]
        mov     edx,dword [ecx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_26285
; Line 3771:                 { 
; Line 3772:                     swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-0a8h+0dch],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0a8h+0dch]
        mov     dword [eax],ecx
; Line 3718: } 
L_26572:
        inc     ebp
; Line 3774:                 } 
L_26285:
; Line 3775:             } 
L_26281:
; Line 3776:         } 
L_26277:
; Line 3777:     } 
L_26273:
        mov     eax,ebp
; Line 3779: } 
L_26271:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0cch
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_3$r#__less$ll~pl~$qplplr#__less$ll~ virtual
        [bits 32]
@std@__1@#__insertion_sort_3$r#__less$ll~pl~$qplplr#__less$ll~:
; Line 3817: void 
        add     esp,byte 0ffffffcch
        push    ebx
        push    ebp
        push    esi
        push    edi
L_26626:
        mov     edx,dword [esp+0ch+044h]
        mov     esi,dword [esp+08h+044h]
        mov     edi,dword [esp+04h+044h]
; Line 3820:     typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type; 
        mov     ecx,edi
        mov     eax,edi
        add     eax,byte 08h
        mov     ebx,eax
        push    edx
        mov     eax,ebx
        push    eax
        mov     eax,edi
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ll~pl~$qplplplr#__less$ll~
        add     esp,byte 010h
; Line 3823:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     ecx,ebx
        add     ecx,byte 04h
        cmp     ecx,esi
        je      L_26631
L_26629:
; Line 3824:     { 
; Line 3825:         if (__comp(*__i, *__j)) 
        mov     edx,ecx
        mov     eax,ebx
        mov     ecx,dword [ecx]
        cmp     ecx,dword [ebx]
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_26636
; Line 3826:         { 
; Line 3827:             value_type __t(_VSTD::move(*__i)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [esp-04h+044h],ecx
        mov     ebx,eax
        mov     eax,edx
; Line 3831:             { 
L_26640:
; Line 3832:                 *__j = _VSTD::move(*__k); 
        mov     ecx,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
        mov     eax,ebx
; Line 3834:             } while (__j != __first && __comp(__t, *--__k)); 
L_26642:
        cmp     eax,edi
        je      L_26705
        sub     ebx,byte 04h
        mov     ecx,ebx
        mov     ebp,dword [esp-04h+044h]
        mov     ecx,dword [ecx]
        cmp     ebp,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_26640
L_26705:
L_26641:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-04h+044h]
        mov     dword [eax],ecx
; Line 3836:         } 
L_26636:
        mov     ebx,edx
; Line 3838:     } 
L_26632:
        mov     eax,edx
        add     eax,byte 04h
        mov     ecx,eax
L_26630:
        cmp     ecx,esi
        jne     L_26629
L_26631:
; Line 3839: } 
L_26627:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_incomplete$r#__less$ll~pl~$qplplr#__less$ll~ virtual
        [bits 32]
@std@__1@#__insertion_sort_incomplete$r#__less$ll~pl~$qplplr#__less$ll~:
; Line 3842: bool 
        add     esp,byte 0ffffff94h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_26741:
        mov     edx,dword [esp+0ch+07ch]
        mov     eax,dword [esp+08h+07ch]
        mov     dword [esp-068h+07ch],eax
        mov     ebx,dword [esp+04h+07ch]
; Line 3845:     switch (__last - __first) 
        mov     eax,dword [esp-068h+07ch]
        mov     ecx,ebx
        mov     esi,eax
        sub     esi,ecx
        sar     esi,02h
        mov     dword [esp-06ch+07ch],eax
        cmp     esi,byte 06h
        jnc     L_26765
        push    esi
        mov     esi,dword [esi*4+L_65621]
        xchg    esi,dword [esp]
        ret
        times $$-$ & 3 nop
L_65621:
        dd      L_26747
        dd      L_26749
        dd      L_26751
        dd      L_26758
        dd      L_26760
        dd      L_26762
; Line 3846:     { 
; Line 3847:     case 0: 
L_26747:
L_26749:
        mov     al,01h
        jmp     L_26742
L_26751:
        mov     eax,dword [esp-06ch+07ch]
        sub     eax,byte 04h
        mov     ebx,dword [eax]
        mov     edx,dword [ecx]
        cmp     ebx,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_26753
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-01ch+07ch],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-01ch+07ch]
        mov     dword [eax],ecx
; Line 3718: } 
L_26829:
L_26753:
        mov     al,01h
        jmp     L_26742
L_26758:
        push    edx
        mov     eax,dword [esp-06ch+080h]
        sub     eax,byte 04h
        push    eax
        mov     eax,ebx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ll~pl~$qplplplr#__less$ll~
        add     esp,byte 010h
        mov     al,01h
        jmp     L_26742
L_26760:
        push    edx
        mov     eax,dword [esp-06ch+080h]
        sub     eax,byte 04h
        push    eax
        mov     eax,ebx
        mov     edx,ecx
        add     edx,byte 08h
        push    edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$ll~pl~$qplplplplr#__less$ll~
        add     esp,byte 014h
        mov     al,01h
        jmp     L_26742
L_26762:
        push    edx
        mov     eax,dword [esp-06ch+080h]
        sub     eax,byte 04h
        push    eax
        mov     eax,ebx
        mov     edx,ecx
        add     edx,byte 0ch
        push    edx
        mov     edx,ecx
        add     edx,byte 08h
        push    edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$ll~pl~$qplplplplplr#__less$ll~
        add     esp,byte 018h
        mov     al,01h
        jmp     L_26742
; Line 3863:     } 
L_26765:
L_26744:
        mov     eax,ecx
        add     eax,byte 08h
        mov     esi,eax
        push    edx
        mov     eax,esi
        push    eax
        mov     eax,ebx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ll~pl~$qplplplr#__less$ll~
        add     esp,byte 010h
        xor     edi,edi
; Line 3869:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     eax,esi
        add     eax,byte 04h
        cmp     eax,dword [esp-068h+07ch]
        je      L_26769
L_26767:
; Line 3870:     { 
; Line 3871:         if (__comp(*__i, *__j)) 
        mov     edx,eax
        mov     ecx,esi
        mov     eax,dword [eax]
        cmp     eax,dword [esi]
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_26774
; Line 3872:         { 
; Line 3873:             value_type __t(_VSTD::move(*__i)); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [eax]
        mov     dword [esp-04h+07ch],eax
        mov     esi,ecx
        mov     eax,edx
; Line 3877:             { 
L_26778:
; Line 3878:                 *__j = _VSTD::move(*__k); 
        mov     ecx,esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
        mov     eax,esi
; Line 3880:             } while (__j != __first && __comp(__t, *--__k)); 
L_26780:
        cmp     eax,ebx
        je      L_26928
        sub     esi,byte 04h
        mov     ecx,esi
        mov     ebp,dword [esp-04h+07ch]
        mov     ecx,dword [ecx]
        cmp     ebp,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_26778
L_26928:
L_26779:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-04h+07ch]
        mov     dword [eax],ecx
        inc     edi
        cmp     edi,byte 08h
        jne     L_26787
        mov     ecx,edx
        add     ecx,byte 04h
        mov     eax,dword [esp-06ch+07ch]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
        jmp     L_26742
L_26787:
; Line 3884:         } 
L_26774:
        mov     esi,edx
; Line 3886:     } 
L_26770:
        mov     eax,edx
        add     eax,byte 04h
L_26768:
        cmp     eax,dword [esp-068h+07ch]
        jne     L_26767
L_26769:
        mov     al,01h
; Line 3888: } 
L_26742:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 06ch
        ret
section code
section code
        section vsc@std@__1@#__sort$r#__less$ll~pl~$qplplr#__less$ll~ virtual
        [bits 32]
@std@__1@#__sort$r#__less$ll~pl~$qplplr#__less$ll~:
; Line 3926: void 
        add     esp,0fffffe14h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_26964:
        mov     eax,dword [esp+0ch+01fch]
        mov     dword [esp-019ch+01fch],eax
        mov     eax,dword [esp+08h+01fch]
        mov     dword [esp-0198h+01fch],eax
        mov     eax,dword [esp+04h+01fch]
        mov     dword [esp-0190h+01fch],eax
; Line 3930:     typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type; 
L_26967:
; Line 3935:     { 
; Line 3936:     __restart: 
L_26973:
        mov     eax,dword [esp-0198h+01fch]
        mov     edx,dword [esp-0190h+01fch]
        mov     ecx,eax
        sub     ecx,edx
        sar     ecx,02h
        mov     ebx,ecx
        and     ebx,ebx
        jl      L_26995
        cmp     ebx,byte 06h
        jge     L_26995
        push    ebx
        mov     ebx,dword [ebx*4+L_65626]
        xchg    ebx,dword [esp]
        ret
        times $$-$ & 3 nop
L_65626:
        dd      L_26977
        dd      L_26979
        dd      L_26981
        dd      L_26988
        dd      L_26990
        dd      L_26992
; Line 3939:         { 
; Line 3940:         case 0: 
L_26977:
L_26979:
        jmp     L_26965
L_26981:
        sub     eax,byte 04h
        mov     dword [esp-01d8h+01fch],eax
        mov     dword [esp-01e8h+01fch],edx
        mov     ecx,dword [esp-01d8h+01fch]
        mov     ebx,dword [ecx]
        mov     ecx,dword [esp-01e8h+01fch]
        mov     ecx,dword [ecx]
        cmp     ebx,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_26965
        mov     dword [esp-01d4h+01fch],edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,dword [esp-01d4h+01fch]
        mov     dword [esp-01b0h+01fch],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-01b0h+01fch]
        mov     ecx,dword [ecx]
        mov     dword [esp-0168h+01fch],ecx
        mov     dword [esp-01ach+01fch],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-01ach+01fch]
        mov     edx,dword [ecx]
        mov     ecx,dword [esp-01d4h+01fch]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0168h+01fch]
        mov     dword [eax],ecx
; Line 3718: } 
L_27233:
L_26983:
        jmp     L_26965
L_26988:
        mov     ecx,dword [esp-019ch+01fch]
        push    ecx
        sub     eax,byte 04h
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        mov     ecx,edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ll~pl~$qplplplr#__less$ll~
        add     esp,byte 010h
        jmp     L_26965
L_26990:
        mov     ecx,dword [esp-019ch+01fch]
        push    ecx
        sub     eax,byte 04h
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        mov     ecx,edx
        add     ecx,byte 08h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$ll~pl~$qplplplplr#__less$ll~
        add     esp,byte 014h
        jmp     L_26965
L_26992:
        mov     ecx,dword [esp-019ch+01fch]
        push    ecx
        sub     eax,byte 04h
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        mov     ecx,edx
        add     ecx,byte 0ch
        push    ecx
        mov     ecx,edx
        add     ecx,byte 08h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$ll~pl~$qplplplplplr#__less$ll~
        add     esp,byte 018h
        jmp     L_26965
; Line 3956:         } 
L_26995:
L_26974:
        cmp     ecx,byte 06h
        jg      L_26997
; Line 3958:         { 
; Line 3959:             _VSTD::__insertion_sort_3<_Compare>(__first, __last, __comp); 
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,dword [esp-0198h+0200h]
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        push    eax
        call    @std@__1@#__insertion_sort_3$r#__less$ll~pl~$qplplr#__less$ll~
        add     esp,byte 0ch
        jmp     L_26965
; Line 3961:         } 
L_26997:
        mov     esi,edx
        mov     dword [esp-01c0h+01fch],eax
        sub     eax,byte 04h
        mov     ebx,eax
; Line 3967:         { 
; Line 3968:         difference_type __delta; 
        cmp     ecx,03e8h
        jl      L_27005
; Line 3970:         { 
; Line 3971:             __delta = __len/2; 
        mov     eax,ecx
        shr     eax,01fh
        add     eax,ecx
        sar     eax,01h
        mov     dword [esp-01dch+01fch],esi
        mov     esi,eax
        shl     esi,02h
        mov     ecx,dword [esp-01dch+01fch]
        add     ecx,esi
        mov     dword [esp-0188h+01fch],ecx
        mov     ecx,eax
        shr     ecx,01fh
        add     eax,ecx
        sar     eax,01h
        mov     ecx,dword [esp-019ch+01fch]
        push    ecx
        mov     ecx,ebx
        push    ecx
        mov     esi,dword [esp-0188h+0204h]
        mov     ecx,eax
        shl     ecx,02h
        mov     eax,esi
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0188h+0208h]
        push    eax
        mov     eax,edx
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0190h+0210h]
        push    eax
        call    @std@__1@#__sort5$r#__less$ll~pl~$qplplplplplr#__less$ll~
        add     esp,byte 018h
        mov     dword [esp-0184h+01fch],eax
; Line 3975:         } 
        jmp     L_27010
L_27005:
; Line 3976:         else 
; Line 3977:         { 
; Line 3978:             __delta = __len/2; 
        mov     dword [esp-01e0h+01fch],ecx
        shr     ecx,01fh
        mov     eax,dword [esp-01e0h+01fch]
        add     eax,ecx
        sar     eax,01h
        mov     dword [esp-01c4h+01fch],esi
        mov     ecx,eax
        shl     ecx,02h
        mov     eax,dword [esp-01c4h+01fch]
        add     eax,ecx
        mov     dword [esp-0188h+01fch],eax
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0188h+0204h]
        push    eax
        mov     eax,dword [esp-0190h+0208h]
        push    eax
        call    @std@__1@#__sort3$r#__less$ll~pl~$qplplplr#__less$ll~
        add     esp,byte 010h
        mov     dword [esp-0184h+01fch],eax
; Line 3981:         } 
L_27010:
; Line 3982:         } 
        mov     esi,dword [esp-0190h+01fch]
        mov     edx,esi
        mov     dword [esp-01e4h+01fch],ebx
        mov     ebx,esi
        mov     dword [esp-018ch+01fch],ebx
        mov     eax,dword [esp-0188h+01fch]
        mov     ecx,eax
        mov     ebx,dword [ebx]
        mov     eax,dword [eax]
        cmp     ebx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_27018
; Line 3992:         { 
; Line 3995:             while (true) 
        mov     eax,dword [esp-01e4h+01fch]
L_27022:
; Line 3996:             { 
; Line 3997:                 if (__i == --__j) 
        sub     eax,byte 04h
        mov     dword [esp-01e4h+01fch],eax
        cmp     esi,eax
        jne     L_27028
; Line 3998:                 { 
; Line 4001:                     ++__i;   
        mov     eax,dword [esp-018ch+01fch]
        add     eax,byte 04h
        mov     esi,eax
        mov     eax,dword [esp-0198h+01fch]
        mov     edi,edx
        sub     eax,byte 04h
        mov     ecx,eax
        mov     ebx,eax
        mov     edi,dword [edi]
        mov     eax,dword [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_27032
; Line 4004:                     { 
; Line 4005:                         while (true) 
L_27036:
; Line 4006:                         { 
; Line 4007:                             if (__i == __j) 
        cmp     esi,ecx
        je      L_26965
L_27042:
        mov     edi,edx
        mov     eax,esi
        mov     edi,dword [edi]
        mov     eax,dword [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_27047
; Line 4010:                             { 
; Line 4011:                                 swap(*__i, *__j); 
        mov     edx,esi
        mov     eax,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edi,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edi,dword [edi]
        mov     dword [esp-0168h+01fch],edi
        mov     edi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edi,dword [edi]
        mov     dword [edx],edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [esp-0168h+01fch]
        mov     dword [eax],edx
; Line 3718: } 
L_27345:
        inc     dword [esp-0184h+01fch]
        add     esi,byte 04h
; Line 4014:                                 break; 
        jmp     L_27037
L_27047:
        add     esi,byte 04h
; Line 4017:                         } 
L_27038:
        jmp     L_27036
L_27037:
; Line 4018:                     } 
L_27032:
        mov     dword [esp-01bch+01fch],ecx
        cmp     esi,dword [esp-01bch+01fch]
        je      L_26965
L_27060:
L_27065:
; Line 4023:                     { 
; Line 4024:                         while (!__comp(*__first, *__i)) 
        mov     edi,dword [esp-0190h+01fch]
        mov     ecx,edi
        mov     eax,esi
        mov     edx,esi
        mov     edi,dword [edi]
        mov     eax,dword [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_27072
L_27071:
        mov     eax,edx
        add     eax,byte 04h
        mov     esi,eax
L_27073:
        mov     edi,ecx
        mov     eax,esi
        mov     edx,esi
        mov     edi,dword [edi]
        mov     eax,dword [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_27071
L_27072:
        mov     ebp,ecx
        mov     eax,ebx
        sub     eax,byte 04h
        mov     edi,eax
        mov     ebx,eax
        mov     ebp,dword [ebp]
        mov     eax,dword [eax]
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_27079
L_27078:
L_27080:
; Line 4026:                         while (__comp(*__first, *--__j)) 
        mov     ebp,ecx
        mov     eax,ebx
        sub     eax,byte 04h
        mov     edi,eax
        mov     ebx,eax
        mov     ebp,dword [ebp]
        mov     eax,dword [eax]
        cmp     ebp,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_27078
L_27079:
        cmp     esi,edi
        jge     L_27066
; Line 4029:                             break; 
L_27085:
        mov     ecx,edx
        mov     eax,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     esi,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [esi]
        mov     dword [esp-0168h+01fch],esi
        mov     esi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [esi]
        mov     dword [ecx],esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0168h+01fch]
        mov     dword [eax],ecx
; Line 3718: } 
L_27473:
        inc     dword [esp-0184h+01fch]
        mov     eax,edx
        add     eax,byte 04h
        mov     esi,eax
; Line 4033:                     } 
L_27067:
; Line 4022:                     while (true) 
        jmp     L_27065
L_27066:
        mov     eax,edx
        mov     dword [esp-0190h+01fch],eax
        jmp     L_26973
L_27028:
        mov     eax,dword [esp-01e4h+01fch]
        mov     ebx,eax
        mov     dword [esp-01d0h+01fch],ecx
        mov     edi,dword [ebx]
        mov     ebx,dword [esp-01d0h+01fch]
        mov     dword [esp-01a8h+01fch],ebx
        mov     ebx,dword [ebx]
        cmp     edi,ebx
        setl    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_27096
; Line 4041:                 { 
; Line 4042:                     swap(*__i, *__j); 
        mov     edx,dword [esp-018ch+01fch]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ebx,dword [ebx]
        mov     dword [esp-0168h+01fch],ebx
        mov     ebx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ebx,dword [ebx]
        mov     dword [edx],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [esp-0168h+01fch]
        mov     dword [esp-01ech+01fch],eax
        mov     dword [eax],edx
; Line 3718: } 
L_27553:
        inc     dword [esp-0184h+01fch]
; Line 4044:                     break;   
        jmp     L_27023
L_27096:
; Line 4046:             } 
L_27024:
        jmp     L_27022
L_27023:
; Line 4047:         } 
L_27018:
        mov     eax,dword [esp-018ch+01fch]
        add     eax,byte 04h
        mov     ebx,eax
        cmp     ebx,dword [esp-01e4h+01fch]
        jge     L_27109
; Line 4053:         { 
; Line 4056:             while (true) 
L_27113:
; Line 4057:             { 
; Line 4059:                 while (__comp(*__i, *__m)) 
        mov     esi,ebx
        mov     edx,ebx
        mov     eax,ecx
        mov     esi,dword [esi]
        mov     eax,dword [eax]
        cmp     esi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_27120
L_27119:
        mov     eax,edx
        add     eax,byte 04h
        mov     ebx,eax
L_27121:
        mov     esi,ebx
        mov     edx,ebx
        mov     eax,ecx
        mov     esi,dword [esi]
        mov     eax,dword [eax]
        cmp     esi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_27119
L_27120:
        sub     dword [esp-01e4h+01fch],byte 04h
        mov     edi,dword [esp-01e4h+01fch]
        mov     esi,edi
        mov     eax,ecx
        mov     dword [esp-01cch+01fch],eax
        mov     edi,dword [edi]
        mov     eax,dword [esp-01cch+01fch]
        mov     dword [esp-01a4h+01fch],eax
        mov     eax,dword [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_27127
L_27126:
L_27128:
; Line 4062:                 while (!__comp(*--__j, *__m)) 
        mov     eax,esi
        sub     eax,byte 04h
        mov     dword [esp-01e4h+01fch],eax
        mov     edi,eax
        mov     esi,eax
        mov     eax,ecx
        mov     dword [esp-01c8h+01fch],eax
        mov     edi,dword [edi]
        mov     eax,dword [esp-01c8h+01fch]
        mov     dword [esp-01a0h+01fch],eax
        mov     eax,dword [eax]
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_27126
L_27127:
        cmp     ebx,dword [esp-01e4h+01fch]
        jg      L_27114
; Line 4065:                     break; 
L_27133:
        mov     ecx,edx
        mov     eax,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edi,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edi,dword [edi]
        mov     dword [esp-0168h+01fch],edi
        mov     edi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edi,dword [edi]
        mov     dword [ecx],edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0168h+01fch]
        mov     dword [eax],ecx
; Line 3718: } 
L_27681:
        inc     dword [esp-0184h+01fch]
        mov     eax,ebx
        cmp     dword [esp-0188h+01fch],eax
        jne     L_27138
        mov     eax,esi
        mov     dword [esp-0188h+01fch],eax
L_27138:
        mov     eax,edx
        add     eax,byte 04h
        mov     ebx,eax
; Line 4073:             } 
L_27115:
        mov     ecx,dword [esp-0188h+01fch]
        jmp     L_27113
L_27114:
; Line 4074:         } 
L_27109:
        cmp     ebx,dword [esp-0188h+01fch]
        je      L_27149
        mov     esi,ecx
        mov     eax,ebx
        mov     edx,ebx
        mov     esi,dword [esi]
        mov     edx,dword [edx]
        cmp     esi,edx
        setl    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_27149
; Line 4077:         { 
; Line 4078:             swap(*__i, *__m); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [esp-0168h+01fch],edx
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [esp-01b4h+01fch],eax
        mov     dword [eax],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [esp-0168h+01fch]
        mov     dword [esp-01b8h+01fch],ecx
        mov     eax,ecx
        mov     dword [eax],edx
; Line 3718: } 
L_27761:
        inc     dword [esp-0184h+01fch]
; Line 4080:         } 
L_27149:
        cmp     dword [esp-0184h+01fch],byte 00h
        jne     L_27156
; Line 4084:         { 
; Line 4085:             bool __fs = _VSTD::__insertion_sort_incomplete<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$ll~pl~$qplplr#__less$ll~
        add     esp,byte 0ch
        mov     byte [esp-0191h+01fch],al
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,dword [esp-0198h+0200h]
        push    eax
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$ll~pl~$qplplr#__less$ll~
        add     esp,byte 0ch
        and     al,al
        je      L_27160
; Line 4087:             { 
; Line 4088:                 if (__fs) 
        cmp     byte [esp-0191h+01fch],byte 00h
        jne     L_26965
L_27164:
        mov     eax,ebx
        mov     dword [esp-0198h+01fch],eax
; Line 4091:                 continue; 
        jmp     L_26967
L_27160:
; Line 4093:             else 
; Line 4094:             { 
; Line 4095:                 if (__fs) 
        cmp     byte [esp-0191h+01fch],byte 00h
        je      L_27174
; Line 4096:                 { 
; Line 4097:                     __first = ++__i; 
        mov     eax,ebx
        add     eax,byte 04h
        mov     dword [esp-0190h+01fch],eax
; Line 4098:                     continue; 
        jmp     L_26967
L_27174:
; Line 4100:             } 
L_27170:
; Line 4101:         } 
L_27156:
        mov     eax,dword [esp-0198h+01fch]
        mov     ecx,ebx
        sub     eax,ecx
        mov     edx,eax
        sar     edx,02h
        mov     eax,dword [esp-0190h+01fch]
        sub     eax,ecx
        neg     eax
        imul    eax,byte 01h
        sar     eax,02h
        cmp     eax,edx
        jge     L_27187
; Line 4104:         { 
; Line 4105:             _VSTD::__sort<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        push    eax
        call    @std@__1@#__sort$r#__less$ll~pl~$qplplr#__less$ll~
        add     esp,byte 0ch
        mov     eax,ebx
        add     eax,byte 04h
        mov     dword [esp-0190h+01fch],eax
; Line 4108:         } 
        jmp     L_27192
L_27187:
; Line 4109:         else 
; Line 4110:         { 
; Line 4111:             _VSTD::__sort<_Compare>(__i+1, __last, __comp); 
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,dword [esp-0198h+0200h]
        push    eax
        mov     eax,ecx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__sort$r#__less$ll~pl~$qplplr#__less$ll~
        add     esp,byte 0ch
        mov     eax,ebx
        mov     dword [esp-0198h+01fch],eax
; Line 4114:         } 
L_27192:
; Line 4115:     } 
L_26969:
; Line 3934:     while (true) 
        jmp     L_26967
; Line 4116: } 
L_26968:
L_26965:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,01ech
        ret
section code
section code
        section vsc@std@__1@#__sort3$r#__less$ulul~pul~$qpulpulpulr#__less$ulul~ virtual
        [bits 32]
@std@__1@#__sort3$r#__less$ulul~pul~$qpulpulpulr#__less$ulul~:
; Line 3689: unsigned 
        add     esp,0fffffed0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_27815:
        mov     edx,dword [esp+0ch+0140h]
        mov     esi,dword [esp+08h+0140h]
        mov     edi,dword [esp+04h+0140h]
; Line 3692:     unsigned __r = 0; 
        xor     ebp,ebp
        mov     ecx,esi
        mov     eax,edi
        mov     ebx,dword [ecx]
        mov     dword [esp-0128h+0140h],ebx
        mov     ebx,dword [edi]
        cmp     dword [esp-0128h+0140h],ebx
        setc    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        jne     L_27818
; Line 3694:     { 
; Line 3695:         if (!__c(*__z, *__y))       
        mov     dword [esp-0f4h+0140h],ecx
        mov     edi,dword [edx]
        mov     ebx,dword [esp-0f4h+0140h]
        mov     ebx,dword [ebx]
        cmp     edi,ebx
        setc    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        jne     L_27822
        mov     eax,ebp
        jmp     L_27816
L_27822:
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ebx,dword [ecx]
        mov     dword [esp-0d8h+0140h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ebx,dword [edx]
        mov     dword [ecx],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0d8h+0140h]
        mov     dword [edx],ecx
; Line 3718: } 
L_27898:
        mov     edx,01h
        mov     ebx,dword [esi]
        mov     ecx,dword [eax]
        cmp     ebx,ecx
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_27827
; Line 3701:         { 
; Line 3702:             swap(*__x, *__y);       
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     dword [esp-0d8h+0140h],ecx
        mov     dword [esp-0130h+0140h],esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0130h+0140h]
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0d8h+0140h]
        mov     dword [esi],eax
; Line 3718: } 
L_27978:
        mov     edx,02h
; Line 3704:         } 
L_27827:
        mov     eax,edx
        jmp     L_27816
; Line 3706:     } 
L_27818:
        mov     ebx,dword [edx]
        cmp     ebx,dword [ecx]
        setc    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_27837
; Line 3708:     { 
; Line 3709:         swap(*__x, *__z);           
        mov     dword [esp-012ch+0140h],eax
        mov     dword [esp-0120h+0140h],edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-012ch+0140h]
        mov     dword [esp-0124h+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0124h+0140h]
        mov     eax,dword [eax]
        mov     dword [esp-0d8h+0140h],eax
        mov     eax,dword [esp-0120h+0140h]
        mov     dword [esp-0118h+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0118h+0140h]
        mov     ecx,dword [eax]
        mov     eax,dword [esp-012ch+0140h]
        mov     dword [eax],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0d8h+0140h]
        mov     eax,dword [esp-0120h+0140h]
        mov     dword [eax],ecx
; Line 3718: } 
L_28058:
        mov     eax,01h
        jmp     L_27816
; Line 3712:     } 
L_27837:
        mov     dword [esp-011ch+0140h],eax
        mov     dword [esp-0104h+0140h],ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-011ch+0140h]
        mov     dword [esp-0114h+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0114h+0140h]
        mov     eax,dword [eax]
        mov     dword [esp-0d8h+0140h],eax
        mov     eax,dword [esp-0104h+0140h]
        mov     dword [esp-0f8h+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0f8h+0140h]
        mov     ecx,dword [eax]
        mov     eax,dword [esp-011ch+0140h]
        mov     dword [eax],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0d8h+0140h]
        mov     eax,dword [esp-0104h+0140h]
        mov     dword [eax],ecx
; Line 3718: } 
L_28122:
        mov     ecx,01h
        mov     dword [esp-010ch+0140h],edx
        mov     dword [esp-0110h+0140h],esi
        mov     eax,esi
        mov     dword [esp-0108h+0140h],eax
        mov     eax,dword [esp-010ch+0140h]
        mov     ebx,dword [eax]
        mov     eax,dword [esp-0108h+0140h]
        mov     eax,dword [eax]
        cmp     ebx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_27844
; Line 3716:     { 
; Line 3717:         swap(*__y, *__z);           
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,dword [esp-0110h+0140h]
        mov     dword [esp-0fch+0140h],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0fch+0140h]
        mov     eax,dword [eax]
        mov     dword [esp-0d8h+0140h],eax
        mov     dword [esp-0100h+0140h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0100h+0140h]
        mov     ecx,dword [eax]
        mov     eax,dword [esp-0110h+0140h]
        mov     dword [eax],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0d8h+0140h]
        mov     dword [edx],eax
; Line 3718: } 
L_28202:
        mov     ecx,02h
; Line 3719:     } 
L_27844:
        mov     eax,ecx
; Line 3721: }                                   
L_27816:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0130h
        ret
section code
section code
        section vsc@std@__1@#__sort4$r#__less$ulul~pul~$qpulpulpulpulr#__less$ulul~ virtual
        [bits 32]
@std@__1@#__sort4$r#__less$ulul~pul~$qpulpulpulpulr#__less$ulul~:
; Line 3726: unsigned 
        add     esp,0ffffff6ch
        push    ebx
        push    ebp
        push    esi
        push    edi
L_28256:
        mov     ecx,dword [esp+014h+0a4h]
        mov     esi,dword [esp+010h+0a4h]
        mov     edi,dword [esp+0ch+0a4h]
        mov     eax,dword [esp+08h+0a4h]
        mov     dword [esp-094h+0a4h],eax
        mov     ebx,dword [esp+04h+0a4h]
; Line 3730:     unsigned __r = __sort3<_Compare>(__x1, __x2, __x3, __c); 
        push    ecx
        mov     eax,edi
        push    eax
        mov     eax,dword [esp-094h+0ach]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#__sort3$r#__less$ulul~pul~$qpulpulpulr#__less$ulul~
        add     esp,byte 010h
        mov     ebp,eax
        mov     ecx,esi
        mov     edx,esi
        mov     eax,edi
        mov     esi,edi
        mov     edx,dword [edx]
        mov     eax,dword [eax]
        cmp     edx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_28259
; Line 3732:     { 
; Line 3733:         swap(*__x3, *__x4); 
        mov     edx,esi
        mov     eax,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [esp-078h+0a4h],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     dword [edx],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-078h+0a4h]
        mov     dword [eax],ecx
; Line 3718: } 
L_28311:
        inc     ebp
        mov     eax,edi
        mov     ecx,dword [esp-094h+0a4h]
        mov     edx,ecx
        mov     esi,dword [eax]
        mov     edx,dword [edx]
        cmp     esi,edx
        setc    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_28263
; Line 3736:         { 
; Line 3737:             swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-078h+0a4h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-078h+0a4h]
        mov     dword [eax],ecx
; Line 3718: } 
L_28391:
        inc     ebp
        mov     eax,dword [esp-094h+0a4h]
        mov     ecx,ebx
        mov     ebx,dword [eax]
        mov     edx,dword [ecx]
        cmp     ebx,edx
        setc    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_28267
; Line 3740:             { 
; Line 3741:                 swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-078h+0a4h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-078h+0a4h]
        mov     dword [eax],ecx
; Line 3718: } 
L_28471:
        inc     ebp
; Line 3743:             } 
L_28267:
; Line 3744:         } 
L_28263:
; Line 3745:     } 
L_28259:
        mov     eax,ebp
; Line 3747: } 
L_28257:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,094h
        ret
section code
section code
        section vsc@std@__1@#__sort5$r#__less$ulul~pul~$qpulpulpulpulpulr#__less$ulul~ virtual
        [bits 32]
@std@__1@#__sort5$r#__less$ulul~pul~$qpulpulpulpulpulr#__less$ulul~:
; Line 3752: _LIBCPP_HIDDEN 
        add     esp,0ffffff34h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_28525:
        mov     ecx,dword [esp+018h+0dch]
        mov     ebx,dword [esp+014h+0dch]
        mov     eax,dword [esp+010h+0dch]
        mov     dword [esp-0c8h+0dch],eax
        mov     eax,dword [esp+0ch+0dch]
        mov     dword [esp-0c4h+0dch],eax
        mov     edi,dword [esp+08h+0dch]
        mov     esi,dword [esp+04h+0dch]
; Line 3757:     unsigned __r = __sort4<_Compare>(__x1, __x2, __x3, __x4, __c); 
        push    ecx
        mov     eax,dword [esp-0c8h+0e0h]
        push    eax
        mov     eax,dword [esp-0c4h+0e4h]
        push    eax
        mov     eax,edi
        push    eax
        mov     eax,esi
        push    eax
        call    @std@__1@#__sort4$r#__less$ulul~pul~$qpulpulpulpulr#__less$ulul~
        add     esp,byte 014h
        mov     ebp,eax
        mov     edx,ebx
        mov     ecx,ebx
        mov     eax,dword [esp-0c8h+0dch]
        mov     ebx,eax
        mov     ecx,dword [ecx]
        mov     eax,dword [eax]
        cmp     ecx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_28528
; Line 3759:     { 
; Line 3760:         swap(*__x4, *__x5); 
        mov     ecx,ebx
        mov     eax,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [esp-0a8h+0dch],edx
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0a8h+0dch]
        mov     dword [eax],ecx
; Line 3718: } 
L_28587:
        inc     ebp
        mov     ebx,dword [esp-0c8h+0dch]
        mov     ecx,ebx
        mov     eax,dword [esp-0c4h+0dch]
        mov     edx,eax
        mov     ebx,dword [ebx]
        mov     eax,dword [eax]
        cmp     ebx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_28532
; Line 3763:         { 
; Line 3764:             swap(*__x3, *__x4); 
        mov     eax,ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [esp-0a8h+0dch],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     dword [edx],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0a8h+0dch]
        mov     dword [eax],ecx
; Line 3718: } 
L_28667:
        inc     ebp
        mov     eax,dword [esp-0c4h+0dch]
        mov     ecx,edi
        mov     edx,edi
        mov     dword [esp-0cch+0dch],edx
        mov     ebx,dword [eax]
        mov     edx,dword [esp-0cch+0dch]
        mov     edx,dword [edx]
        cmp     ebx,edx
        setc    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_28536
; Line 3767:             { 
; Line 3768:                 swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-0a8h+0dch],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0a8h+0dch]
        mov     dword [eax],ecx
; Line 3718: } 
L_28747:
        inc     ebp
        mov     eax,edi
        mov     ecx,esi
        mov     ebx,dword [eax]
        mov     edx,dword [ecx]
        cmp     ebx,edx
        setc    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_28540
; Line 3771:                 { 
; Line 3772:                     swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-0a8h+0dch],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0a8h+0dch]
        mov     dword [eax],ecx
; Line 3718: } 
L_28827:
        inc     ebp
; Line 3774:                 } 
L_28540:
; Line 3775:             } 
L_28536:
; Line 3776:         } 
L_28532:
; Line 3777:     } 
L_28528:
        mov     eax,ebp
; Line 3779: } 
L_28526:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0cch
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_3$r#__less$ulul~pul~$qpulpulr#__less$ulul~ virtual
        [bits 32]
@std@__1@#__insertion_sort_3$r#__less$ulul~pul~$qpulpulr#__less$ulul~:
; Line 3817: void 
        add     esp,byte 0ffffffcch
        push    ebx
        push    ebp
        push    esi
        push    edi
L_28881:
        mov     edx,dword [esp+0ch+044h]
        mov     esi,dword [esp+08h+044h]
        mov     edi,dword [esp+04h+044h]
; Line 3820:     typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type; 
        mov     ecx,edi
        mov     eax,edi
        add     eax,byte 08h
        mov     ebx,eax
        push    edx
        mov     eax,ebx
        push    eax
        mov     eax,edi
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ulul~pul~$qpulpulpulr#__less$ulul~
        add     esp,byte 010h
; Line 3823:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     ecx,ebx
        add     ecx,byte 04h
        cmp     ecx,esi
        je      L_28886
L_28884:
; Line 3824:     { 
; Line 3825:         if (__comp(*__i, *__j)) 
        mov     edx,ecx
        mov     eax,ebx
        mov     ecx,dword [ecx]
        cmp     ecx,dword [ebx]
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_28891
; Line 3826:         { 
; Line 3827:             value_type __t(_VSTD::move(*__i)); 
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [esp-04h+044h],ecx
        mov     ebx,eax
        mov     eax,edx
; Line 3831:             { 
L_28895:
; Line 3832:                 *__j = _VSTD::move(*__k); 
        mov     ecx,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
        mov     eax,ebx
; Line 3834:             } while (__j != __first && __comp(__t, *--__k)); 
L_28897:
        cmp     eax,edi
        je      L_28960
        sub     ebx,byte 04h
        mov     ecx,ebx
        mov     ebp,dword [esp-04h+044h]
        mov     ecx,dword [ecx]
        cmp     ebp,ecx
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_28895
L_28960:
L_28896:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-04h+044h]
        mov     dword [eax],ecx
; Line 3836:         } 
L_28891:
        mov     ebx,edx
; Line 3838:     } 
L_28887:
        mov     eax,edx
        add     eax,byte 04h
        mov     ecx,eax
L_28885:
        cmp     ecx,esi
        jne     L_28884
L_28886:
; Line 3839: } 
L_28882:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_incomplete$r#__less$ulul~pul~$qpulpulr#__less$ulul~ virtual
        [bits 32]
@std@__1@#__insertion_sort_incomplete$r#__less$ulul~pul~$qpulpulr#__less$ulul~:
; Line 3842: bool 
        add     esp,byte 0ffffff94h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_28996:
        mov     edx,dword [esp+0ch+07ch]
        mov     eax,dword [esp+08h+07ch]
        mov     dword [esp-068h+07ch],eax
        mov     ebx,dword [esp+04h+07ch]
; Line 3845:     switch (__last - __first) 
        mov     eax,dword [esp-068h+07ch]
        mov     ecx,ebx
        mov     esi,eax
        sub     esi,ecx
        sar     esi,02h
        mov     dword [esp-06ch+07ch],eax
        cmp     esi,byte 06h
        jnc     L_29020
        push    esi
        mov     esi,dword [esi*4+L_65655]
        xchg    esi,dword [esp]
        ret
        times $$-$ & 3 nop
L_65655:
        dd      L_29002
        dd      L_29004
        dd      L_29006
        dd      L_29013
        dd      L_29015
        dd      L_29017
; Line 3846:     { 
; Line 3847:     case 0: 
L_29002:
L_29004:
        mov     al,01h
        jmp     L_28997
L_29006:
        mov     eax,dword [esp-06ch+07ch]
        sub     eax,byte 04h
        mov     ebx,dword [eax]
        mov     edx,dword [ecx]
        cmp     ebx,edx
        setc    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_29008
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx]
        mov     dword [esp-01ch+07ch],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-01ch+07ch]
        mov     dword [eax],ecx
; Line 3718: } 
L_29084:
L_29008:
        mov     al,01h
        jmp     L_28997
L_29013:
        push    edx
        mov     eax,dword [esp-06ch+080h]
        sub     eax,byte 04h
        push    eax
        mov     eax,ebx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ulul~pul~$qpulpulpulr#__less$ulul~
        add     esp,byte 010h
        mov     al,01h
        jmp     L_28997
L_29015:
        push    edx
        mov     eax,dword [esp-06ch+080h]
        sub     eax,byte 04h
        push    eax
        mov     eax,ebx
        mov     edx,ecx
        add     edx,byte 08h
        push    edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$ulul~pul~$qpulpulpulpulr#__less$ulul~
        add     esp,byte 014h
        mov     al,01h
        jmp     L_28997
L_29017:
        push    edx
        mov     eax,dword [esp-06ch+080h]
        sub     eax,byte 04h
        push    eax
        mov     eax,ebx
        mov     edx,ecx
        add     edx,byte 0ch
        push    edx
        mov     edx,ecx
        add     edx,byte 08h
        push    edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$ulul~pul~$qpulpulpulpulpulr#__less$ulul~
        add     esp,byte 018h
        mov     al,01h
        jmp     L_28997
; Line 3863:     } 
L_29020:
L_28999:
        mov     eax,ecx
        add     eax,byte 08h
        mov     esi,eax
        push    edx
        mov     eax,esi
        push    eax
        mov     eax,ebx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ulul~pul~$qpulpulpulr#__less$ulul~
        add     esp,byte 010h
        xor     edi,edi
; Line 3869:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     eax,esi
        add     eax,byte 04h
        cmp     eax,dword [esp-068h+07ch]
        je      L_29024
L_29022:
; Line 3870:     { 
; Line 3871:         if (__comp(*__i, *__j)) 
        mov     edx,eax
        mov     ecx,esi
        mov     eax,dword [eax]
        cmp     eax,dword [esi]
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_29029
; Line 3872:         { 
; Line 3873:             value_type __t(_VSTD::move(*__i)); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [eax]
        mov     dword [esp-04h+07ch],eax
        mov     esi,ecx
        mov     eax,edx
; Line 3877:             { 
L_29033:
; Line 3878:                 *__j = _VSTD::move(*__k); 
        mov     ecx,esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
        mov     eax,esi
; Line 3880:             } while (__j != __first && __comp(__t, *--__k)); 
L_29035:
        cmp     eax,ebx
        je      L_29183
        sub     esi,byte 04h
        mov     ecx,esi
        mov     ebp,dword [esp-04h+07ch]
        mov     ecx,dword [ecx]
        cmp     ebp,ecx
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_29033
L_29183:
L_29034:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-04h+07ch]
        mov     dword [eax],ecx
        inc     edi
        cmp     edi,byte 08h
        jne     L_29042
        mov     ecx,edx
        add     ecx,byte 04h
        mov     eax,dword [esp-06ch+07ch]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
        jmp     L_28997
L_29042:
; Line 3884:         } 
L_29029:
        mov     esi,edx
; Line 3886:     } 
L_29025:
        mov     eax,edx
        add     eax,byte 04h
L_29023:
        cmp     eax,dword [esp-068h+07ch]
        jne     L_29022
L_29024:
        mov     al,01h
; Line 3888: } 
L_28997:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 06ch
        ret
section code
section code
        section vsc@std@__1@#__sort$r#__less$ulul~pul~$qpulpulr#__less$ulul~ virtual
        [bits 32]
@std@__1@#__sort$r#__less$ulul~pul~$qpulpulr#__less$ulul~:
; Line 3926: void 
        add     esp,0fffffe14h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_29219:
        mov     eax,dword [esp+0ch+01fch]
        mov     dword [esp-019ch+01fch],eax
        mov     eax,dword [esp+08h+01fch]
        mov     dword [esp-0198h+01fch],eax
        mov     eax,dword [esp+04h+01fch]
        mov     dword [esp-0190h+01fch],eax
; Line 3930:     typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type; 
L_29222:
; Line 3935:     { 
; Line 3936:     __restart: 
L_29228:
        mov     eax,dword [esp-0198h+01fch]
        mov     edx,dword [esp-0190h+01fch]
        mov     ecx,eax
        sub     ecx,edx
        sar     ecx,02h
        mov     ebx,ecx
        and     ebx,ebx
        jl      L_29250
        cmp     ebx,byte 06h
        jge     L_29250
        push    ebx
        mov     ebx,dword [ebx*4+L_65660]
        xchg    ebx,dword [esp]
        ret
        times $$-$ & 3 nop
L_65660:
        dd      L_29232
        dd      L_29234
        dd      L_29236
        dd      L_29243
        dd      L_29245
        dd      L_29247
; Line 3939:         { 
; Line 3940:         case 0: 
L_29232:
L_29234:
        jmp     L_29220
L_29236:
        sub     eax,byte 04h
        mov     dword [esp-01d8h+01fch],eax
        mov     dword [esp-01e8h+01fch],edx
        mov     ecx,dword [esp-01d8h+01fch]
        mov     ebx,dword [ecx]
        mov     ecx,dword [esp-01e8h+01fch]
        mov     ecx,dword [ecx]
        cmp     ebx,ecx
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_29220
        mov     dword [esp-01d4h+01fch],edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,dword [esp-01d4h+01fch]
        mov     dword [esp-01b0h+01fch],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-01b0h+01fch]
        mov     ecx,dword [ecx]
        mov     dword [esp-0168h+01fch],ecx
        mov     dword [esp-01ach+01fch],eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-01ach+01fch]
        mov     edx,dword [ecx]
        mov     ecx,dword [esp-01d4h+01fch]
        mov     dword [ecx],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0168h+01fch]
        mov     dword [eax],ecx
; Line 3718: } 
L_29488:
L_29238:
        jmp     L_29220
L_29243:
        mov     ecx,dword [esp-019ch+01fch]
        push    ecx
        sub     eax,byte 04h
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        mov     ecx,edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ulul~pul~$qpulpulpulr#__less$ulul~
        add     esp,byte 010h
        jmp     L_29220
L_29245:
        mov     ecx,dword [esp-019ch+01fch]
        push    ecx
        sub     eax,byte 04h
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        mov     ecx,edx
        add     ecx,byte 08h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$ulul~pul~$qpulpulpulpulr#__less$ulul~
        add     esp,byte 014h
        jmp     L_29220
L_29247:
        mov     ecx,dword [esp-019ch+01fch]
        push    ecx
        sub     eax,byte 04h
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        mov     ecx,edx
        add     ecx,byte 0ch
        push    ecx
        mov     ecx,edx
        add     ecx,byte 08h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$ulul~pul~$qpulpulpulpulpulr#__less$ulul~
        add     esp,byte 018h
        jmp     L_29220
; Line 3956:         } 
L_29250:
L_29229:
        cmp     ecx,byte 06h
        jg      L_29252
; Line 3958:         { 
; Line 3959:             _VSTD::__insertion_sort_3<_Compare>(__first, __last, __comp); 
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,dword [esp-0198h+0200h]
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        push    eax
        call    @std@__1@#__insertion_sort_3$r#__less$ulul~pul~$qpulpulr#__less$ulul~
        add     esp,byte 0ch
        jmp     L_29220
; Line 3961:         } 
L_29252:
        mov     esi,edx
        mov     dword [esp-01c0h+01fch],eax
        sub     eax,byte 04h
        mov     ebx,eax
; Line 3967:         { 
; Line 3968:         difference_type __delta; 
        cmp     ecx,03e8h
        jl      L_29260
; Line 3970:         { 
; Line 3971:             __delta = __len/2; 
        mov     eax,ecx
        shr     eax,01fh
        add     eax,ecx
        sar     eax,01h
        mov     dword [esp-01dch+01fch],esi
        mov     esi,eax
        shl     esi,02h
        mov     ecx,dword [esp-01dch+01fch]
        add     ecx,esi
        mov     dword [esp-0188h+01fch],ecx
        mov     ecx,eax
        shr     ecx,01fh
        add     eax,ecx
        sar     eax,01h
        mov     ecx,dword [esp-019ch+01fch]
        push    ecx
        mov     ecx,ebx
        push    ecx
        mov     esi,dword [esp-0188h+0204h]
        mov     ecx,eax
        shl     ecx,02h
        mov     eax,esi
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0188h+0208h]
        push    eax
        mov     eax,edx
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0190h+0210h]
        push    eax
        call    @std@__1@#__sort5$r#__less$ulul~pul~$qpulpulpulpulpulr#__less$ulul~
        add     esp,byte 018h
        mov     dword [esp-0184h+01fch],eax
; Line 3975:         } 
        jmp     L_29265
L_29260:
; Line 3976:         else 
; Line 3977:         { 
; Line 3978:             __delta = __len/2; 
        mov     dword [esp-01e0h+01fch],ecx
        shr     ecx,01fh
        mov     eax,dword [esp-01e0h+01fch]
        add     eax,ecx
        sar     eax,01h
        mov     dword [esp-01c4h+01fch],esi
        mov     ecx,eax
        shl     ecx,02h
        mov     eax,dword [esp-01c4h+01fch]
        add     eax,ecx
        mov     dword [esp-0188h+01fch],eax
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0188h+0204h]
        push    eax
        mov     eax,dword [esp-0190h+0208h]
        push    eax
        call    @std@__1@#__sort3$r#__less$ulul~pul~$qpulpulpulr#__less$ulul~
        add     esp,byte 010h
        mov     dword [esp-0184h+01fch],eax
; Line 3981:         } 
L_29265:
; Line 3982:         } 
        mov     esi,dword [esp-0190h+01fch]
        mov     edx,esi
        mov     dword [esp-01e4h+01fch],ebx
        mov     ebx,esi
        mov     dword [esp-018ch+01fch],ebx
        mov     eax,dword [esp-0188h+01fch]
        mov     ecx,eax
        mov     ebx,dword [ebx]
        mov     eax,dword [eax]
        cmp     ebx,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_29273
; Line 3992:         { 
; Line 3995:             while (true) 
        mov     eax,dword [esp-01e4h+01fch]
L_29277:
; Line 3996:             { 
; Line 3997:                 if (__i == --__j) 
        sub     eax,byte 04h
        mov     dword [esp-01e4h+01fch],eax
        cmp     esi,eax
        jne     L_29283
; Line 3998:                 { 
; Line 4001:                     ++__i;   
        mov     eax,dword [esp-018ch+01fch]
        add     eax,byte 04h
        mov     esi,eax
        mov     eax,dword [esp-0198h+01fch]
        mov     edi,edx
        sub     eax,byte 04h
        mov     ecx,eax
        mov     ebx,eax
        mov     edi,dword [edi]
        mov     eax,dword [eax]
        cmp     edi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_29287
; Line 4004:                     { 
; Line 4005:                         while (true) 
L_29291:
; Line 4006:                         { 
; Line 4007:                             if (__i == __j) 
        cmp     esi,ecx
        je      L_29220
L_29297:
        mov     edi,edx
        mov     eax,esi
        mov     edi,dword [edi]
        mov     eax,dword [eax]
        cmp     edi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_29302
; Line 4010:                             { 
; Line 4011:                                 swap(*__i, *__j); 
        mov     edx,esi
        mov     eax,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edi,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edi,dword [edi]
        mov     dword [esp-0168h+01fch],edi
        mov     edi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edi,dword [edi]
        mov     dword [edx],edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [esp-0168h+01fch]
        mov     dword [eax],edx
; Line 3718: } 
L_29600:
        inc     dword [esp-0184h+01fch]
        add     esi,byte 04h
; Line 4014:                                 break; 
        jmp     L_29292
L_29302:
        add     esi,byte 04h
; Line 4017:                         } 
L_29293:
        jmp     L_29291
L_29292:
; Line 4018:                     } 
L_29287:
        mov     dword [esp-01bch+01fch],ecx
        cmp     esi,dword [esp-01bch+01fch]
        je      L_29220
L_29315:
L_29320:
; Line 4023:                     { 
; Line 4024:                         while (!__comp(*__first, *__i)) 
        mov     edi,dword [esp-0190h+01fch]
        mov     ecx,edi
        mov     eax,esi
        mov     edx,esi
        mov     edi,dword [edi]
        mov     eax,dword [eax]
        cmp     edi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_29327
L_29326:
        mov     eax,edx
        add     eax,byte 04h
        mov     esi,eax
L_29328:
        mov     edi,ecx
        mov     eax,esi
        mov     edx,esi
        mov     edi,dword [edi]
        mov     eax,dword [eax]
        cmp     edi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_29326
L_29327:
        mov     ebp,ecx
        mov     eax,ebx
        sub     eax,byte 04h
        mov     edi,eax
        mov     ebx,eax
        mov     ebp,dword [ebp]
        mov     eax,dword [eax]
        cmp     ebp,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_29334
L_29333:
L_29335:
; Line 4026:                         while (__comp(*__first, *--__j)) 
        mov     ebp,ecx
        mov     eax,ebx
        sub     eax,byte 04h
        mov     edi,eax
        mov     ebx,eax
        mov     ebp,dword [ebp]
        mov     eax,dword [eax]
        cmp     ebp,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_29333
L_29334:
        cmp     esi,edi
        jge     L_29321
; Line 4029:                             break; 
L_29340:
        mov     ecx,edx
        mov     eax,ebx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     esi,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [esi]
        mov     dword [esp-0168h+01fch],esi
        mov     esi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [esi]
        mov     dword [ecx],esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0168h+01fch]
        mov     dword [eax],ecx
; Line 3718: } 
L_29728:
        inc     dword [esp-0184h+01fch]
        mov     eax,edx
        add     eax,byte 04h
        mov     esi,eax
; Line 4033:                     } 
L_29322:
; Line 4022:                     while (true) 
        jmp     L_29320
L_29321:
        mov     eax,edx
        mov     dword [esp-0190h+01fch],eax
        jmp     L_29228
L_29283:
        mov     eax,dword [esp-01e4h+01fch]
        mov     ebx,eax
        mov     dword [esp-01d0h+01fch],ecx
        mov     edi,dword [ebx]
        mov     ebx,dword [esp-01d0h+01fch]
        mov     dword [esp-01a8h+01fch],ebx
        mov     ebx,dword [ebx]
        cmp     edi,ebx
        setc    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_29351
; Line 4041:                 { 
; Line 4042:                     swap(*__i, *__j); 
        mov     edx,dword [esp-018ch+01fch]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ebx,dword [ebx]
        mov     dword [esp-0168h+01fch],ebx
        mov     ebx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ebx,dword [ebx]
        mov     dword [edx],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [esp-0168h+01fch]
        mov     dword [esp-01ech+01fch],eax
        mov     dword [eax],edx
; Line 3718: } 
L_29808:
        inc     dword [esp-0184h+01fch]
; Line 4044:                     break;   
        jmp     L_29278
L_29351:
; Line 4046:             } 
L_29279:
        jmp     L_29277
L_29278:
; Line 4047:         } 
L_29273:
        mov     eax,dword [esp-018ch+01fch]
        add     eax,byte 04h
        mov     ebx,eax
        cmp     ebx,dword [esp-01e4h+01fch]
        jge     L_29364
; Line 4053:         { 
; Line 4056:             while (true) 
L_29368:
; Line 4057:             { 
; Line 4059:                 while (__comp(*__i, *__m)) 
        mov     esi,ebx
        mov     edx,ebx
        mov     eax,ecx
        mov     esi,dword [esi]
        mov     eax,dword [eax]
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_29375
L_29374:
        mov     eax,edx
        add     eax,byte 04h
        mov     ebx,eax
L_29376:
        mov     esi,ebx
        mov     edx,ebx
        mov     eax,ecx
        mov     esi,dword [esi]
        mov     eax,dword [eax]
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_29374
L_29375:
        sub     dword [esp-01e4h+01fch],byte 04h
        mov     edi,dword [esp-01e4h+01fch]
        mov     esi,edi
        mov     eax,ecx
        mov     dword [esp-01cch+01fch],eax
        mov     edi,dword [edi]
        mov     eax,dword [esp-01cch+01fch]
        mov     dword [esp-01a4h+01fch],eax
        mov     eax,dword [eax]
        cmp     edi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_29382
L_29381:
L_29383:
; Line 4062:                 while (!__comp(*--__j, *__m)) 
        mov     eax,esi
        sub     eax,byte 04h
        mov     dword [esp-01e4h+01fch],eax
        mov     edi,eax
        mov     esi,eax
        mov     eax,ecx
        mov     dword [esp-01c8h+01fch],eax
        mov     edi,dword [edi]
        mov     eax,dword [esp-01c8h+01fch]
        mov     dword [esp-01a0h+01fch],eax
        mov     eax,dword [eax]
        cmp     edi,eax
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_29381
L_29382:
        cmp     ebx,dword [esp-01e4h+01fch]
        jg      L_29369
; Line 4065:                     break; 
L_29388:
        mov     ecx,edx
        mov     eax,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edi,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edi,dword [edi]
        mov     dword [esp-0168h+01fch],edi
        mov     edi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edi,dword [edi]
        mov     dword [ecx],edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0168h+01fch]
        mov     dword [eax],ecx
; Line 3718: } 
L_29936:
        inc     dword [esp-0184h+01fch]
        mov     eax,ebx
        cmp     dword [esp-0188h+01fch],eax
        jne     L_29393
        mov     eax,esi
        mov     dword [esp-0188h+01fch],eax
L_29393:
        mov     eax,edx
        add     eax,byte 04h
        mov     ebx,eax
; Line 4073:             } 
L_29370:
        mov     ecx,dword [esp-0188h+01fch]
        jmp     L_29368
L_29369:
; Line 4074:         } 
L_29364:
        cmp     ebx,dword [esp-0188h+01fch]
        je      L_29404
        mov     esi,ecx
        mov     eax,ebx
        mov     edx,ebx
        mov     esi,dword [esi]
        mov     edx,dword [edx]
        cmp     esi,edx
        setc    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_29404
; Line 4077:         { 
; Line 4078:             swap(*__i, *__m); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [esp-0168h+01fch],edx
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [edx]
        mov     dword [esp-01b4h+01fch],eax
        mov     dword [eax],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [esp-0168h+01fch]
        mov     dword [esp-01b8h+01fch],ecx
        mov     eax,ecx
        mov     dword [eax],edx
; Line 3718: } 
L_30016:
        inc     dword [esp-0184h+01fch]
; Line 4080:         } 
L_29404:
        cmp     dword [esp-0184h+01fch],byte 00h
        jne     L_29411
; Line 4084:         { 
; Line 4085:             bool __fs = _VSTD::__insertion_sort_incomplete<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$ulul~pul~$qpulpulr#__less$ulul~
        add     esp,byte 0ch
        mov     byte [esp-0191h+01fch],al
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,dword [esp-0198h+0200h]
        push    eax
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$ulul~pul~$qpulpulr#__less$ulul~
        add     esp,byte 0ch
        and     al,al
        je      L_29415
; Line 4087:             { 
; Line 4088:                 if (__fs) 
        cmp     byte [esp-0191h+01fch],byte 00h
        jne     L_29220
L_29419:
        mov     eax,ebx
        mov     dword [esp-0198h+01fch],eax
; Line 4091:                 continue; 
        jmp     L_29222
L_29415:
; Line 4093:             else 
; Line 4094:             { 
; Line 4095:                 if (__fs) 
        cmp     byte [esp-0191h+01fch],byte 00h
        je      L_29429
; Line 4096:                 { 
; Line 4097:                     __first = ++__i; 
        mov     eax,ebx
        add     eax,byte 04h
        mov     dword [esp-0190h+01fch],eax
; Line 4098:                     continue; 
        jmp     L_29222
L_29429:
; Line 4100:             } 
L_29425:
; Line 4101:         } 
L_29411:
        mov     eax,dword [esp-0198h+01fch]
        mov     ecx,ebx
        sub     eax,ecx
        mov     edx,eax
        sar     edx,02h
        mov     eax,dword [esp-0190h+01fch]
        sub     eax,ecx
        neg     eax
        imul    eax,byte 01h
        sar     eax,02h
        cmp     eax,edx
        jge     L_29442
; Line 4104:         { 
; Line 4105:             _VSTD::__sort<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0190h+0204h]
        push    eax
        call    @std@__1@#__sort$r#__less$ulul~pul~$qpulpulr#__less$ulul~
        add     esp,byte 0ch
        mov     eax,ebx
        add     eax,byte 04h
        mov     dword [esp-0190h+01fch],eax
; Line 4108:         } 
        jmp     L_29447
L_29442:
; Line 4109:         else 
; Line 4110:         { 
; Line 4111:             _VSTD::__sort<_Compare>(__i+1, __last, __comp); 
        mov     eax,dword [esp-019ch+01fch]
        push    eax
        mov     eax,dword [esp-0198h+0200h]
        push    eax
        mov     eax,ecx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__sort$r#__less$ulul~pul~$qpulpulr#__less$ulul~
        add     esp,byte 0ch
        mov     eax,ebx
        mov     dword [esp-0198h+01fch],eax
; Line 4114:         } 
L_29447:
; Line 4115:     } 
L_29224:
; Line 3934:     while (true) 
        jmp     L_29222
; Line 4116: } 
L_29223:
L_29220:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,01ech
        ret
section code
section code
        section vsc@std@__1@#__sort3$r#__less$LL~pL~$qpLpLpLr#__less$LL~ virtual
        [bits 32]
@std@__1@#__sort3$r#__less$LL~pL~$qpLpLpLr#__less$LL~:
; Line 3689: unsigned 
        add     esp,0fffffe68h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_30070:
        mov     eax,dword [esp+0ch+01a8h]
        mov     ecx,dword [esp+08h+01a8h]
        mov     dword [esp-0190h+01a8h],ecx
        mov     edx,dword [esp+04h+01a8h]
; Line 3692:     unsigned __r = 0; 
        xor     ebp,ebp
        mov     ecx,dword [esp-0190h+01a8h]
        mov     edi,ecx
        mov     dword [esp-018ch+01a8h],edx
        mov     esi,dword [ecx]
        mov     ebx,dword [ecx+04h]
        mov     ecx,dword [edx]
        mov     edx,dword [edx+04h]
        cmp     ebx,edx
        jne     L_65675
        cmp     esi,ecx
        setc    cl
        and     ecx,byte 01h
        jmp     L_65676
L_65675:
        setl    cl
        and     ecx,byte 01h
L_65676:
        and     ecx,ecx
        setne   cl
        and     cl,cl
        jne     L_30073
; Line 3694:     { 
; Line 3695:         if (!__c(*__z, *__y))       
        mov     ecx,edi
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        cmp     ebx,edx
        jne     L_65678
        cmp     esi,ecx
        setc    cl
        and     ecx,byte 01h
        jmp     L_65679
L_65678:
        setl    cl
        and     ecx,byte 01h
L_65679:
        and     ecx,ecx
        setne   cl
        and     cl,cl
        jne     L_30077
        mov     eax,ebp
        jmp     L_30071
L_30077:
        mov     ebx,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebx]
        mov     edx,dword [ebx+04h]
        mov     dword [esp-0158h+01a8h],ecx
        mov     dword [esp-0158h+04h+01a8h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     edx,dword [eax+04h]
        mov     dword [ebx],ecx
        mov     dword [ebx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0158h+01a8h]
        mov     edx,dword [esp-0158h+04h+01a8h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
; Line 3718: } 
L_30153:
        mov     edi,01h
        mov     eax,dword [esp-0190h+01a8h]
        mov     ecx,dword [esp-018ch+01a8h]
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        cmp     ebx,edx
        jne     L_65681
        cmp     esi,ecx
        setc    cl
        and     ecx,byte 01h
        jmp     L_65682
L_65681:
        setl    cl
        and     ecx,byte 01h
L_65682:
        and     ecx,ecx
        setne   cl
        and     cl,cl
        je      L_30082
; Line 3701:         { 
; Line 3702:             swap(*__x, *__y);       
        mov     ebx,dword [esp-018ch+01a8h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebx]
        mov     edx,dword [ebx+04h]
        mov     dword [esp-0158h+01a8h],ecx
        mov     dword [esp-0158h+04h+01a8h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     edx,dword [eax+04h]
        mov     dword [ebx],ecx
        mov     dword [ebx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0158h+01a8h]
        mov     edx,dword [esp-0158h+04h+01a8h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
; Line 3718: } 
L_30233:
        mov     edi,02h
; Line 3704:         } 
L_30082:
        mov     eax,edi
        jmp     L_30071
; Line 3706:     } 
L_30073:
        mov     ebp,eax
        mov     ecx,edi
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        mov     eax,dword [ecx]
        mov     edx,dword [ecx+04h]
        cmp     ebx,edx
        jne     L_65684
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        jmp     L_65685
L_65684:
        setl    al
        and     eax,byte 01h
L_65685:
        and     eax,eax
        setne   al
        and     al,al
        je      L_30092
; Line 3708:     { 
; Line 3709:         swap(*__x, *__z);           
        mov     ebx,dword [esp-018ch+01a8h]
        mov     eax,ebp
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebx]
        mov     edx,dword [ebx+04h]
        mov     dword [esp-0158h+01a8h],ecx
        mov     dword [esp-0158h+04h+01a8h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     edx,dword [eax+04h]
        mov     dword [ebx],ecx
        mov     dword [ebx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0158h+01a8h]
        mov     edx,dword [esp-0158h+04h+01a8h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
; Line 3718: } 
L_30313:
        mov     eax,01h
        jmp     L_30071
; Line 3712:     } 
L_30092:
        mov     ecx,dword [esp-018ch+01a8h]
        mov     ebx,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [ecx]
        mov     edx,dword [ecx+04h]
        mov     dword [esp-0158h+01a8h],eax
        mov     dword [esp-0158h+04h+01a8h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [ebx]
        mov     edx,dword [ebx+04h]
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0158h+01a8h]
        mov     edx,dword [esp-0158h+04h+01a8h]
        mov     dword [ebx],eax
        mov     dword [ebx+04h],edx
; Line 3718: } 
L_30377:
        mov     ecx,01h
        mov     eax,ebp
        mov     edi,dword [esp-0190h+01a8h]
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0198h+01a8h],eax
        mov     dword [esp-0198h+04h+01a8h],edx
        mov     esi,dword [edi]
        mov     ebx,dword [edi+04h]
        mov     eax,dword [esp-0198h+01a8h]
        mov     edx,dword [esp-0198h+04h+01a8h]
        cmp     edx,ebx
        jne     L_65687
        cmp     eax,esi
        setc    al
        and     eax,byte 01h
        jmp     L_65688
L_65687:
        setl    al
        and     eax,byte 01h
L_65688:
        and     eax,eax
        setne   al
        and     al,al
        je      L_30099
; Line 3716:     { 
; Line 3717:         swap(*__y, *__z);           
        mov     eax,ebp
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [edi]
        mov     edx,dword [edi+04h]
        mov     dword [esp-0158h+01a8h],ecx
        mov     dword [esp-0158h+04h+01a8h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     edx,dword [eax+04h]
        mov     dword [edi],ecx
        mov     dword [edi+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0158h+01a8h]
        mov     edx,dword [esp-0158h+04h+01a8h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
; Line 3718: } 
L_30457:
        mov     ecx,02h
; Line 3719:     } 
L_30099:
        mov     eax,ecx
; Line 3721: }                                   
L_30071:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0198h
        ret
section code
section code
        section vsc@std@__1@#__sort4$r#__less$LL~pL~$qpLpLpLpLr#__less$LL~ virtual
        [bits 32]
@std@__1@#__sort4$r#__less$LL~pL~$qpLpLpLpLr#__less$LL~:
; Line 3726: unsigned 
        add     esp,0fffffecch
        push    ebx
        push    esi
        push    edi
L_30511:
        mov     ecx,dword [esp+014h+0140h]
        mov     esi,dword [esp+010h+0140h]
        mov     eax,dword [esp+0ch+0140h]
        mov     dword [esp-0100h+0140h],eax
        mov     eax,dword [esp+08h+0140h]
        mov     dword [esp-0fch+0140h],eax
        mov     eax,dword [esp+04h+0140h]
        mov     dword [esp-0f8h+0140h],eax
; Line 3730:     unsigned __r = __sort3<_Compare>(__x1, __x2, __x3, __c); 
        push    ecx
        mov     eax,dword [esp-0100h+0144h]
        push    eax
        mov     eax,dword [esp-0fch+0148h]
        push    eax
        mov     eax,dword [esp-0f8h+014ch]
        push    eax
        call    @std@__1@#__sort3$r#__less$LL~pL~$qpLpLpLr#__less$LL~
        add     esp,byte 010h
        mov     dword [esp-0f4h+0140h],eax
        mov     dword [esp-0114h+0140h],esi
        mov     ecx,dword [esp-0100h+0140h]
        mov     ebx,ecx
        mov     eax,dword [esi]
        mov     edx,dword [esi+04h]
        mov     dword [esp-011ch+0140h],eax
        mov     dword [esp-011ch+04h+0140h],edx
        mov     esi,dword [ebx]
        mov     ebx,dword [ebx+04h]
        mov     eax,dword [esp-011ch+0140h]
        mov     edx,dword [esp-011ch+04h+0140h]
        cmp     edx,ebx
        jne     L_65690
        cmp     eax,esi
        setc    al
        and     eax,byte 01h
        jmp     L_65691
L_65690:
        setl    al
        and     eax,byte 01h
L_65691:
        and     eax,eax
        setne   al
        and     al,al
        je      L_30514
; Line 3732:     { 
; Line 3733:         swap(*__x3, *__x4); 
        mov     eax,dword [esp-0114h+0140h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-0c0h+0140h],esi
        mov     dword [esp-0c0h+04h+0140h],ebx
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [ecx],esi
        mov     dword [ecx+04h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0c0h+0140h]
        mov     edx,dword [esp-0c0h+04h+0140h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
; Line 3718: } 
L_30566:
        inc     dword [esp-0f4h+0140h]
        mov     edi,dword [esp-0100h+0140h]
        mov     ecx,dword [esp-0fch+0140h]
        mov     ebx,ecx
        mov     eax,dword [edi]
        mov     edx,dword [edi+04h]
        mov     dword [esp-0108h+0140h],eax
        mov     dword [esp-0108h+04h+0140h],edx
        mov     eax,dword [ebx]
        mov     edx,dword [ebx+04h]
        mov     dword [esp-012ch+0140h],eax
        mov     dword [esp-012ch+04h+0140h],edx
        mov     esi,dword [esp-0108h+0140h]
        mov     ebx,dword [esp-0108h+04h+0140h]
        mov     eax,dword [esp-012ch+0140h]
        mov     edx,dword [esp-012ch+04h+0140h]
        cmp     ebx,edx
        jne     L_65693
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        jmp     L_65694
L_65693:
        setl    al
        and     eax,byte 01h
L_65694:
        and     eax,eax
        setne   al
        and     al,al
        je      L_30518
; Line 3736:         { 
; Line 3737:             swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0c0h+0140h],eax
        mov     dword [esp-0c0h+04h+0140h],edx
        mov     eax,edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0c0h+0140h]
        mov     edx,dword [esp-0c0h+04h+0140h]
        mov     dword [esp-0130h+0140h],edi
        mov     ecx,edi
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 3718: } 
L_30646:
        inc     dword [esp-0f4h+0140h]
        mov     edi,dword [esp-0fch+0140h]
        mov     ecx,dword [esp-0f8h+0140h]
        mov     eax,dword [edi]
        mov     edx,dword [edi+04h]
        mov     dword [esp-0110h+0140h],eax
        mov     dword [esp-0110h+04h+0140h],edx
        mov     eax,dword [ecx]
        mov     edx,dword [ecx+04h]
        mov     dword [esp-0124h+0140h],eax
        mov     dword [esp-0124h+04h+0140h],edx
        mov     esi,dword [esp-0110h+0140h]
        mov     ebx,dword [esp-0110h+04h+0140h]
        mov     eax,dword [esp-0124h+0140h]
        mov     edx,dword [esp-0124h+04h+0140h]
        cmp     ebx,edx
        jne     L_65696
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        jmp     L_65697
L_65696:
        setl    al
        and     eax,byte 01h
L_65697:
        and     eax,eax
        setne   al
        and     al,al
        je      L_30522
; Line 3740:             { 
; Line 3741:                 swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [ecx]
        mov     edx,dword [ecx+04h]
        mov     dword [esp-0c0h+0140h],eax
        mov     dword [esp-0c0h+04h+0140h],edx
        mov     dword [esp-0134h+0140h],edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0134h+0140h]
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0c0h+0140h]
        mov     edx,dword [esp-0c0h+04h+0140h]
        mov     dword [edi],eax
        mov     dword [edi+04h],edx
; Line 3718: } 
L_30726:
        inc     dword [esp-0f4h+0140h]
; Line 3743:             } 
L_30522:
; Line 3744:         } 
L_30518:
; Line 3745:     } 
L_30514:
        mov     eax,dword [esp-0f4h+0140h]
; Line 3747: } 
L_30512:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,0134h
        ret
section code
section code
        section vsc@std@__1@#__sort5$r#__less$LL~pL~$qpLpLpLpLpLr#__less$LL~ virtual
        [bits 32]
@std@__1@#__sort5$r#__less$LL~pL~$qpLpLpLpLpLr#__less$LL~:
; Line 3752: _LIBCPP_HIDDEN 
        add     esp,0fffffe3ch
        push    ebx
        push    esi
        push    edi
L_30780:
        mov     ecx,dword [esp+018h+01d0h]
        mov     esi,dword [esp+014h+01d0h]
        mov     eax,dword [esp+010h+01d0h]
        mov     dword [esp-0150h+01d0h],eax
        mov     eax,dword [esp+0ch+01d0h]
        mov     dword [esp-014ch+01d0h],eax
        mov     eax,dword [esp+08h+01d0h]
        mov     dword [esp-0148h+01d0h],eax
        mov     eax,dword [esp+04h+01d0h]
        mov     dword [esp-0144h+01d0h],eax
; Line 3757:     unsigned __r = __sort4<_Compare>(__x1, __x2, __x3, __x4, __c); 
        push    ecx
        mov     eax,dword [esp-0150h+01d4h]
        push    eax
        mov     eax,dword [esp-014ch+01d8h]
        push    eax
        mov     eax,dword [esp-0148h+01dch]
        push    eax
        mov     eax,dword [esp-0144h+01e0h]
        push    eax
        call    @std@__1@#__sort4$r#__less$LL~pL~$qpLpLpLpLr#__less$LL~
        add     esp,byte 014h
        mov     dword [esp-0154h+01d0h],eax
        mov     ecx,esi
        mov     edi,dword [esp-0150h+01d0h]
        mov     ebx,edi
        mov     eax,dword [esi]
        mov     edx,dword [esi+04h]
        mov     dword [esp-0164h+01d0h],eax
        mov     dword [esp-0164h+04h+01d0h],edx
        mov     eax,dword [ebx]
        mov     edx,dword [ebx+04h]
        mov     dword [esp-0184h+01d0h],eax
        mov     dword [esp-0184h+04h+01d0h],edx
        mov     esi,dword [esp-0164h+01d0h]
        mov     ebx,dword [esp-0164h+04h+01d0h]
        mov     eax,dword [esp-0184h+01d0h]
        mov     edx,dword [esp-0184h+04h+01d0h]
        cmp     ebx,edx
        jne     L_65699
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        jmp     L_65700
L_65699:
        setl    al
        and     eax,byte 01h
L_65700:
        and     eax,eax
        setne   al
        and     al,al
        je      L_30783
; Line 3759:     { 
; Line 3760:         swap(*__x4, *__x5); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0110h+01d0h],eax
        mov     dword [esp-0110h+04h+01d0h],edx
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-01b4h+01d0h],edi
        mov     ebx,edi
        mov     dword [ebx],eax
        mov     dword [ebx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0110h+01d0h]
        mov     edx,dword [esp-0110h+04h+01d0h]
        mov     dword [esp-01a4h+01d0h],ecx
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 3718: } 
L_30842:
        inc     dword [esp-0154h+01d0h]
        mov     ecx,dword [esp-0150h+01d0h]
        mov     eax,ecx
        mov     edi,dword [esp-014ch+01d0h]
        mov     ebx,edi
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0174h+01d0h],eax
        mov     dword [esp-0174h+04h+01d0h],edx
        mov     eax,dword [ebx]
        mov     edx,dword [ebx+04h]
        mov     dword [esp-0194h+01d0h],eax
        mov     dword [esp-0194h+04h+01d0h],edx
        mov     esi,dword [esp-0174h+01d0h]
        mov     ebx,dword [esp-0174h+04h+01d0h]
        mov     eax,dword [esp-0194h+01d0h]
        mov     edx,dword [esp-0194h+04h+01d0h]
        cmp     ebx,edx
        jne     L_65702
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        jmp     L_65703
L_65702:
        setl    al
        and     eax,byte 01h
L_65703:
        and     eax,eax
        setne   al
        and     al,al
        je      L_30787
; Line 3763:         { 
; Line 3764:             swap(*__x3, *__x4); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0110h+01d0h],eax
        mov     dword [esp-0110h+04h+01d0h],edx
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-01bch+01d0h],edi
        mov     ebx,edi
        mov     dword [ebx],eax
        mov     dword [ebx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0110h+01d0h]
        mov     edx,dword [esp-0110h+04h+01d0h]
        mov     dword [esp-01a0h+01d0h],ecx
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 3718: } 
L_30922:
        inc     dword [esp-0154h+01d0h]
        mov     ecx,dword [esp-014ch+01d0h]
        mov     edi,dword [esp-0148h+01d0h]
        mov     ebx,edi
        mov     eax,dword [ecx]
        mov     edx,dword [ecx+04h]
        mov     dword [esp-016ch+01d0h],eax
        mov     dword [esp-016ch+04h+01d0h],edx
        mov     eax,dword [ebx]
        mov     edx,dword [ebx+04h]
        mov     dword [esp-018ch+01d0h],eax
        mov     dword [esp-018ch+04h+01d0h],edx
        mov     eax,dword [esp-016ch+01d0h]
        mov     edx,dword [esp-016ch+04h+01d0h]
        mov     esi,dword [esp-018ch+01d0h]
        mov     ebx,dword [esp-018ch+04h+01d0h]
        mov     dword [esp-01c4h+01d0h],esi
        mov     dword [esp-01c4h+04h+01d0h],ebx
        mov     esi,dword [esp-01c4h+01d0h]
        mov     ebx,dword [esp-01c4h+04h+01d0h]
        cmp     edx,ebx
        jne     L_65705
        cmp     eax,esi
        setc    al
        and     eax,byte 01h
        jmp     L_65706
L_65705:
        setl    al
        and     eax,byte 01h
L_65706:
        and     eax,eax
        setne   al
        and     al,al
        je      L_30791
; Line 3767:             { 
; Line 3768:                 swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0110h+01d0h],eax
        mov     dword [esp-0110h+04h+01d0h],edx
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-01b8h+01d0h],edi
        mov     ebx,edi
        mov     dword [ebx],eax
        mov     dword [ebx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0110h+01d0h]
        mov     edx,dword [esp-0110h+04h+01d0h]
        mov     dword [esp-019ch+01d0h],ecx
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 3718: } 
L_31002:
        inc     dword [esp-0154h+01d0h]
        mov     ecx,dword [esp-0148h+01d0h]
        mov     edi,dword [esp-0144h+01d0h]
        mov     eax,dword [ecx]
        mov     edx,dword [ecx+04h]
        mov     dword [esp-015ch+01d0h],eax
        mov     dword [esp-015ch+04h+01d0h],edx
        mov     eax,dword [edi]
        mov     edx,dword [edi+04h]
        mov     dword [esp-017ch+01d0h],eax
        mov     dword [esp-017ch+04h+01d0h],edx
        mov     eax,dword [esp-015ch+01d0h]
        mov     edx,dword [esp-015ch+04h+01d0h]
        mov     dword [esp-01b0h+01d0h],eax
        mov     dword [esp-01b0h+04h+01d0h],edx
        mov     esi,dword [esp-017ch+01d0h]
        mov     ebx,dword [esp-017ch+04h+01d0h]
        mov     eax,dword [esp-01b0h+01d0h]
        mov     edx,dword [esp-01b0h+04h+01d0h]
        cmp     edx,ebx
        jne     L_65708
        cmp     eax,esi
        setc    al
        and     eax,byte 01h
        jmp     L_65709
L_65708:
        setl    al
        and     eax,byte 01h
L_65709:
        and     eax,eax
        setne   al
        and     al,al
        je      L_30795
; Line 3771:                 { 
; Line 3772:                     swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     dword [esp-01a8h+01d0h],edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-01a8h+01d0h]
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0110h+01d0h],eax
        mov     dword [esp-0110h+04h+01d0h],edx
        mov     dword [esp-0198h+01d0h],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0198h+01d0h]
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [edi],eax
        mov     dword [edi+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0110h+01d0h]
        mov     edx,dword [esp-0110h+04h+01d0h]
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 3718: } 
L_31082:
        inc     dword [esp-0154h+01d0h]
; Line 3774:                 } 
L_30795:
; Line 3775:             } 
L_30791:
; Line 3776:         } 
L_30787:
; Line 3777:     } 
L_30783:
        mov     eax,dword [esp-0154h+01d0h]
; Line 3779: } 
L_30781:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,01c4h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_3$r#__less$LL~pL~$qpLpLr#__less$LL~ virtual
        [bits 32]
@std@__1@#__insertion_sort_3$r#__less$LL~pL~$qpLpLr#__less$LL~:
; Line 3817: void 
        add     esp,byte 0ffffffach
        push    ebx
        push    esi
        push    edi
L_31136:
        mov     edx,dword [esp+0ch+060h]
        mov     eax,dword [esp+08h+060h]
        mov     dword [esp-050h+060h],eax
        mov     eax,dword [esp+04h+060h]
        mov     dword [esp-054h+060h],eax
; Line 3820:     typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type; 
        mov     ecx,dword [esp-054h+060h]
        mov     edi,ecx
        add     edi,byte 010h
        push    edx
        mov     eax,edi
        push    eax
        mov     eax,dword [esp-054h+068h]
        add     ecx,byte 08h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$LL~pL~$qpLpLpLr#__less$LL~
        add     esp,byte 010h
; Line 3823:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     eax,edi
        add     eax,byte 08h
        cmp     eax,dword [esp-050h+060h]
        je      L_31141
L_31139:
; Line 3824:     { 
; Line 3825:         if (__comp(*__i, *__j)) 
        mov     dword [esp-04ch+060h],eax
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        mov     eax,dword [edi]
        mov     edx,dword [edi+04h]
        cmp     ebx,edx
        jne     L_65711
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        jmp     L_65712
L_65711:
        setl    al
        and     eax,byte 01h
L_65712:
        and     eax,eax
        setne   al
        and     al,al
        je      L_31146
; Line 3826:         { 
; Line 3827:             value_type __t(_VSTD::move(*__i)); 
        mov     eax,dword [esp-04ch+060h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-08h+060h],eax
        mov     dword [esp-08h+04h+060h],edx
        mov     ecx,dword [esp-04ch+060h]
; Line 3831:             { 
L_31150:
; Line 3832:                 *__j = _VSTD::move(*__k); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [edi]
        mov     edx,dword [edi+04h]
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
        mov     ecx,edi
; Line 3834:             } while (__j != __first && __comp(__t, *--__k)); 
L_31152:
        cmp     ecx,dword [esp-054h+060h]
        je      L_31215
        sub     edi,byte 08h
        mov     esi,dword [esp-08h+060h]
        mov     ebx,dword [esp-08h+04h+060h]
        mov     eax,dword [edi]
        mov     edx,dword [edi+04h]
        cmp     ebx,edx
        jne     L_65714
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        jmp     L_65715
L_65714:
        setl    al
        and     eax,byte 01h
L_65715:
        and     eax,eax
        setne   al
        and     al,al
        jne     L_31150
L_31215:
L_31151:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-08h+060h]
        mov     edx,dword [esp-08h+04h+060h]
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 3836:         } 
L_31146:
        mov     edi,dword [esp-04ch+060h]
; Line 3838:     } 
L_31142:
        mov     eax,dword [esp-04ch+060h]
        add     eax,byte 08h
L_31140:
        cmp     eax,dword [esp-050h+060h]
        jne     L_31139
L_31141:
; Line 3839: } 
L_31137:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 054h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_incomplete$r#__less$LL~pL~$qpLpLr#__less$LL~ virtual
        [bits 32]
@std@__1@#__insertion_sort_incomplete$r#__less$LL~pL~$qpLpLr#__less$LL~:
; Line 3842: bool 
        add     esp,0ffffff58h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_31251:
        mov     edx,dword [esp+0ch+0b8h]
        mov     eax,dword [esp+08h+0b8h]
        mov     dword [esp-0a4h+0b8h],eax
        mov     edi,dword [esp+04h+0b8h]
; Line 3845:     switch (__last - __first) 
        mov     ecx,dword [esp-0a4h+0b8h]
        mov     eax,edi
        mov     ebx,ecx
        sub     ebx,eax
        sar     ebx,03h
        mov     dword [esp-0a8h+0b8h],ecx
        cmp     ebx,byte 06h
        jnc     L_31275
        push    ebx
        mov     ebx,dword [ebx*4+L_65717]
        xchg    ebx,dword [esp]
        ret
        times $$-$ & 3 nop
L_65717:
        dd      L_31257
        dd      L_31259
        dd      L_31261
        dd      L_31268
        dd      L_31270
        dd      L_31272
; Line 3846:     { 
; Line 3847:     case 0: 
L_31257:
L_31259:
        mov     al,01h
        jmp     L_31252
L_31261:
        mov     ecx,dword [esp-0a8h+0b8h]
        sub     ecx,byte 08h
        mov     edi,dword [ecx]
        mov     ebp,dword [ecx+04h]
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        cmp     ebp,ebx
        jne     L_65718
        cmp     edi,esi
        setc    dl
        and     edx,byte 01h
        jmp     L_65719
L_65718:
        setl    dl
        and     edx,byte 01h
L_65719:
        and     edx,edx
        setne   dl
        and     dl,dl
        je      L_31263
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        mov     dword [esp-028h+0b8h],esi
        mov     dword [esp-028h+04h+0b8h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [ecx]
        mov     ebx,dword [ecx+04h]
        mov     dword [eax],esi
        mov     dword [eax+04h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-028h+0b8h]
        mov     edx,dword [esp-028h+04h+0b8h]
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 3718: } 
L_31339:
L_31263:
        mov     al,01h
        jmp     L_31252
L_31268:
        push    edx
        mov     ecx,dword [esp-0a8h+0bch]
        sub     ecx,byte 08h
        push    ecx
        mov     ecx,edi
        add     eax,byte 08h
        push    eax
        push    ecx
        call    @std@__1@#__sort3$r#__less$LL~pL~$qpLpLpLr#__less$LL~
        add     esp,byte 010h
        mov     al,01h
        jmp     L_31252
L_31270:
        push    edx
        mov     ecx,dword [esp-0a8h+0bch]
        sub     ecx,byte 08h
        push    ecx
        mov     ecx,edi
        mov     edx,eax
        add     edx,byte 010h
        push    edx
        add     eax,byte 08h
        push    eax
        push    ecx
        call    @std@__1@#__sort4$r#__less$LL~pL~$qpLpLpLpLr#__less$LL~
        add     esp,byte 014h
        mov     al,01h
        jmp     L_31252
L_31272:
        push    edx
        mov     ecx,dword [esp-0a8h+0bch]
        sub     ecx,byte 08h
        push    ecx
        mov     ecx,edi
        mov     edx,eax
        add     edx,byte 018h
        push    edx
        mov     edx,eax
        add     edx,byte 010h
        push    edx
        add     eax,byte 08h
        push    eax
        push    ecx
        call    @std@__1@#__sort5$r#__less$LL~pL~$qpLpLpLpLpLr#__less$LL~
        add     esp,byte 018h
        mov     al,01h
        jmp     L_31252
; Line 3863:     } 
L_31275:
L_31254:
        mov     ebx,eax
        add     ebx,byte 010h
        push    edx
        mov     ecx,ebx
        push    ecx
        mov     ecx,edi
        add     eax,byte 08h
        push    eax
        push    ecx
        call    @std@__1@#__sort3$r#__less$LL~pL~$qpLpLpLr#__less$LL~
        add     esp,byte 010h
        xor     eax,eax
        mov     dword [esp-0a0h+0b8h],eax
; Line 3869:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     ecx,ebx
        add     ecx,byte 08h
        cmp     ecx,dword [esp-0a4h+0b8h]
        je      L_31279
L_31277:
; Line 3870:     { 
; Line 3871:         if (__comp(*__i, *__j)) 
        mov     dword [esp-09ch+0b8h],ecx
        mov     eax,ebx
        mov     edx,ebx
        mov     esi,dword [ecx]
        mov     ebx,dword [ecx+04h]
        mov     ecx,dword [edx]
        mov     edx,dword [edx+04h]
        cmp     ebx,edx
        jne     L_65721
        cmp     esi,ecx
        setc    cl
        and     ecx,byte 01h
        jmp     L_65722
L_65721:
        setl    cl
        and     ecx,byte 01h
L_65722:
        and     ecx,ecx
        setne   cl
        and     cl,cl
        je      L_31284
; Line 3872:         { 
; Line 3873:             value_type __t(_VSTD::move(*__i)); 
        mov     ecx,dword [esp-09ch+0b8h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     dword [esp-08h+0b8h],ecx
        mov     dword [esp-08h+04h+0b8h],edx
        mov     ebp,eax
        mov     ecx,dword [esp-09ch+0b8h]
; Line 3877:             { 
L_31288:
; Line 3878:                 *__j = _VSTD::move(*__k); 
        mov     eax,ebp
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
        mov     ecx,ebp
; Line 3880:             } while (__j != __first && __comp(__t, *--__k)); 
L_31290:
        cmp     ecx,edi
        je      L_31438
        sub     ebp,byte 08h
        mov     eax,ebp
        mov     esi,dword [esp-08h+0b8h]
        mov     ebx,dword [esp-08h+04h+0b8h]
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        cmp     ebx,edx
        jne     L_65724
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        jmp     L_65725
L_65724:
        setl    al
        and     eax,byte 01h
L_65725:
        and     eax,eax
        setne   al
        and     al,al
        jne     L_31288
L_31438:
L_31289:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-08h+0b8h]
        mov     edx,dword [esp-08h+04h+0b8h]
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
        inc     dword [esp-0a0h+0b8h]
        cmp     dword [esp-0a0h+0b8h],byte 08h
        jne     L_31297
        mov     ecx,dword [esp-09ch+0b8h]
        add     ecx,byte 08h
        mov     eax,dword [esp-0a8h+0b8h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
        jmp     L_31252
L_31297:
; Line 3884:         } 
L_31284:
        mov     ebx,dword [esp-09ch+0b8h]
; Line 3886:     } 
L_31280:
        mov     eax,dword [esp-09ch+0b8h]
        add     eax,byte 08h
        mov     ecx,eax
L_31278:
        cmp     ecx,dword [esp-0a4h+0b8h]
        jne     L_31277
L_31279:
        mov     al,01h
; Line 3888: } 
L_31252:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0a8h
        ret
section code
section code
        section vsc@std@__1@#__sort$r#__less$LL~pL~$qpLpLr#__less$LL~ virtual
        [bits 32]
@std@__1@#__sort$r#__less$LL~pL~$qpLpLr#__less$LL~:
; Line 3926: void 
        add     esp,0fffffc9ch
        push    ebx
        push    esi
        push    edi
L_31474:
        mov     eax,dword [esp+0ch+0370h]
        mov     dword [esp-0264h+0370h],eax
        mov     eax,dword [esp+08h+0370h]
        mov     dword [esp-0260h+0370h],eax
        mov     eax,dword [esp+04h+0370h]
        mov     dword [esp-025ch+0370h],eax
; Line 3930:     typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type; 
L_31477:
; Line 3935:     { 
; Line 3936:     __restart: 
L_31483:
        mov     ebx,dword [esp-0260h+0370h]
        mov     eax,dword [esp-025ch+0370h]
        mov     ecx,ebx
        sub     ecx,eax
        sar     ecx,03h
        mov     edx,eax
        mov     eax,ecx
        and     eax,eax
        jl      L_31505
        cmp     eax,byte 06h
        jge     L_31505
        push    eax
        mov     eax,dword [eax*4+L_65728]
        xchg    eax,dword [esp]
        ret
        times $$-$ & 3 nop
L_65728:
        dd      L_31487
        dd      L_31489
        dd      L_31491
        dd      L_31498
        dd      L_31500
        dd      L_31502
; Line 3939:         { 
; Line 3940:         case 0: 
L_31487:
L_31489:
        jmp     L_31475
L_31491:
        mov     edi,ebx
        sub     edi,byte 08h
        mov     eax,edx
        mov     esi,dword [edi]
        mov     ebx,dword [edi+04h]
        mov     dword [esp-026ch+0370h],esi
        mov     dword [esp-026ch+04h+0370h],ebx
        mov     ecx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0318h+0370h],eax
        mov     dword [esp-0318h+04h+0370h],ecx
        mov     esi,dword [esp-026ch+0370h]
        mov     ebx,dword [esp-026ch+04h+0370h]
        mov     eax,dword [esp-0318h+0370h]
        mov     ecx,dword [esp-0318h+04h+0370h]
        cmp     ebx,ecx
        jne     L_65729
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        jmp     L_65730
L_65729:
        setl    al
        and     eax,byte 01h
L_65730:
        and     eax,eax
        setne   al
        and     al,al
        je      L_31475
        mov     eax,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     edx,dword [eax+04h]
        mov     dword [esp-0208h+0370h],ecx
        mov     dword [esp-0208h+04h+0370h],edx
        mov     dword [esp-0350h+0370h],edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0350h+0370h]
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0208h+0370h]
        mov     edx,dword [esp-0208h+04h+0370h]
        mov     dword [edi],eax
        mov     dword [edi+04h],edx
; Line 3718: } 
L_31743:
L_31493:
        jmp     L_31475
L_31498:
        mov     eax,dword [esp-0264h+0370h]
        push    eax
        mov     eax,ebx
        sub     eax,byte 08h
        push    eax
        mov     eax,dword [esp-025ch+0378h]
        mov     ecx,edx
        add     ecx,byte 08h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$LL~pL~$qpLpLpLr#__less$LL~
        add     esp,byte 010h
        jmp     L_31475
L_31500:
        mov     eax,dword [esp-0264h+0370h]
        push    eax
        mov     eax,ebx
        sub     eax,byte 08h
        push    eax
        mov     eax,dword [esp-025ch+0378h]
        mov     ecx,edx
        add     ecx,byte 010h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 08h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$LL~pL~$qpLpLpLpLr#__less$LL~
        add     esp,byte 014h
        jmp     L_31475
L_31502:
        mov     eax,dword [esp-0264h+0370h]
        push    eax
        mov     eax,ebx
        sub     eax,byte 08h
        push    eax
        mov     eax,dword [esp-025ch+0378h]
        mov     ecx,edx
        add     ecx,byte 018h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 010h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 08h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$LL~pL~$qpLpLpLpLpLr#__less$LL~
        add     esp,byte 018h
        jmp     L_31475
; Line 3956:         } 
L_31505:
L_31484:
        cmp     ecx,byte 06h
        jg      L_31507
; Line 3958:         { 
; Line 3959:             _VSTD::__insertion_sort_3<_Compare>(__first, __last, __comp); 
        mov     eax,dword [esp-0264h+0370h]
        push    eax
        mov     eax,dword [esp-0260h+0374h]
        push    eax
        mov     eax,dword [esp-025ch+0378h]
        push    eax
        call    @std@__1@#__insertion_sort_3$r#__less$LL~pL~$qpLpLr#__less$LL~
        add     esp,byte 0ch
        jmp     L_31475
; Line 3961:         } 
L_31507:
        mov     eax,edx
        mov     dword [esp-0338h+0370h],ebx
        sub     ebx,byte 08h
; Line 3967:         { 
; Line 3968:         difference_type __delta; 
        cmp     ecx,03e8h
        jl      L_31515
; Line 3970:         { 
; Line 3971:             __delta = __len/2; 
        mov     esi,ecx
        shr     esi,01fh
        add     ecx,esi
        sar     ecx,01h
        mov     esi,ecx
        shl     esi,03h
        add     eax,esi
        mov     dword [esp-0254h+0370h],eax
        mov     eax,ecx
        shr     eax,01fh
        add     eax,ecx
        sar     eax,01h
        mov     ecx,dword [esp-0264h+0370h]
        push    ecx
        mov     ecx,ebx
        push    ecx
        mov     esi,dword [esp-0254h+0378h]
        mov     ecx,eax
        shl     ecx,03h
        mov     eax,esi
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0254h+037ch]
        push    eax
        mov     eax,edx
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-025ch+0384h]
        push    eax
        call    @std@__1@#__sort5$r#__less$LL~pL~$qpLpLpLpLpLr#__less$LL~
        add     esp,byte 018h
        mov     dword [esp-0250h+0370h],eax
; Line 3975:         } 
        jmp     L_31520
L_31515:
; Line 3976:         else 
; Line 3977:         { 
; Line 3978:             __delta = __len/2; 
        mov     edx,ecx
        shr     edx,01fh
        add     ecx,edx
        sar     ecx,01h
        mov     dword [esp-035ch+0370h],eax
        shl     ecx,03h
        mov     eax,dword [esp-035ch+0370h]
        add     eax,ecx
        mov     dword [esp-0254h+0370h],eax
        mov     eax,dword [esp-0264h+0370h]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0254h+0378h]
        push    eax
        mov     eax,dword [esp-025ch+037ch]
        push    eax
        call    @std@__1@#__sort3$r#__less$LL~pL~$qpLpLpLr#__less$LL~
        add     esp,byte 010h
        mov     dword [esp-0250h+0370h],eax
; Line 3981:         } 
L_31520:
; Line 3982:         } 
        mov     eax,dword [esp-025ch+0370h]
        mov     dword [esp-024ch+0370h],eax
        mov     dword [esp-0358h+0370h],eax
        mov     dword [esp-02c8h+0370h],ebx
        mov     ecx,dword [esp-0358h+0370h]
        mov     dword [esp-0258h+0370h],ecx
        mov     eax,dword [esp-0254h+0370h]
        mov     dword [esp-0244h+0370h],eax
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     dword [esp-02b4h+0370h],ecx
        mov     dword [esp-02b4h+04h+0370h],edx
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-02e0h+0370h],eax
        mov     dword [esp-02e0h+04h+0370h],edx
        mov     esi,dword [esp-02b4h+0370h]
        mov     ebx,dword [esp-02b4h+04h+0370h]
        mov     eax,dword [esp-02e0h+0370h]
        mov     edx,dword [esp-02e0h+04h+0370h]
        cmp     ebx,edx
        jne     L_65732
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        jmp     L_65733
L_65732:
        setl    al
        and     eax,byte 01h
L_65733:
        and     eax,eax
        setne   al
        and     al,al
        jne     L_31528
; Line 3992:         { 
; Line 3995:             while (true) 
        mov     ecx,dword [esp-02c8h+0370h]
L_31532:
; Line 3996:             { 
; Line 3997:                 if (__i == --__j) 
        mov     eax,ecx
        sub     eax,byte 08h
        mov     dword [esp-02c8h+0370h],eax
        mov     ecx,eax
        cmp     dword [esp-0358h+0370h],ecx
        jne     L_31538
; Line 3998:                 { 
; Line 4001:                     ++__i;   
        mov     eax,dword [esp-0258h+0370h]
        add     eax,byte 08h
        mov     dword [esp-02f4h+0370h],eax
        mov     eax,dword [esp-0260h+0370h]
        mov     ecx,dword [esp-024ch+0370h]
        sub     eax,byte 08h
        mov     dword [esp-0320h+0370h],eax
        mov     dword [esp-0240h+0370h],eax
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     dword [esp-02bch+0370h],ecx
        mov     dword [esp-02bch+04h+0370h],edx
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-02e8h+0370h],eax
        mov     dword [esp-02e8h+04h+0370h],edx
        mov     esi,dword [esp-02bch+0370h]
        mov     ebx,dword [esp-02bch+04h+0370h]
        mov     eax,dword [esp-02e8h+0370h]
        mov     edx,dword [esp-02e8h+04h+0370h]
        cmp     ebx,edx
        jne     L_65735
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        jmp     L_65736
L_65735:
        setl    al
        and     eax,byte 01h
L_65736:
        and     eax,eax
        setne   al
        and     al,al
        jne     L_31542
; Line 4004:                     { 
; Line 4005:                         while (true) 
L_31546:
; Line 4006:                         { 
; Line 4007:                             if (__i == __j) 
        mov     ecx,dword [esp-0320h+0370h]
        cmp     dword [esp-02f4h+0370h],ecx
        je      L_31475
L_31552:
        mov     edx,dword [esp-024ch+0370h]
        mov     ecx,dword [esp-02f4h+0370h]
        mov     eax,ecx
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-0340h+0370h],esi
        mov     dword [esp-0340h+04h+0370h],ebx
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        mov     eax,dword [esp-0340h+0370h]
        mov     edx,dword [esp-0340h+04h+0370h]
        cmp     edx,ebx
        jne     L_65738
        cmp     eax,esi
        setc    al
        and     eax,byte 01h
        jmp     L_65739
L_65738:
        setl    al
        and     eax,byte 01h
L_65739:
        and     eax,eax
        setne   al
        and     al,al
        je      L_31557
; Line 4010:                             { 
; Line 4011:                                 swap(*__i, *__j); 
        mov     eax,ecx
        mov     edx,dword [esp-0240h+0370h]
        mov     dword [esp-031ch+0370h],edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-0334h+0370h],esi
        mov     dword [esp-0334h+04h+0370h],ebx
        mov     esi,dword [esp-0334h+0370h]
        mov     ebx,dword [esp-0334h+04h+0370h]
        mov     dword [esp-0208h+0370h],esi
        mov     dword [esp-0208h+04h+0370h],ebx
        mov     edx,dword [esp-031ch+0370h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-02c4h+0370h],esi
        mov     dword [esp-02c4h+04h+0370h],ebx
        mov     dword [esp-0324h+0370h],eax
        mov     esi,dword [esp-02c4h+0370h]
        mov     ebx,dword [esp-02c4h+04h+0370h]
        mov     eax,dword [esp-0324h+0370h]
        mov     dword [eax],esi
        mov     dword [eax+04h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0208h+0370h]
        mov     edx,dword [esp-0208h+04h+0370h]
        mov     dword [esp-032ch+0370h],eax
        mov     dword [esp-032ch+04h+0370h],edx
        mov     eax,dword [esp-031ch+0370h]
        mov     esi,dword [esp-032ch+0370h]
        mov     ebx,dword [esp-032ch+04h+0370h]
        mov     dword [eax],esi
        mov     dword [eax+04h],ebx
; Line 3718: } 
L_31855:
        inc     dword [esp-0250h+0370h]
        mov     eax,ecx
        add     eax,byte 08h
        mov     dword [esp-02f4h+0370h],eax
; Line 4014:                                 break; 
        jmp     L_31547
L_31557:
        mov     eax,ecx
        add     eax,byte 08h
        mov     dword [esp-02f4h+0370h],eax
; Line 4017:                         } 
L_31548:
        jmp     L_31546
L_31547:
; Line 4018:                     } 
L_31542:
        mov     ecx,dword [esp-0320h+0370h]
        cmp     dword [esp-02f4h+0370h],ecx
        je      L_31475
L_31570:
L_31575:
; Line 4023:                     { 
; Line 4024:                         while (!__comp(*__first, *__i)) 
        mov     ecx,dword [esp-025ch+0370h]
        mov     dword [esp-0300h+0370h],ecx
        mov     eax,dword [esp-02f4h+0370h]
        mov     dword [esp-023ch+0370h],eax
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     dword [esp-02fch+0370h],ecx
        mov     dword [esp-02fch+04h+0370h],edx
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0310h+0370h],eax
        mov     dword [esp-0310h+04h+0370h],edx
        mov     esi,dword [esp-02fch+0370h]
        mov     ebx,dword [esp-02fch+04h+0370h]
        mov     eax,dword [esp-0310h+0370h]
        mov     edx,dword [esp-0310h+04h+0370h]
        cmp     ebx,edx
        jne     L_65741
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        jmp     L_65742
L_65741:
        setl    al
        and     eax,byte 01h
L_65742:
        and     eax,eax
        setne   al
        and     al,al
        jne     L_31582
L_31581:
        mov     eax,dword [esp-023ch+0370h]
        add     eax,byte 08h
        mov     dword [esp-02f4h+0370h],eax
L_31583:
        mov     ecx,dword [esp-0300h+0370h]
        mov     eax,dword [esp-02f4h+0370h]
        mov     dword [esp-023ch+0370h],eax
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        cmp     edx,ebx
        jne     L_65744
        cmp     ecx,esi
        setc    al
        and     eax,byte 01h
        jmp     L_65745
L_65744:
        setl    al
        and     eax,byte 01h
L_65745:
        and     eax,eax
        setne   al
        and     al,al
        je      L_31581
L_31582:
        mov     edx,dword [esp-0300h+0370h]
        mov     ecx,dword [esp-0240h+0370h]
        sub     ecx,byte 08h
        mov     eax,ecx
        mov     dword [esp-0240h+0370h],eax
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-02f0h+0370h],esi
        mov     dword [esp-02f0h+04h+0370h],ebx
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0308h+0370h],eax
        mov     dword [esp-0308h+04h+0370h],edx
        mov     esi,dword [esp-02f0h+0370h]
        mov     ebx,dword [esp-02f0h+04h+0370h]
        mov     eax,dword [esp-0308h+0370h]
        mov     edx,dword [esp-0308h+04h+0370h]
        cmp     ebx,edx
        jne     L_65747
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        jmp     L_65748
L_65747:
        setl    al
        and     eax,byte 01h
L_65748:
        and     eax,eax
        setne   al
        and     al,al
        je      L_31589
L_31588:
L_31590:
; Line 4026:                         while (__comp(*__first, *--__j)) 
        mov     edx,dword [esp-0300h+0370h]
        mov     ecx,dword [esp-0240h+0370h]
        sub     ecx,byte 08h
        mov     eax,ecx
        mov     dword [esp-0240h+0370h],eax
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-034ch+0370h],esi
        mov     dword [esp-034ch+04h+0370h],ebx
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        mov     eax,dword [esp-034ch+0370h]
        mov     edx,dword [esp-034ch+04h+0370h]
        cmp     edx,ebx
        jne     L_65750
        cmp     eax,esi
        setc    al
        and     eax,byte 01h
        jmp     L_65751
L_65750:
        setl    al
        and     eax,byte 01h
L_65751:
        and     eax,eax
        setne   al
        and     al,al
        jne     L_31588
L_31589:
        mov     dword [esp-0344h+0370h],ecx
        mov     eax,dword [esp-02f4h+0370h]
        cmp     eax,dword [esp-0344h+0370h]
        jge     L_31576
; Line 4029:                             break; 
L_31595:
        mov     ebx,dword [esp-023ch+0370h]
        mov     eax,dword [esp-0240h+0370h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     dword [esp-0208h+0370h],ecx
        mov     dword [esp-0208h+04h+0370h],edx
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     dword [ebx],ecx
        mov     dword [ebx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0208h+0370h]
        mov     edx,dword [esp-0208h+04h+0370h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
; Line 3718: } 
L_31983:
        inc     dword [esp-0250h+0370h]
        mov     eax,dword [esp-023ch+0370h]
        add     eax,byte 08h
        mov     dword [esp-02f4h+0370h],eax
; Line 4033:                     } 
L_31577:
; Line 4022:                     while (true) 
        jmp     L_31575
L_31576:
        mov     eax,dword [esp-023ch+0370h]
        mov     dword [esp-025ch+0370h],eax
        jmp     L_31483
L_31538:
        mov     ecx,dword [esp-02c8h+0370h]
        mov     eax,ecx
        mov     ebx,dword [esp-0244h+0370h]
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0364h+0370h],eax
        mov     dword [esp-0364h+04h+0370h],edx
        mov     esi,dword [ebx]
        mov     ebx,dword [ebx+04h]
        mov     eax,dword [esp-0364h+0370h]
        mov     edx,dword [esp-0364h+04h+0370h]
        cmp     edx,ebx
        jne     L_65753
        cmp     eax,esi
        setc    al
        and     eax,byte 01h
        jmp     L_65754
L_65753:
        setl    al
        and     eax,byte 01h
L_65754:
        and     eax,eax
        setne   al
        and     al,al
        je      L_31606
; Line 4041:                 { 
; Line 4042:                     swap(*__i, *__j); 
        mov     eax,dword [esp-0258h+0370h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-027ch+0370h],esi
        mov     dword [esp-027ch+04h+0370h],ebx
        mov     esi,dword [esp-027ch+0370h]
        mov     ebx,dword [esp-027ch+04h+0370h]
        mov     dword [esp-0208h+0370h],esi
        mov     dword [esp-0208h+04h+0370h],ebx
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-0274h+0370h],esi
        mov     dword [esp-0274h+04h+0370h],ebx
        mov     esi,dword [esp-0274h+0370h]
        mov     ebx,dword [esp-0274h+04h+0370h]
        mov     dword [eax],esi
        mov     dword [eax+04h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0208h+0370h]
        mov     edx,dword [esp-0208h+04h+0370h]
        mov     dword [esp-0354h+0370h],ecx
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 3718: } 
L_32063:
        inc     dword [esp-0250h+0370h]
; Line 4044:                     break;   
        jmp     L_31533
L_31606:
; Line 4046:             } 
L_31534:
        jmp     L_31532
L_31533:
; Line 4047:         } 
L_31528:
        mov     eax,dword [esp-0258h+0370h]
        add     eax,byte 08h
        mov     dword [esp-0248h+0370h],eax
        mov     ecx,dword [esp-02c8h+0370h]
        cmp     dword [esp-0248h+0370h],ecx
        jge     L_31619
; Line 4053:         { 
; Line 4056:             while (true) 
L_31623:
; Line 4057:             { 
; Line 4059:                 while (__comp(*__i, *__m)) 
        mov     ecx,dword [esp-0248h+0370h]
        mov     dword [esp-0284h+0370h],ecx
        mov     eax,dword [esp-0244h+0370h]
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     dword [esp-029ch+0370h],ecx
        mov     dword [esp-029ch+04h+0370h],edx
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-02d8h+0370h],eax
        mov     dword [esp-02d8h+04h+0370h],edx
        mov     esi,dword [esp-029ch+0370h]
        mov     ebx,dword [esp-029ch+04h+0370h]
        mov     eax,dword [esp-02d8h+0370h]
        mov     edx,dword [esp-02d8h+04h+0370h]
        cmp     ebx,edx
        jne     L_65756
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        jmp     L_65757
L_65756:
        setl    al
        and     eax,byte 01h
L_65757:
        and     eax,eax
        setne   al
        and     al,al
        je      L_31630
L_31629:
        mov     eax,dword [esp-0284h+0370h]
        add     eax,byte 08h
        mov     dword [esp-0248h+0370h],eax
L_31631:
        mov     ecx,dword [esp-0248h+0370h]
        mov     dword [esp-0284h+0370h],ecx
        mov     eax,dword [esp-0244h+0370h]
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        cmp     edx,ebx
        jne     L_65759
        cmp     ecx,esi
        setc    al
        and     eax,byte 01h
        jmp     L_65760
L_65759:
        setl    al
        and     eax,byte 01h
L_65760:
        and     eax,eax
        setne   al
        and     al,al
        jne     L_31629
L_31630:
        sub     dword [esp-02c8h+0370h],byte 08h
        mov     ecx,dword [esp-02c8h+0370h]
        mov     edx,ecx
        mov     eax,dword [esp-0244h+0370h]
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-028ch+0370h],esi
        mov     dword [esp-028ch+04h+0370h],ebx
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-02d0h+0370h],eax
        mov     dword [esp-02d0h+04h+0370h],edx
        mov     esi,dword [esp-028ch+0370h]
        mov     ebx,dword [esp-028ch+04h+0370h]
        mov     eax,dword [esp-02d0h+0370h]
        mov     edx,dword [esp-02d0h+04h+0370h]
        cmp     ebx,edx
        jne     L_65762
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        jmp     L_65763
L_65762:
        setl    al
        and     eax,byte 01h
L_65763:
        and     eax,eax
        setne   al
        and     al,al
        jne     L_31637
L_31636:
L_31638:
; Line 4062:                 while (!__comp(*--__j, *__m)) 
        mov     eax,ecx
        sub     eax,byte 08h
        mov     dword [esp-02c8h+0370h],eax
        mov     ecx,eax
        mov     edx,eax
        mov     eax,dword [esp-0244h+0370h]
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        cmp     ebx,edx
        jne     L_65765
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        jmp     L_65766
L_65765:
        setl    al
        and     eax,byte 01h
L_65766:
        and     eax,eax
        setne   al
        and     al,al
        je      L_31636
L_31637:
        mov     edx,dword [esp-02c8h+0370h]
        cmp     dword [esp-0248h+0370h],edx
        jg      L_31624
; Line 4065:                     break; 
L_31643:
        mov     eax,dword [esp-0284h+0370h]
        mov     dword [esp-0280h+0370h],ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-02a4h+0370h],esi
        mov     dword [esp-02a4h+04h+0370h],ebx
        mov     esi,dword [esp-02a4h+0370h]
        mov     ebx,dword [esp-02a4h+04h+0370h]
        mov     dword [esp-0208h+0370h],esi
        mov     dword [esp-0208h+04h+0370h],ebx
        mov     edx,dword [esp-0280h+0370h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-0294h+0370h],esi
        mov     dword [esp-0294h+04h+0370h],ebx
        mov     esi,dword [esp-0294h+0370h]
        mov     ebx,dword [esp-0294h+04h+0370h]
        mov     dword [eax],esi
        mov     dword [eax+04h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0208h+0370h]
        mov     edx,dword [esp-0208h+04h+0370h]
        mov     dword [esp-02ach+0370h],eax
        mov     dword [esp-02ach+04h+0370h],edx
        mov     eax,dword [esp-0280h+0370h]
        mov     esi,dword [esp-02ach+0370h]
        mov     ebx,dword [esp-02ach+04h+0370h]
        mov     dword [eax],esi
        mov     dword [eax+04h],ebx
; Line 3718: } 
L_32191:
        inc     dword [esp-0250h+0370h]
        mov     edx,dword [esp-0248h+0370h]
        cmp     dword [esp-0254h+0370h],edx
        jne     L_31648
        mov     dword [esp-0254h+0370h],ecx
L_31648:
        mov     eax,dword [esp-0284h+0370h]
        add     eax,byte 08h
        mov     dword [esp-0248h+0370h],eax
; Line 4073:             } 
L_31625:
        mov     eax,dword [esp-0254h+0370h]
        mov     dword [esp-0244h+0370h],eax
        jmp     L_31623
L_31624:
; Line 4074:         } 
L_31619:
        mov     ecx,dword [esp-0254h+0370h]
        cmp     dword [esp-0248h+0370h],ecx
        je      L_31659
        mov     edx,dword [esp-0244h+0370h]
        mov     ecx,dword [esp-0248h+0370h]
        mov     eax,ecx
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        cmp     ebx,edx
        jne     L_65768
        cmp     esi,eax
        setc    al
        and     eax,byte 01h
        jmp     L_65769
L_65768:
        setl    al
        and     eax,byte 01h
L_65769:
        and     eax,eax
        setne   al
        and     al,al
        je      L_31659
; Line 4077:         { 
; Line 4078:             swap(*__i, *__m); 
        mov     eax,dword [esp-0244h+0370h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-0208h+0370h],esi
        mov     dword [esp-0208h+04h+0370h],ebx
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [ecx],esi
        mov     dword [ecx+04h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0208h+0370h]
        mov     edx,dword [esp-0208h+04h+0370h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
; Line 3718: } 
L_32271:
        inc     dword [esp-0250h+0370h]
; Line 4080:         } 
L_31659:
        cmp     dword [esp-0250h+0370h],byte 00h
        jne     L_31666
; Line 4084:         { 
; Line 4085:             bool __fs = _VSTD::__insertion_sort_incomplete<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-0264h+0370h]
        push    eax
        mov     eax,dword [esp-0248h+0374h]
        push    eax
        mov     eax,dword [esp-025ch+0378h]
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$LL~pL~$qpLpLr#__less$LL~
        add     esp,byte 0ch
        mov     bl,al
        mov     eax,dword [esp-0264h+0370h]
        push    eax
        mov     eax,dword [esp-0260h+0374h]
        push    eax
        mov     eax,dword [esp-0248h+0378h]
        add     eax,byte 08h
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$LL~pL~$qpLpLr#__less$LL~
        add     esp,byte 0ch
        and     al,al
        je      L_31670
; Line 4087:             { 
; Line 4088:                 if (__fs) 
        and     bl,bl
        jne     L_31475
L_31674:
        mov     eax,dword [esp-0248h+0370h]
        mov     dword [esp-0260h+0370h],eax
; Line 4091:                 continue; 
        jmp     L_31477
L_31670:
; Line 4093:             else 
; Line 4094:             { 
; Line 4095:                 if (__fs) 
        and     bl,bl
        je      L_31684
; Line 4096:                 { 
; Line 4097:                     __first = ++__i; 
        mov     eax,dword [esp-0248h+0370h]
        add     eax,byte 08h
        mov     dword [esp-025ch+0370h],eax
; Line 4098:                     continue; 
        jmp     L_31477
L_31684:
; Line 4100:             } 
L_31680:
; Line 4101:         } 
L_31666:
        mov     eax,dword [esp-0260h+0370h]
        mov     ecx,dword [esp-0248h+0370h]
        sub     eax,ecx
        mov     edx,eax
        sar     edx,03h
        mov     eax,dword [esp-025ch+0370h]
        sub     eax,ecx
        neg     eax
        imul    eax,byte 01h
        sar     eax,03h
        cmp     eax,edx
        jge     L_31697
; Line 4104:         { 
; Line 4105:             _VSTD::__sort<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-0264h+0370h]
        push    eax
        mov     eax,dword [esp-0248h+0374h]
        push    eax
        mov     eax,dword [esp-025ch+0378h]
        push    eax
        call    @std@__1@#__sort$r#__less$LL~pL~$qpLpLr#__less$LL~
        add     esp,byte 0ch
        mov     eax,dword [esp-0248h+0370h]
        add     eax,byte 08h
        mov     dword [esp-025ch+0370h],eax
; Line 4108:         } 
        jmp     L_31702
L_31697:
; Line 4109:         else 
; Line 4110:         { 
; Line 4111:             _VSTD::__sort<_Compare>(__i+1, __last, __comp); 
        mov     eax,dword [esp-0264h+0370h]
        push    eax
        mov     eax,dword [esp-0260h+0374h]
        push    eax
        mov     eax,ecx
        add     eax,byte 08h
        push    eax
        call    @std@__1@#__sort$r#__less$LL~pL~$qpLpLr#__less$LL~
        add     esp,byte 0ch
        mov     eax,dword [esp-0248h+0370h]
        mov     dword [esp-0260h+0370h],eax
; Line 4114:         } 
L_31702:
; Line 4115:     } 
L_31479:
; Line 3934:     while (true) 
        jmp     L_31477
; Line 4116: } 
L_31478:
L_31475:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,0364h
        ret
section code
section code
        section vsc@std@__1@#__sort3$r#__less$uLuL~puL~$qpuLpuLpuLr#__less$uLuL~ virtual
        [bits 32]
@std@__1@#__sort3$r#__less$uLuL~puL~$qpuLpuLpuLr#__less$uLuL~:
; Line 3689: unsigned 
        add     esp,0fffffe68h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_32325:
        mov     eax,dword [esp+0ch+01a8h]
        mov     ecx,dword [esp+08h+01a8h]
        mov     dword [esp-0190h+01a8h],ecx
        mov     edx,dword [esp+04h+01a8h]
; Line 3692:     unsigned __r = 0; 
        xor     ebp,ebp
        mov     ecx,dword [esp-0190h+01a8h]
        mov     edi,ecx
        mov     dword [esp-018ch+01a8h],edx
        mov     esi,dword [ecx]
        mov     ebx,dword [ecx+04h]
        mov     ecx,dword [edx]
        mov     edx,dword [edx+04h]
        cmp     ebx,edx
        jne     L_65771
        cmp     esi,ecx
L_65771:
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_32328
; Line 3694:     { 
; Line 3695:         if (!__c(*__z, *__y))       
        mov     ecx,edi
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        cmp     ebx,edx
        jne     L_65773
        cmp     esi,ecx
L_65773:
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_32332
        mov     eax,ebp
        jmp     L_32326
L_32332:
        mov     ebx,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebx]
        mov     edx,dword [ebx+04h]
        mov     dword [esp-0158h+01a8h],ecx
        mov     dword [esp-0158h+04h+01a8h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     edx,dword [eax+04h]
        mov     dword [ebx],ecx
        mov     dword [ebx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0158h+01a8h]
        mov     edx,dword [esp-0158h+04h+01a8h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
; Line 3718: } 
L_32408:
        mov     edi,01h
        mov     eax,dword [esp-0190h+01a8h]
        mov     ecx,dword [esp-018ch+01a8h]
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        cmp     ebx,edx
        jne     L_65775
        cmp     esi,ecx
L_65775:
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_32337
; Line 3701:         { 
; Line 3702:             swap(*__x, *__y);       
        mov     ebx,dword [esp-018ch+01a8h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebx]
        mov     edx,dword [ebx+04h]
        mov     dword [esp-0158h+01a8h],ecx
        mov     dword [esp-0158h+04h+01a8h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     edx,dword [eax+04h]
        mov     dword [ebx],ecx
        mov     dword [ebx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0158h+01a8h]
        mov     edx,dword [esp-0158h+04h+01a8h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
; Line 3718: } 
L_32488:
        mov     edi,02h
; Line 3704:         } 
L_32337:
        mov     eax,edi
        jmp     L_32326
; Line 3706:     } 
L_32328:
        mov     ebp,eax
        mov     ecx,edi
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        mov     eax,dword [ecx]
        mov     edx,dword [ecx+04h]
        cmp     ebx,edx
        jne     L_65777
        cmp     esi,eax
L_65777:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_32347
; Line 3708:     { 
; Line 3709:         swap(*__x, *__z);           
        mov     ebx,dword [esp-018ch+01a8h]
        mov     eax,ebp
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [ebx]
        mov     edx,dword [ebx+04h]
        mov     dword [esp-0158h+01a8h],ecx
        mov     dword [esp-0158h+04h+01a8h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     edx,dword [eax+04h]
        mov     dword [ebx],ecx
        mov     dword [ebx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0158h+01a8h]
        mov     edx,dword [esp-0158h+04h+01a8h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
; Line 3718: } 
L_32568:
        mov     eax,01h
        jmp     L_32326
; Line 3712:     } 
L_32347:
        mov     ecx,dword [esp-018ch+01a8h]
        mov     ebx,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [ecx]
        mov     edx,dword [ecx+04h]
        mov     dword [esp-0158h+01a8h],eax
        mov     dword [esp-0158h+04h+01a8h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [ebx]
        mov     edx,dword [ebx+04h]
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0158h+01a8h]
        mov     edx,dword [esp-0158h+04h+01a8h]
        mov     dword [ebx],eax
        mov     dword [ebx+04h],edx
; Line 3718: } 
L_32632:
        mov     ecx,01h
        mov     eax,ebp
        mov     edi,dword [esp-0190h+01a8h]
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0198h+01a8h],eax
        mov     dword [esp-0198h+04h+01a8h],edx
        mov     esi,dword [edi]
        mov     ebx,dword [edi+04h]
        mov     eax,dword [esp-0198h+01a8h]
        mov     edx,dword [esp-0198h+04h+01a8h]
        cmp     edx,ebx
        jne     L_65779
        cmp     eax,esi
L_65779:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_32354
; Line 3716:     { 
; Line 3717:         swap(*__y, *__z);           
        mov     eax,ebp
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [edi]
        mov     edx,dword [edi+04h]
        mov     dword [esp-0158h+01a8h],ecx
        mov     dword [esp-0158h+04h+01a8h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     edx,dword [eax+04h]
        mov     dword [edi],ecx
        mov     dword [edi+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0158h+01a8h]
        mov     edx,dword [esp-0158h+04h+01a8h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
; Line 3718: } 
L_32712:
        mov     ecx,02h
; Line 3719:     } 
L_32354:
        mov     eax,ecx
; Line 3721: }                                   
L_32326:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0198h
        ret
section code
section code
        section vsc@std@__1@#__sort4$r#__less$uLuL~puL~$qpuLpuLpuLpuLr#__less$uLuL~ virtual
        [bits 32]
@std@__1@#__sort4$r#__less$uLuL~puL~$qpuLpuLpuLpuLr#__less$uLuL~:
; Line 3726: unsigned 
        add     esp,0fffffecch
        push    ebx
        push    esi
        push    edi
L_32766:
        mov     ecx,dword [esp+014h+0140h]
        mov     esi,dword [esp+010h+0140h]
        mov     eax,dword [esp+0ch+0140h]
        mov     dword [esp-0100h+0140h],eax
        mov     eax,dword [esp+08h+0140h]
        mov     dword [esp-0fch+0140h],eax
        mov     eax,dword [esp+04h+0140h]
        mov     dword [esp-0f8h+0140h],eax
; Line 3730:     unsigned __r = __sort3<_Compare>(__x1, __x2, __x3, __c); 
        push    ecx
        mov     eax,dword [esp-0100h+0144h]
        push    eax
        mov     eax,dword [esp-0fch+0148h]
        push    eax
        mov     eax,dword [esp-0f8h+014ch]
        push    eax
        call    @std@__1@#__sort3$r#__less$uLuL~puL~$qpuLpuLpuLr#__less$uLuL~
        add     esp,byte 010h
        mov     dword [esp-0f4h+0140h],eax
        mov     dword [esp-0114h+0140h],esi
        mov     ecx,dword [esp-0100h+0140h]
        mov     ebx,ecx
        mov     eax,dword [esi]
        mov     edx,dword [esi+04h]
        mov     dword [esp-011ch+0140h],eax
        mov     dword [esp-011ch+04h+0140h],edx
        mov     esi,dword [ebx]
        mov     ebx,dword [ebx+04h]
        mov     eax,dword [esp-011ch+0140h]
        mov     edx,dword [esp-011ch+04h+0140h]
        cmp     edx,ebx
        jne     L_65781
        cmp     eax,esi
L_65781:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_32769
; Line 3732:     { 
; Line 3733:         swap(*__x3, *__x4); 
        mov     eax,dword [esp-0114h+0140h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-0c0h+0140h],esi
        mov     dword [esp-0c0h+04h+0140h],ebx
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [ecx],esi
        mov     dword [ecx+04h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0c0h+0140h]
        mov     edx,dword [esp-0c0h+04h+0140h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
; Line 3718: } 
L_32821:
        inc     dword [esp-0f4h+0140h]
        mov     edi,dword [esp-0100h+0140h]
        mov     ecx,dword [esp-0fch+0140h]
        mov     ebx,ecx
        mov     eax,dword [edi]
        mov     edx,dword [edi+04h]
        mov     dword [esp-0108h+0140h],eax
        mov     dword [esp-0108h+04h+0140h],edx
        mov     eax,dword [ebx]
        mov     edx,dword [ebx+04h]
        mov     dword [esp-012ch+0140h],eax
        mov     dword [esp-012ch+04h+0140h],edx
        mov     esi,dword [esp-0108h+0140h]
        mov     ebx,dword [esp-0108h+04h+0140h]
        mov     eax,dword [esp-012ch+0140h]
        mov     edx,dword [esp-012ch+04h+0140h]
        cmp     ebx,edx
        jne     L_65783
        cmp     esi,eax
L_65783:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_32773
; Line 3736:         { 
; Line 3737:             swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0c0h+0140h],eax
        mov     dword [esp-0c0h+04h+0140h],edx
        mov     eax,edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0c0h+0140h]
        mov     edx,dword [esp-0c0h+04h+0140h]
        mov     dword [esp-0130h+0140h],edi
        mov     ecx,edi
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 3718: } 
L_32901:
        inc     dword [esp-0f4h+0140h]
        mov     edi,dword [esp-0fch+0140h]
        mov     ecx,dword [esp-0f8h+0140h]
        mov     eax,dword [edi]
        mov     edx,dword [edi+04h]
        mov     dword [esp-0110h+0140h],eax
        mov     dword [esp-0110h+04h+0140h],edx
        mov     eax,dword [ecx]
        mov     edx,dword [ecx+04h]
        mov     dword [esp-0124h+0140h],eax
        mov     dword [esp-0124h+04h+0140h],edx
        mov     esi,dword [esp-0110h+0140h]
        mov     ebx,dword [esp-0110h+04h+0140h]
        mov     eax,dword [esp-0124h+0140h]
        mov     edx,dword [esp-0124h+04h+0140h]
        cmp     ebx,edx
        jne     L_65785
        cmp     esi,eax
L_65785:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_32777
; Line 3740:             { 
; Line 3741:                 swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [ecx]
        mov     edx,dword [ecx+04h]
        mov     dword [esp-0c0h+0140h],eax
        mov     dword [esp-0c0h+04h+0140h],edx
        mov     dword [esp-0134h+0140h],edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0134h+0140h]
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0c0h+0140h]
        mov     edx,dword [esp-0c0h+04h+0140h]
        mov     dword [edi],eax
        mov     dword [edi+04h],edx
; Line 3718: } 
L_32981:
        inc     dword [esp-0f4h+0140h]
; Line 3743:             } 
L_32777:
; Line 3744:         } 
L_32773:
; Line 3745:     } 
L_32769:
        mov     eax,dword [esp-0f4h+0140h]
; Line 3747: } 
L_32767:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,0134h
        ret
section code
section code
        section vsc@std@__1@#__sort5$r#__less$uLuL~puL~$qpuLpuLpuLpuLpuLr#__less$uLuL~ virtual
        [bits 32]
@std@__1@#__sort5$r#__less$uLuL~puL~$qpuLpuLpuLpuLpuLr#__less$uLuL~:
; Line 3752: _LIBCPP_HIDDEN 
        add     esp,0fffffe3ch
        push    ebx
        push    esi
        push    edi
L_33035:
        mov     ecx,dword [esp+018h+01d0h]
        mov     esi,dword [esp+014h+01d0h]
        mov     eax,dword [esp+010h+01d0h]
        mov     dword [esp-0150h+01d0h],eax
        mov     eax,dword [esp+0ch+01d0h]
        mov     dword [esp-014ch+01d0h],eax
        mov     eax,dword [esp+08h+01d0h]
        mov     dword [esp-0148h+01d0h],eax
        mov     eax,dword [esp+04h+01d0h]
        mov     dword [esp-0144h+01d0h],eax
; Line 3757:     unsigned __r = __sort4<_Compare>(__x1, __x2, __x3, __x4, __c); 
        push    ecx
        mov     eax,dword [esp-0150h+01d4h]
        push    eax
        mov     eax,dword [esp-014ch+01d8h]
        push    eax
        mov     eax,dword [esp-0148h+01dch]
        push    eax
        mov     eax,dword [esp-0144h+01e0h]
        push    eax
        call    @std@__1@#__sort4$r#__less$uLuL~puL~$qpuLpuLpuLpuLr#__less$uLuL~
        add     esp,byte 014h
        mov     dword [esp-0154h+01d0h],eax
        mov     ecx,esi
        mov     edi,dword [esp-0150h+01d0h]
        mov     ebx,edi
        mov     eax,dword [esi]
        mov     edx,dword [esi+04h]
        mov     dword [esp-0164h+01d0h],eax
        mov     dword [esp-0164h+04h+01d0h],edx
        mov     eax,dword [ebx]
        mov     edx,dword [ebx+04h]
        mov     dword [esp-0184h+01d0h],eax
        mov     dword [esp-0184h+04h+01d0h],edx
        mov     esi,dword [esp-0164h+01d0h]
        mov     ebx,dword [esp-0164h+04h+01d0h]
        mov     eax,dword [esp-0184h+01d0h]
        mov     edx,dword [esp-0184h+04h+01d0h]
        cmp     ebx,edx
        jne     L_65787
        cmp     esi,eax
L_65787:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_33038
; Line 3759:     { 
; Line 3760:         swap(*__x4, *__x5); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0110h+01d0h],eax
        mov     dword [esp-0110h+04h+01d0h],edx
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-01b4h+01d0h],edi
        mov     ebx,edi
        mov     dword [ebx],eax
        mov     dword [ebx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0110h+01d0h]
        mov     edx,dword [esp-0110h+04h+01d0h]
        mov     dword [esp-01a4h+01d0h],ecx
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 3718: } 
L_33097:
        inc     dword [esp-0154h+01d0h]
        mov     ecx,dword [esp-0150h+01d0h]
        mov     eax,ecx
        mov     edi,dword [esp-014ch+01d0h]
        mov     ebx,edi
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0174h+01d0h],eax
        mov     dword [esp-0174h+04h+01d0h],edx
        mov     eax,dword [ebx]
        mov     edx,dword [ebx+04h]
        mov     dword [esp-0194h+01d0h],eax
        mov     dword [esp-0194h+04h+01d0h],edx
        mov     esi,dword [esp-0174h+01d0h]
        mov     ebx,dword [esp-0174h+04h+01d0h]
        mov     eax,dword [esp-0194h+01d0h]
        mov     edx,dword [esp-0194h+04h+01d0h]
        cmp     ebx,edx
        jne     L_65789
        cmp     esi,eax
L_65789:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_33042
; Line 3763:         { 
; Line 3764:             swap(*__x3, *__x4); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0110h+01d0h],eax
        mov     dword [esp-0110h+04h+01d0h],edx
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-01bch+01d0h],edi
        mov     ebx,edi
        mov     dword [ebx],eax
        mov     dword [ebx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0110h+01d0h]
        mov     edx,dword [esp-0110h+04h+01d0h]
        mov     dword [esp-01a0h+01d0h],ecx
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 3718: } 
L_33177:
        inc     dword [esp-0154h+01d0h]
        mov     ecx,dword [esp-014ch+01d0h]
        mov     edi,dword [esp-0148h+01d0h]
        mov     ebx,edi
        mov     eax,dword [ecx]
        mov     edx,dword [ecx+04h]
        mov     dword [esp-016ch+01d0h],eax
        mov     dword [esp-016ch+04h+01d0h],edx
        mov     eax,dword [ebx]
        mov     edx,dword [ebx+04h]
        mov     dword [esp-018ch+01d0h],eax
        mov     dword [esp-018ch+04h+01d0h],edx
        mov     eax,dword [esp-016ch+01d0h]
        mov     edx,dword [esp-016ch+04h+01d0h]
        mov     esi,dword [esp-018ch+01d0h]
        mov     ebx,dword [esp-018ch+04h+01d0h]
        mov     dword [esp-01c4h+01d0h],esi
        mov     dword [esp-01c4h+04h+01d0h],ebx
        mov     esi,dword [esp-01c4h+01d0h]
        mov     ebx,dword [esp-01c4h+04h+01d0h]
        cmp     edx,ebx
        jne     L_65791
        cmp     eax,esi
L_65791:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_33046
; Line 3767:             { 
; Line 3768:                 swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0110h+01d0h],eax
        mov     dword [esp-0110h+04h+01d0h],edx
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-01b8h+01d0h],edi
        mov     ebx,edi
        mov     dword [ebx],eax
        mov     dword [ebx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0110h+01d0h]
        mov     edx,dword [esp-0110h+04h+01d0h]
        mov     dword [esp-019ch+01d0h],ecx
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 3718: } 
L_33257:
        inc     dword [esp-0154h+01d0h]
        mov     ecx,dword [esp-0148h+01d0h]
        mov     edi,dword [esp-0144h+01d0h]
        mov     eax,dword [ecx]
        mov     edx,dword [ecx+04h]
        mov     dword [esp-015ch+01d0h],eax
        mov     dword [esp-015ch+04h+01d0h],edx
        mov     eax,dword [edi]
        mov     edx,dword [edi+04h]
        mov     dword [esp-017ch+01d0h],eax
        mov     dword [esp-017ch+04h+01d0h],edx
        mov     eax,dword [esp-015ch+01d0h]
        mov     edx,dword [esp-015ch+04h+01d0h]
        mov     dword [esp-01b0h+01d0h],eax
        mov     dword [esp-01b0h+04h+01d0h],edx
        mov     esi,dword [esp-017ch+01d0h]
        mov     ebx,dword [esp-017ch+04h+01d0h]
        mov     eax,dword [esp-01b0h+01d0h]
        mov     edx,dword [esp-01b0h+04h+01d0h]
        cmp     edx,ebx
        jne     L_65793
        cmp     eax,esi
L_65793:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_33050
; Line 3771:                 { 
; Line 3772:                     swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     dword [esp-01a8h+01d0h],edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-01a8h+01d0h]
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0110h+01d0h],eax
        mov     dword [esp-0110h+04h+01d0h],edx
        mov     dword [esp-0198h+01d0h],ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0198h+01d0h]
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [edi],eax
        mov     dword [edi+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0110h+01d0h]
        mov     edx,dword [esp-0110h+04h+01d0h]
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 3718: } 
L_33337:
        inc     dword [esp-0154h+01d0h]
; Line 3774:                 } 
L_33050:
; Line 3775:             } 
L_33046:
; Line 3776:         } 
L_33042:
; Line 3777:     } 
L_33038:
        mov     eax,dword [esp-0154h+01d0h]
; Line 3779: } 
L_33036:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,01c4h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_3$r#__less$uLuL~puL~$qpuLpuLr#__less$uLuL~ virtual
        [bits 32]
@std@__1@#__insertion_sort_3$r#__less$uLuL~puL~$qpuLpuLr#__less$uLuL~:
; Line 3817: void 
        add     esp,byte 0ffffffach
        push    ebx
        push    esi
        push    edi
L_33391:
        mov     edx,dword [esp+0ch+060h]
        mov     eax,dword [esp+08h+060h]
        mov     dword [esp-050h+060h],eax
        mov     eax,dword [esp+04h+060h]
        mov     dword [esp-054h+060h],eax
; Line 3820:     typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type; 
        mov     ecx,dword [esp-054h+060h]
        mov     edi,ecx
        add     edi,byte 010h
        push    edx
        mov     eax,edi
        push    eax
        mov     eax,dword [esp-054h+068h]
        add     ecx,byte 08h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$uLuL~puL~$qpuLpuLpuLr#__less$uLuL~
        add     esp,byte 010h
; Line 3823:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     eax,edi
        add     eax,byte 08h
        cmp     eax,dword [esp-050h+060h]
        je      L_33396
L_33394:
; Line 3824:     { 
; Line 3825:         if (__comp(*__i, *__j)) 
        mov     dword [esp-04ch+060h],eax
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        mov     eax,dword [edi]
        mov     edx,dword [edi+04h]
        cmp     ebx,edx
        jne     L_65795
        cmp     esi,eax
L_65795:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_33401
; Line 3826:         { 
; Line 3827:             value_type __t(_VSTD::move(*__i)); 
        mov     eax,dword [esp-04ch+060h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-08h+060h],eax
        mov     dword [esp-08h+04h+060h],edx
        mov     ecx,dword [esp-04ch+060h]
; Line 3831:             { 
L_33405:
; Line 3832:                 *__j = _VSTD::move(*__k); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [edi]
        mov     edx,dword [edi+04h]
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
        mov     ecx,edi
; Line 3834:             } while (__j != __first && __comp(__t, *--__k)); 
L_33407:
        cmp     ecx,dword [esp-054h+060h]
        je      L_33470
        sub     edi,byte 08h
        mov     esi,dword [esp-08h+060h]
        mov     ebx,dword [esp-08h+04h+060h]
        mov     eax,dword [edi]
        mov     edx,dword [edi+04h]
        cmp     ebx,edx
        jne     L_65797
        cmp     esi,eax
L_65797:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_33405
L_33470:
L_33406:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-08h+060h]
        mov     edx,dword [esp-08h+04h+060h]
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 3836:         } 
L_33401:
        mov     edi,dword [esp-04ch+060h]
; Line 3838:     } 
L_33397:
        mov     eax,dword [esp-04ch+060h]
        add     eax,byte 08h
L_33395:
        cmp     eax,dword [esp-050h+060h]
        jne     L_33394
L_33396:
; Line 3839: } 
L_33392:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 054h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_incomplete$r#__less$uLuL~puL~$qpuLpuLr#__less$uLuL~ virtual
        [bits 32]
@std@__1@#__insertion_sort_incomplete$r#__less$uLuL~puL~$qpuLpuLr#__less$uLuL~:
; Line 3842: bool 
        add     esp,0ffffff58h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_33506:
        mov     edx,dword [esp+0ch+0b8h]
        mov     eax,dword [esp+08h+0b8h]
        mov     dword [esp-0a4h+0b8h],eax
        mov     edi,dword [esp+04h+0b8h]
; Line 3845:     switch (__last - __first) 
        mov     ecx,dword [esp-0a4h+0b8h]
        mov     eax,edi
        mov     ebx,ecx
        sub     ebx,eax
        sar     ebx,03h
        mov     dword [esp-0a8h+0b8h],ecx
        cmp     ebx,byte 06h
        jnc     L_33530
        push    ebx
        mov     ebx,dword [ebx*4+L_65799]
        xchg    ebx,dword [esp]
        ret
        times $$-$ & 3 nop
L_65799:
        dd      L_33512
        dd      L_33514
        dd      L_33516
        dd      L_33523
        dd      L_33525
        dd      L_33527
; Line 3846:     { 
; Line 3847:     case 0: 
L_33512:
L_33514:
        mov     al,01h
        jmp     L_33507
L_33516:
        mov     ecx,dword [esp-0a8h+0b8h]
        sub     ecx,byte 08h
        mov     edi,dword [ecx]
        mov     ebp,dword [ecx+04h]
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        cmp     ebp,ebx
        jne     L_65800
        cmp     edi,esi
L_65800:
        setc    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_33518
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        mov     dword [esp-028h+0b8h],esi
        mov     dword [esp-028h+04h+0b8h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [ecx]
        mov     ebx,dword [ecx+04h]
        mov     dword [eax],esi
        mov     dword [eax+04h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-028h+0b8h]
        mov     edx,dword [esp-028h+04h+0b8h]
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 3718: } 
L_33594:
L_33518:
        mov     al,01h
        jmp     L_33507
L_33523:
        push    edx
        mov     ecx,dword [esp-0a8h+0bch]
        sub     ecx,byte 08h
        push    ecx
        mov     ecx,edi
        add     eax,byte 08h
        push    eax
        push    ecx
        call    @std@__1@#__sort3$r#__less$uLuL~puL~$qpuLpuLpuLr#__less$uLuL~
        add     esp,byte 010h
        mov     al,01h
        jmp     L_33507
L_33525:
        push    edx
        mov     ecx,dword [esp-0a8h+0bch]
        sub     ecx,byte 08h
        push    ecx
        mov     ecx,edi
        mov     edx,eax
        add     edx,byte 010h
        push    edx
        add     eax,byte 08h
        push    eax
        push    ecx
        call    @std@__1@#__sort4$r#__less$uLuL~puL~$qpuLpuLpuLpuLr#__less$uLuL~
        add     esp,byte 014h
        mov     al,01h
        jmp     L_33507
L_33527:
        push    edx
        mov     ecx,dword [esp-0a8h+0bch]
        sub     ecx,byte 08h
        push    ecx
        mov     ecx,edi
        mov     edx,eax
        add     edx,byte 018h
        push    edx
        mov     edx,eax
        add     edx,byte 010h
        push    edx
        add     eax,byte 08h
        push    eax
        push    ecx
        call    @std@__1@#__sort5$r#__less$uLuL~puL~$qpuLpuLpuLpuLpuLr#__less$uLuL~
        add     esp,byte 018h
        mov     al,01h
        jmp     L_33507
; Line 3863:     } 
L_33530:
L_33509:
        mov     ebx,eax
        add     ebx,byte 010h
        push    edx
        mov     ecx,ebx
        push    ecx
        mov     ecx,edi
        add     eax,byte 08h
        push    eax
        push    ecx
        call    @std@__1@#__sort3$r#__less$uLuL~puL~$qpuLpuLpuLr#__less$uLuL~
        add     esp,byte 010h
        xor     eax,eax
        mov     dword [esp-0a0h+0b8h],eax
; Line 3869:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     ecx,ebx
        add     ecx,byte 08h
        cmp     ecx,dword [esp-0a4h+0b8h]
        je      L_33534
L_33532:
; Line 3870:     { 
; Line 3871:         if (__comp(*__i, *__j)) 
        mov     dword [esp-09ch+0b8h],ecx
        mov     eax,ebx
        mov     edx,ebx
        mov     esi,dword [ecx]
        mov     ebx,dword [ecx+04h]
        mov     ecx,dword [edx]
        mov     edx,dword [edx+04h]
        cmp     ebx,edx
        jne     L_65802
        cmp     esi,ecx
L_65802:
        setc    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_33539
; Line 3872:         { 
; Line 3873:             value_type __t(_VSTD::move(*__i)); 
        mov     ecx,dword [esp-09ch+0b8h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     dword [esp-08h+0b8h],ecx
        mov     dword [esp-08h+04h+0b8h],edx
        mov     ebp,eax
        mov     ecx,dword [esp-09ch+0b8h]
; Line 3877:             { 
L_33543:
; Line 3878:                 *__j = _VSTD::move(*__k); 
        mov     eax,ebp
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
        mov     ecx,ebp
; Line 3880:             } while (__j != __first && __comp(__t, *--__k)); 
L_33545:
        cmp     ecx,edi
        je      L_33693
        sub     ebp,byte 08h
        mov     eax,ebp
        mov     esi,dword [esp-08h+0b8h]
        mov     ebx,dword [esp-08h+04h+0b8h]
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        cmp     ebx,edx
        jne     L_65804
        cmp     esi,eax
L_65804:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_33543
L_33693:
L_33544:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-08h+0b8h]
        mov     edx,dword [esp-08h+04h+0b8h]
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
        inc     dword [esp-0a0h+0b8h]
        cmp     dword [esp-0a0h+0b8h],byte 08h
        jne     L_33552
        mov     ecx,dword [esp-09ch+0b8h]
        add     ecx,byte 08h
        mov     eax,dword [esp-0a8h+0b8h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
        jmp     L_33507
L_33552:
; Line 3884:         } 
L_33539:
        mov     ebx,dword [esp-09ch+0b8h]
; Line 3886:     } 
L_33535:
        mov     eax,dword [esp-09ch+0b8h]
        add     eax,byte 08h
        mov     ecx,eax
L_33533:
        cmp     ecx,dword [esp-0a4h+0b8h]
        jne     L_33532
L_33534:
        mov     al,01h
; Line 3888: } 
L_33507:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0a8h
        ret
section code
section code
        section vsc@std@__1@#__sort$r#__less$uLuL~puL~$qpuLpuLr#__less$uLuL~ virtual
        [bits 32]
@std@__1@#__sort$r#__less$uLuL~puL~$qpuLpuLr#__less$uLuL~:
; Line 3926: void 
        add     esp,0fffffc9ch
        push    ebx
        push    esi
        push    edi
L_33729:
        mov     eax,dword [esp+0ch+0370h]
        mov     dword [esp-0264h+0370h],eax
        mov     eax,dword [esp+08h+0370h]
        mov     dword [esp-0260h+0370h],eax
        mov     eax,dword [esp+04h+0370h]
        mov     dword [esp-025ch+0370h],eax
; Line 3930:     typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type; 
L_33732:
; Line 3935:     { 
; Line 3936:     __restart: 
L_33738:
        mov     ebx,dword [esp-0260h+0370h]
        mov     eax,dword [esp-025ch+0370h]
        mov     ecx,ebx
        sub     ecx,eax
        sar     ecx,03h
        mov     edx,eax
        mov     eax,ecx
        and     eax,eax
        jl      L_33760
        cmp     eax,byte 06h
        jge     L_33760
        push    eax
        mov     eax,dword [eax*4+L_65807]
        xchg    eax,dword [esp]
        ret
        times $$-$ & 3 nop
L_65807:
        dd      L_33742
        dd      L_33744
        dd      L_33746
        dd      L_33753
        dd      L_33755
        dd      L_33757
; Line 3939:         { 
; Line 3940:         case 0: 
L_33742:
L_33744:
        jmp     L_33730
L_33746:
        mov     edi,ebx
        sub     edi,byte 08h
        mov     eax,edx
        mov     esi,dword [edi]
        mov     ebx,dword [edi+04h]
        mov     dword [esp-026ch+0370h],esi
        mov     dword [esp-026ch+04h+0370h],ebx
        mov     ecx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0318h+0370h],eax
        mov     dword [esp-0318h+04h+0370h],ecx
        mov     esi,dword [esp-026ch+0370h]
        mov     ebx,dword [esp-026ch+04h+0370h]
        mov     eax,dword [esp-0318h+0370h]
        mov     ecx,dword [esp-0318h+04h+0370h]
        cmp     ebx,ecx
        jne     L_65808
        cmp     esi,eax
L_65808:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_33730
        mov     eax,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [eax]
        mov     edx,dword [eax+04h]
        mov     dword [esp-0208h+0370h],ecx
        mov     dword [esp-0208h+04h+0370h],edx
        mov     dword [esp-0350h+0370h],edi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0350h+0370h]
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0208h+0370h]
        mov     edx,dword [esp-0208h+04h+0370h]
        mov     dword [edi],eax
        mov     dword [edi+04h],edx
; Line 3718: } 
L_33998:
L_33748:
        jmp     L_33730
L_33753:
        mov     eax,dword [esp-0264h+0370h]
        push    eax
        mov     eax,ebx
        sub     eax,byte 08h
        push    eax
        mov     eax,dword [esp-025ch+0378h]
        mov     ecx,edx
        add     ecx,byte 08h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$uLuL~puL~$qpuLpuLpuLr#__less$uLuL~
        add     esp,byte 010h
        jmp     L_33730
L_33755:
        mov     eax,dword [esp-0264h+0370h]
        push    eax
        mov     eax,ebx
        sub     eax,byte 08h
        push    eax
        mov     eax,dword [esp-025ch+0378h]
        mov     ecx,edx
        add     ecx,byte 010h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 08h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$uLuL~puL~$qpuLpuLpuLpuLr#__less$uLuL~
        add     esp,byte 014h
        jmp     L_33730
L_33757:
        mov     eax,dword [esp-0264h+0370h]
        push    eax
        mov     eax,ebx
        sub     eax,byte 08h
        push    eax
        mov     eax,dword [esp-025ch+0378h]
        mov     ecx,edx
        add     ecx,byte 018h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 010h
        push    ecx
        mov     ecx,edx
        add     ecx,byte 08h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$uLuL~puL~$qpuLpuLpuLpuLpuLr#__less$uLuL~
        add     esp,byte 018h
        jmp     L_33730
; Line 3956:         } 
L_33760:
L_33739:
        cmp     ecx,byte 06h
        jg      L_33762
; Line 3958:         { 
; Line 3959:             _VSTD::__insertion_sort_3<_Compare>(__first, __last, __comp); 
        mov     eax,dword [esp-0264h+0370h]
        push    eax
        mov     eax,dword [esp-0260h+0374h]
        push    eax
        mov     eax,dword [esp-025ch+0378h]
        push    eax
        call    @std@__1@#__insertion_sort_3$r#__less$uLuL~puL~$qpuLpuLr#__less$uLuL~
        add     esp,byte 0ch
        jmp     L_33730
; Line 3961:         } 
L_33762:
        mov     eax,edx
        mov     dword [esp-0338h+0370h],ebx
        sub     ebx,byte 08h
; Line 3967:         { 
; Line 3968:         difference_type __delta; 
        cmp     ecx,03e8h
        jl      L_33770
; Line 3970:         { 
; Line 3971:             __delta = __len/2; 
        mov     esi,ecx
        shr     esi,01fh
        add     ecx,esi
        sar     ecx,01h
        mov     esi,ecx
        shl     esi,03h
        add     eax,esi
        mov     dword [esp-0254h+0370h],eax
        mov     eax,ecx
        shr     eax,01fh
        add     eax,ecx
        sar     eax,01h
        mov     ecx,dword [esp-0264h+0370h]
        push    ecx
        mov     ecx,ebx
        push    ecx
        mov     esi,dword [esp-0254h+0378h]
        mov     ecx,eax
        shl     ecx,03h
        mov     eax,esi
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0254h+037ch]
        push    eax
        mov     eax,edx
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-025ch+0384h]
        push    eax
        call    @std@__1@#__sort5$r#__less$uLuL~puL~$qpuLpuLpuLpuLpuLr#__less$uLuL~
        add     esp,byte 018h
        mov     dword [esp-0250h+0370h],eax
; Line 3975:         } 
        jmp     L_33775
L_33770:
; Line 3976:         else 
; Line 3977:         { 
; Line 3978:             __delta = __len/2; 
        mov     edx,ecx
        shr     edx,01fh
        add     ecx,edx
        sar     ecx,01h
        mov     dword [esp-035ch+0370h],eax
        shl     ecx,03h
        mov     eax,dword [esp-035ch+0370h]
        add     eax,ecx
        mov     dword [esp-0254h+0370h],eax
        mov     eax,dword [esp-0264h+0370h]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0254h+0378h]
        push    eax
        mov     eax,dword [esp-025ch+037ch]
        push    eax
        call    @std@__1@#__sort3$r#__less$uLuL~puL~$qpuLpuLpuLr#__less$uLuL~
        add     esp,byte 010h
        mov     dword [esp-0250h+0370h],eax
; Line 3981:         } 
L_33775:
; Line 3982:         } 
        mov     eax,dword [esp-025ch+0370h]
        mov     dword [esp-024ch+0370h],eax
        mov     dword [esp-0358h+0370h],eax
        mov     dword [esp-02c8h+0370h],ebx
        mov     ecx,dword [esp-0358h+0370h]
        mov     dword [esp-0258h+0370h],ecx
        mov     eax,dword [esp-0254h+0370h]
        mov     dword [esp-0244h+0370h],eax
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     dword [esp-02b4h+0370h],ecx
        mov     dword [esp-02b4h+04h+0370h],edx
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-02e0h+0370h],eax
        mov     dword [esp-02e0h+04h+0370h],edx
        mov     esi,dword [esp-02b4h+0370h]
        mov     ebx,dword [esp-02b4h+04h+0370h]
        mov     eax,dword [esp-02e0h+0370h]
        mov     edx,dword [esp-02e0h+04h+0370h]
        cmp     ebx,edx
        jne     L_65810
        cmp     esi,eax
L_65810:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_33783
; Line 3992:         { 
; Line 3995:             while (true) 
        mov     ecx,dword [esp-02c8h+0370h]
L_33787:
; Line 3996:             { 
; Line 3997:                 if (__i == --__j) 
        mov     eax,ecx
        sub     eax,byte 08h
        mov     dword [esp-02c8h+0370h],eax
        mov     ecx,eax
        cmp     dword [esp-0358h+0370h],ecx
        jne     L_33793
; Line 3998:                 { 
; Line 4001:                     ++__i;   
        mov     eax,dword [esp-0258h+0370h]
        add     eax,byte 08h
        mov     dword [esp-02f4h+0370h],eax
        mov     eax,dword [esp-0260h+0370h]
        mov     ecx,dword [esp-024ch+0370h]
        sub     eax,byte 08h
        mov     dword [esp-0320h+0370h],eax
        mov     dword [esp-0240h+0370h],eax
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     dword [esp-02bch+0370h],ecx
        mov     dword [esp-02bch+04h+0370h],edx
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-02e8h+0370h],eax
        mov     dword [esp-02e8h+04h+0370h],edx
        mov     esi,dword [esp-02bch+0370h]
        mov     ebx,dword [esp-02bch+04h+0370h]
        mov     eax,dword [esp-02e8h+0370h]
        mov     edx,dword [esp-02e8h+04h+0370h]
        cmp     ebx,edx
        jne     L_65812
        cmp     esi,eax
L_65812:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_33797
; Line 4004:                     { 
; Line 4005:                         while (true) 
L_33801:
; Line 4006:                         { 
; Line 4007:                             if (__i == __j) 
        mov     ecx,dword [esp-0320h+0370h]
        cmp     dword [esp-02f4h+0370h],ecx
        je      L_33730
L_33807:
        mov     edx,dword [esp-024ch+0370h]
        mov     ecx,dword [esp-02f4h+0370h]
        mov     eax,ecx
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-0340h+0370h],esi
        mov     dword [esp-0340h+04h+0370h],ebx
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        mov     eax,dword [esp-0340h+0370h]
        mov     edx,dword [esp-0340h+04h+0370h]
        cmp     edx,ebx
        jne     L_65814
        cmp     eax,esi
L_65814:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_33812
; Line 4010:                             { 
; Line 4011:                                 swap(*__i, *__j); 
        mov     eax,ecx
        mov     edx,dword [esp-0240h+0370h]
        mov     dword [esp-031ch+0370h],edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-0334h+0370h],esi
        mov     dword [esp-0334h+04h+0370h],ebx
        mov     esi,dword [esp-0334h+0370h]
        mov     ebx,dword [esp-0334h+04h+0370h]
        mov     dword [esp-0208h+0370h],esi
        mov     dword [esp-0208h+04h+0370h],ebx
        mov     edx,dword [esp-031ch+0370h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-02c4h+0370h],esi
        mov     dword [esp-02c4h+04h+0370h],ebx
        mov     dword [esp-0324h+0370h],eax
        mov     esi,dword [esp-02c4h+0370h]
        mov     ebx,dword [esp-02c4h+04h+0370h]
        mov     eax,dword [esp-0324h+0370h]
        mov     dword [eax],esi
        mov     dword [eax+04h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0208h+0370h]
        mov     edx,dword [esp-0208h+04h+0370h]
        mov     dword [esp-032ch+0370h],eax
        mov     dword [esp-032ch+04h+0370h],edx
        mov     eax,dword [esp-031ch+0370h]
        mov     esi,dword [esp-032ch+0370h]
        mov     ebx,dword [esp-032ch+04h+0370h]
        mov     dword [eax],esi
        mov     dword [eax+04h],ebx
; Line 3718: } 
L_34110:
        inc     dword [esp-0250h+0370h]
        mov     eax,ecx
        add     eax,byte 08h
        mov     dword [esp-02f4h+0370h],eax
; Line 4014:                                 break; 
        jmp     L_33802
L_33812:
        mov     eax,ecx
        add     eax,byte 08h
        mov     dword [esp-02f4h+0370h],eax
; Line 4017:                         } 
L_33803:
        jmp     L_33801
L_33802:
; Line 4018:                     } 
L_33797:
        mov     ecx,dword [esp-0320h+0370h]
        cmp     dword [esp-02f4h+0370h],ecx
        je      L_33730
L_33825:
L_33830:
; Line 4023:                     { 
; Line 4024:                         while (!__comp(*__first, *__i)) 
        mov     ecx,dword [esp-025ch+0370h]
        mov     dword [esp-0300h+0370h],ecx
        mov     eax,dword [esp-02f4h+0370h]
        mov     dword [esp-023ch+0370h],eax
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     dword [esp-02fch+0370h],ecx
        mov     dword [esp-02fch+04h+0370h],edx
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0310h+0370h],eax
        mov     dword [esp-0310h+04h+0370h],edx
        mov     esi,dword [esp-02fch+0370h]
        mov     ebx,dword [esp-02fch+04h+0370h]
        mov     eax,dword [esp-0310h+0370h]
        mov     edx,dword [esp-0310h+04h+0370h]
        cmp     ebx,edx
        jne     L_65816
        cmp     esi,eax
L_65816:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_33837
L_33836:
        mov     eax,dword [esp-023ch+0370h]
        add     eax,byte 08h
        mov     dword [esp-02f4h+0370h],eax
L_33838:
        mov     ecx,dword [esp-0300h+0370h]
        mov     eax,dword [esp-02f4h+0370h]
        mov     dword [esp-023ch+0370h],eax
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        cmp     edx,ebx
        jne     L_65818
        cmp     ecx,esi
L_65818:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_33836
L_33837:
        mov     edx,dword [esp-0300h+0370h]
        mov     ecx,dword [esp-0240h+0370h]
        sub     ecx,byte 08h
        mov     eax,ecx
        mov     dword [esp-0240h+0370h],eax
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-02f0h+0370h],esi
        mov     dword [esp-02f0h+04h+0370h],ebx
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0308h+0370h],eax
        mov     dword [esp-0308h+04h+0370h],edx
        mov     esi,dword [esp-02f0h+0370h]
        mov     ebx,dword [esp-02f0h+04h+0370h]
        mov     eax,dword [esp-0308h+0370h]
        mov     edx,dword [esp-0308h+04h+0370h]
        cmp     ebx,edx
        jne     L_65820
        cmp     esi,eax
L_65820:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_33844
L_33843:
L_33845:
; Line 4026:                         while (__comp(*__first, *--__j)) 
        mov     edx,dword [esp-0300h+0370h]
        mov     ecx,dword [esp-0240h+0370h]
        sub     ecx,byte 08h
        mov     eax,ecx
        mov     dword [esp-0240h+0370h],eax
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-034ch+0370h],esi
        mov     dword [esp-034ch+04h+0370h],ebx
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        mov     eax,dword [esp-034ch+0370h]
        mov     edx,dword [esp-034ch+04h+0370h]
        cmp     edx,ebx
        jne     L_65822
        cmp     eax,esi
L_65822:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_33843
L_33844:
        mov     dword [esp-0344h+0370h],ecx
        mov     eax,dword [esp-02f4h+0370h]
        cmp     eax,dword [esp-0344h+0370h]
        jge     L_33831
; Line 4029:                             break; 
L_33850:
        mov     ebx,dword [esp-023ch+0370h]
        mov     eax,dword [esp-0240h+0370h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     dword [esp-0208h+0370h],ecx
        mov     dword [esp-0208h+04h+0370h],edx
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     dword [ebx],ecx
        mov     dword [ebx+04h],edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0208h+0370h]
        mov     edx,dword [esp-0208h+04h+0370h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
; Line 3718: } 
L_34238:
        inc     dword [esp-0250h+0370h]
        mov     eax,dword [esp-023ch+0370h]
        add     eax,byte 08h
        mov     dword [esp-02f4h+0370h],eax
; Line 4033:                     } 
L_33832:
; Line 4022:                     while (true) 
        jmp     L_33830
L_33831:
        mov     eax,dword [esp-023ch+0370h]
        mov     dword [esp-025ch+0370h],eax
        jmp     L_33738
L_33793:
        mov     ecx,dword [esp-02c8h+0370h]
        mov     eax,ecx
        mov     ebx,dword [esp-0244h+0370h]
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-0364h+0370h],eax
        mov     dword [esp-0364h+04h+0370h],edx
        mov     esi,dword [ebx]
        mov     ebx,dword [ebx+04h]
        mov     eax,dword [esp-0364h+0370h]
        mov     edx,dword [esp-0364h+04h+0370h]
        cmp     edx,ebx
        jne     L_65824
        cmp     eax,esi
L_65824:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_33861
; Line 4041:                 { 
; Line 4042:                     swap(*__i, *__j); 
        mov     eax,dword [esp-0258h+0370h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-027ch+0370h],esi
        mov     dword [esp-027ch+04h+0370h],ebx
        mov     esi,dword [esp-027ch+0370h]
        mov     ebx,dword [esp-027ch+04h+0370h]
        mov     dword [esp-0208h+0370h],esi
        mov     dword [esp-0208h+04h+0370h],ebx
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-0274h+0370h],esi
        mov     dword [esp-0274h+04h+0370h],ebx
        mov     esi,dword [esp-0274h+0370h]
        mov     ebx,dword [esp-0274h+04h+0370h]
        mov     dword [eax],esi
        mov     dword [eax+04h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0208h+0370h]
        mov     edx,dword [esp-0208h+04h+0370h]
        mov     dword [esp-0354h+0370h],ecx
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
; Line 3718: } 
L_34318:
        inc     dword [esp-0250h+0370h]
; Line 4044:                     break;   
        jmp     L_33788
L_33861:
; Line 4046:             } 
L_33789:
        jmp     L_33787
L_33788:
; Line 4047:         } 
L_33783:
        mov     eax,dword [esp-0258h+0370h]
        add     eax,byte 08h
        mov     dword [esp-0248h+0370h],eax
        mov     ecx,dword [esp-02c8h+0370h]
        cmp     dword [esp-0248h+0370h],ecx
        jge     L_33874
; Line 4053:         { 
; Line 4056:             while (true) 
L_33878:
; Line 4057:             { 
; Line 4059:                 while (__comp(*__i, *__m)) 
        mov     ecx,dword [esp-0248h+0370h]
        mov     dword [esp-0284h+0370h],ecx
        mov     eax,dword [esp-0244h+0370h]
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     dword [esp-029ch+0370h],ecx
        mov     dword [esp-029ch+04h+0370h],edx
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-02d8h+0370h],eax
        mov     dword [esp-02d8h+04h+0370h],edx
        mov     esi,dword [esp-029ch+0370h]
        mov     ebx,dword [esp-029ch+04h+0370h]
        mov     eax,dword [esp-02d8h+0370h]
        mov     edx,dword [esp-02d8h+04h+0370h]
        cmp     ebx,edx
        jne     L_65826
        cmp     esi,eax
L_65826:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_33885
L_33884:
        mov     eax,dword [esp-0284h+0370h]
        add     eax,byte 08h
        mov     dword [esp-0248h+0370h],eax
L_33886:
        mov     ecx,dword [esp-0248h+0370h]
        mov     dword [esp-0284h+0370h],ecx
        mov     eax,dword [esp-0244h+0370h]
        mov     edx,dword [ecx+04h]
        mov     ecx,dword [ecx]
        mov     esi,dword [eax]
        mov     ebx,dword [eax+04h]
        cmp     edx,ebx
        jne     L_65828
        cmp     ecx,esi
L_65828:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_33884
L_33885:
        sub     dword [esp-02c8h+0370h],byte 08h
        mov     ecx,dword [esp-02c8h+0370h]
        mov     edx,ecx
        mov     eax,dword [esp-0244h+0370h]
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-028ch+0370h],esi
        mov     dword [esp-028ch+04h+0370h],ebx
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        mov     dword [esp-02d0h+0370h],eax
        mov     dword [esp-02d0h+04h+0370h],edx
        mov     esi,dword [esp-028ch+0370h]
        mov     ebx,dword [esp-028ch+04h+0370h]
        mov     eax,dword [esp-02d0h+0370h]
        mov     edx,dword [esp-02d0h+04h+0370h]
        cmp     ebx,edx
        jne     L_65830
        cmp     esi,eax
L_65830:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_33892
L_33891:
L_33893:
; Line 4062:                 while (!__comp(*--__j, *__m)) 
        mov     eax,ecx
        sub     eax,byte 08h
        mov     dword [esp-02c8h+0370h],eax
        mov     ecx,eax
        mov     edx,eax
        mov     eax,dword [esp-0244h+0370h]
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        cmp     ebx,edx
        jne     L_65832
        cmp     esi,eax
L_65832:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_33891
L_33892:
        mov     edx,dword [esp-02c8h+0370h]
        cmp     dword [esp-0248h+0370h],edx
        jg      L_33879
; Line 4065:                     break; 
L_33898:
        mov     eax,dword [esp-0284h+0370h]
        mov     dword [esp-0280h+0370h],ecx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-02a4h+0370h],esi
        mov     dword [esp-02a4h+04h+0370h],ebx
        mov     esi,dword [esp-02a4h+0370h]
        mov     ebx,dword [esp-02a4h+04h+0370h]
        mov     dword [esp-0208h+0370h],esi
        mov     dword [esp-0208h+04h+0370h],ebx
        mov     edx,dword [esp-0280h+0370h]
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-0294h+0370h],esi
        mov     dword [esp-0294h+04h+0370h],ebx
        mov     esi,dword [esp-0294h+0370h]
        mov     ebx,dword [esp-0294h+04h+0370h]
        mov     dword [eax],esi
        mov     dword [eax+04h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     eax,dword [esp-0208h+0370h]
        mov     edx,dword [esp-0208h+04h+0370h]
        mov     dword [esp-02ach+0370h],eax
        mov     dword [esp-02ach+04h+0370h],edx
        mov     eax,dword [esp-0280h+0370h]
        mov     esi,dword [esp-02ach+0370h]
        mov     ebx,dword [esp-02ach+04h+0370h]
        mov     dword [eax],esi
        mov     dword [eax+04h],ebx
; Line 3718: } 
L_34446:
        inc     dword [esp-0250h+0370h]
        mov     edx,dword [esp-0248h+0370h]
        cmp     dword [esp-0254h+0370h],edx
        jne     L_33903
        mov     dword [esp-0254h+0370h],ecx
L_33903:
        mov     eax,dword [esp-0284h+0370h]
        add     eax,byte 08h
        mov     dword [esp-0248h+0370h],eax
; Line 4073:             } 
L_33880:
        mov     eax,dword [esp-0254h+0370h]
        mov     dword [esp-0244h+0370h],eax
        jmp     L_33878
L_33879:
; Line 4074:         } 
L_33874:
        mov     ecx,dword [esp-0254h+0370h]
        cmp     dword [esp-0248h+0370h],ecx
        je      L_33914
        mov     edx,dword [esp-0244h+0370h]
        mov     ecx,dword [esp-0248h+0370h]
        mov     eax,ecx
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     edx,dword [eax+04h]
        mov     eax,dword [eax]
        cmp     ebx,edx
        jne     L_65834
        cmp     esi,eax
L_65834:
        setc    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_33914
; Line 4077:         { 
; Line 4078:             swap(*__i, *__m); 
        mov     eax,dword [esp-0244h+0370h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [esp-0208h+0370h],esi
        mov     dword [esp-0208h+04h+0370h],ebx
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     esi,dword [edx]
        mov     ebx,dword [edx+04h]
        mov     dword [ecx],esi
        mov     dword [ecx+04h],ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        mov     ecx,dword [esp-0208h+0370h]
        mov     edx,dword [esp-0208h+04h+0370h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
; Line 3718: } 
L_34526:
        inc     dword [esp-0250h+0370h]
; Line 4080:         } 
L_33914:
        cmp     dword [esp-0250h+0370h],byte 00h
        jne     L_33921
; Line 4084:         { 
; Line 4085:             bool __fs = _VSTD::__insertion_sort_incomplete<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-0264h+0370h]
        push    eax
        mov     eax,dword [esp-0248h+0374h]
        push    eax
        mov     eax,dword [esp-025ch+0378h]
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$uLuL~puL~$qpuLpuLr#__less$uLuL~
        add     esp,byte 0ch
        mov     bl,al
        mov     eax,dword [esp-0264h+0370h]
        push    eax
        mov     eax,dword [esp-0260h+0374h]
        push    eax
        mov     eax,dword [esp-0248h+0378h]
        add     eax,byte 08h
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$uLuL~puL~$qpuLpuLr#__less$uLuL~
        add     esp,byte 0ch
        and     al,al
        je      L_33925
; Line 4087:             { 
; Line 4088:                 if (__fs) 
        and     bl,bl
        jne     L_33730
L_33929:
        mov     eax,dword [esp-0248h+0370h]
        mov     dword [esp-0260h+0370h],eax
; Line 4091:                 continue; 
        jmp     L_33732
L_33925:
; Line 4093:             else 
; Line 4094:             { 
; Line 4095:                 if (__fs) 
        and     bl,bl
        je      L_33939
; Line 4096:                 { 
; Line 4097:                     __first = ++__i; 
        mov     eax,dword [esp-0248h+0370h]
        add     eax,byte 08h
        mov     dword [esp-025ch+0370h],eax
; Line 4098:                     continue; 
        jmp     L_33732
L_33939:
; Line 4100:             } 
L_33935:
; Line 4101:         } 
L_33921:
        mov     eax,dword [esp-0260h+0370h]
        mov     ecx,dword [esp-0248h+0370h]
        sub     eax,ecx
        mov     edx,eax
        sar     edx,03h
        mov     eax,dword [esp-025ch+0370h]
        sub     eax,ecx
        neg     eax
        imul    eax,byte 01h
        sar     eax,03h
        cmp     eax,edx
        jge     L_33952
; Line 4104:         { 
; Line 4105:             _VSTD::__sort<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-0264h+0370h]
        push    eax
        mov     eax,dword [esp-0248h+0374h]
        push    eax
        mov     eax,dword [esp-025ch+0378h]
        push    eax
        call    @std@__1@#__sort$r#__less$uLuL~puL~$qpuLpuLr#__less$uLuL~
        add     esp,byte 0ch
        mov     eax,dword [esp-0248h+0370h]
        add     eax,byte 08h
        mov     dword [esp-025ch+0370h],eax
; Line 4108:         } 
        jmp     L_33957
L_33952:
; Line 4109:         else 
; Line 4110:         { 
; Line 4111:             _VSTD::__sort<_Compare>(__i+1, __last, __comp); 
        mov     eax,dword [esp-0264h+0370h]
        push    eax
        mov     eax,dword [esp-0260h+0374h]
        push    eax
        mov     eax,ecx
        add     eax,byte 08h
        push    eax
        call    @std@__1@#__sort$r#__less$uLuL~puL~$qpuLpuLr#__less$uLuL~
        add     esp,byte 0ch
        mov     eax,dword [esp-0248h+0370h]
        mov     dword [esp-0260h+0370h],eax
; Line 4114:         } 
L_33957:
; Line 4115:     } 
L_33734:
; Line 3934:     while (true) 
        jmp     L_33732
; Line 4116: } 
L_33733:
L_33730:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,0364h
        ret
section code
section code
        section vsc@std@__1@#__sort3$r#__less$ff~pf~$qpfpfpfr#__less$ff~ virtual
        [bits 32]
@std@__1@#__sort3$r#__less$ff~pf~$qpfpfpfr#__less$ff~:
; Line 3689: unsigned 
        add     esp,0ffffff10h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_34580:
        mov     ebx,dword [esp+0ch+0100h]
        mov     ecx,dword [esp+08h+0100h]
        mov     ebp,dword [esp+04h+0100h]
; Line 3692:     unsigned __r = 0; 
        xor     edi,edi
        mov     eax,ecx
        mov     esi,ecx
        mov     edx,ebp
        movss   xmm1,[eax]
        movss   xmm0,[ebp]
        comiss  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_34583
; Line 3694:     { 
; Line 3695:         if (!__c(*__z, *__y))       
        mov     eax,ebx
        mov     ebp,esi
        movss   xmm1,[ebx]
        movss   xmm0,[ebp]
        comiss  xmm0,xmm1
        seta    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        jne     L_34587
        mov     eax,edi
        jmp     L_34581
L_34587:
        mov     ebx,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     esi,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esi]
        movss   [esp-0d8h+0100h],xmm0
        mov     esi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esi]
        movss   [ebx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-0d8h+0100h]
        movss   [eax],xmm0
; Line 3718: } 
L_34663:
        mov     ebx,01h
        mov     eax,ecx
        mov     esi,ecx
        mov     ecx,edx
        movss   xmm1,[esi]
        movss   xmm0,[ecx]
        comiss  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_34592
; Line 3701:         { 
; Line 3702:             swap(*__x, *__y);       
        mov     ecx,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[edx]
        movss   [esp-0d8h+0100h],xmm0
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[edx]
        movss   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-0d8h+0100h]
        movss   [eax],xmm0
; Line 3718: } 
L_34743:
        mov     ebx,02h
; Line 3704:         } 
L_34592:
        mov     eax,ebx
        jmp     L_34581
; Line 3706:     } 
L_34583:
        mov     eax,ebx
        mov     edi,esi
        movss   xmm1,[ebx]
        movss   xmm0,[edi]
        comiss  xmm0,xmm1
        seta    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_34602
; Line 3708:     { 
; Line 3709:         swap(*__x, *__z);           
        mov     ecx,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[edx]
        movss   [esp-0d8h+0100h],xmm0
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[edx]
        movss   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-0d8h+0100h]
        movss   [eax],xmm0
; Line 3718: } 
L_34823:
        mov     eax,01h
        jmp     L_34581
; Line 3712:     } 
L_34602:
        mov     ebx,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     esi,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esi]
        movss   [esp-0d8h+0100h],xmm0
        mov     esi,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esi]
        movss   [edx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-0d8h+0100h]
        movss   [ebx],xmm0
; Line 3718: } 
L_34887:
        mov     edx,01h
        mov     esi,eax
        mov     ebx,ecx
        movss   xmm1,[esi]
        movss   xmm0,[ebx]
        comiss  xmm0,xmm1
        seta    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_34609
; Line 3716:     { 
; Line 3717:         swap(*__y, *__z);           
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[edx]
        movss   [esp-0d8h+0100h],xmm0
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[edx]
        movss   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-0d8h+0100h]
        movss   [eax],xmm0
; Line 3718: } 
L_34967:
        mov     edx,02h
; Line 3719:     } 
L_34609:
        mov     eax,edx
; Line 3721: }                                   
L_34581:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0f0h
        ret
section code
section code
        section vsc@std@__1@#__sort4$r#__less$ff~pf~$qpfpfpfpfr#__less$ff~ virtual
        [bits 32]
@std@__1@#__sort4$r#__less$ff~pf~$qpfpfpfpfr#__less$ff~:
; Line 3726: unsigned 
        add     esp,0ffffff6ch
        push    ebx
        push    ebp
        push    esi
        push    edi
L_35021:
        mov     eax,dword [esp+014h+0a4h]
        mov     esi,dword [esp+010h+0a4h]
        mov     ebx,dword [esp+0ch+0a4h]
        mov     ebp,dword [esp+08h+0a4h]
        mov     edi,dword [esp+04h+0a4h]
; Line 3730:     unsigned __r = __sort3<_Compare>(__x1, __x2, __x3, __c); 
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,ebp
        push    eax
        mov     eax,edi
        push    eax
        call    @std@__1@#__sort3$r#__less$ff~pf~$qpfpfpfr#__less$ff~
        add     esp,byte 010h
        mov     dword [esp-094h+0a4h],eax
        mov     edx,esi
        mov     ecx,esi
        mov     eax,ebx
        mov     esi,ebx
        movss   xmm1,[ecx]
        movss   xmm0,[esi]
        comiss  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_35024
; Line 3732:     { 
; Line 3733:         swap(*__x3, *__x4); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[ecx]
        movss   [esp-078h+0a4h],xmm0
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[ecx]
        movss   [eax],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-078h+0a4h]
        movss   [edx],xmm0
; Line 3718: } 
L_35076:
        inc     dword [esp-094h+0a4h]
        mov     eax,ebx
        mov     ecx,ebp
        mov     edx,ebp
        movss   xmm1,[ebx]
        movss   xmm0,[edx]
        comiss  xmm0,xmm1
        seta    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_35028
; Line 3736:         { 
; Line 3737:             swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[edx]
        movss   [esp-078h+0a4h],xmm0
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[edx]
        movss   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-078h+0a4h]
        movss   [eax],xmm0
; Line 3718: } 
L_35156:
        inc     dword [esp-094h+0a4h]
        mov     ecx,ebp
        mov     eax,edi
        movss   xmm1,[ecx]
        movss   xmm0,[eax]
        comiss  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_35032
; Line 3740:             { 
; Line 3741:                 swap(*__x1, *__x2); 
        mov     eax,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[ecx]
        movss   [esp-078h+0a4h],xmm0
        mov     ecx,ebp
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[ecx]
        movss   [eax],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-078h+0a4h]
        movss   [ebp],xmm0
; Line 3718: } 
L_35236:
        inc     dword [esp-094h+0a4h]
; Line 3743:             } 
L_35032:
; Line 3744:         } 
L_35028:
; Line 3745:     } 
L_35024:
        mov     eax,dword [esp-094h+0a4h]
; Line 3747: } 
L_35022:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,094h
        ret
section code
section code
        section vsc@std@__1@#__sort5$r#__less$ff~pf~$qpfpfpfpfpfr#__less$ff~ virtual
        [bits 32]
@std@__1@#__sort5$r#__less$ff~pf~$qpfpfpfpfpfr#__less$ff~:
; Line 3752: _LIBCPP_HIDDEN 
        add     esp,0ffffff38h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_35290:
        mov     ecx,dword [esp+018h+0d8h]
        mov     ebx,dword [esp+014h+0d8h]
        mov     esi,dword [esp+010h+0d8h]
        mov     eax,dword [esp+0ch+0d8h]
        mov     dword [esp-0c8h+0d8h],eax
        mov     edi,dword [esp+08h+0d8h]
        mov     ebp,dword [esp+04h+0d8h]
; Line 3757:     unsigned __r = __sort4<_Compare>(__x1, __x2, __x3, __x4, __c); 
        push    ecx
        mov     eax,esi
        push    eax
        mov     eax,dword [esp-0c8h+0e0h]
        push    eax
        mov     eax,edi
        push    eax
        mov     eax,ebp
        push    eax
        call    @std@__1@#__sort4$r#__less$ff~pf~$qpfpfpfpfr#__less$ff~
        add     esp,byte 014h
        mov     dword [esp-0c4h+0d8h],eax
        mov     edx,ebx
        mov     ecx,ebx
        mov     eax,esi
        mov     ebx,esi
        movss   xmm1,[ecx]
        movss   xmm0,[ebx]
        comiss  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_35293
; Line 3759:     { 
; Line 3760:         swap(*__x4, *__x5); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[ecx]
        movss   [esp-0a8h+0d8h],xmm0
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[ecx]
        movss   [eax],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-0a8h+0d8h]
        movss   [edx],xmm0
; Line 3718: } 
L_35352:
        inc     dword [esp-0c4h+0d8h]
        mov     eax,esi
        mov     ebx,esi
        mov     ecx,dword [esp-0c8h+0d8h]
        mov     edx,ecx
        movss   xmm1,[ebx]
        movss   xmm0,[edx]
        comiss  xmm0,xmm1
        seta    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_35297
; Line 3763:         { 
; Line 3764:             swap(*__x3, *__x4); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[ecx]
        movss   [esp-0a8h+0d8h],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[eax]
        movss   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-0a8h+0d8h]
        movss   [eax],xmm0
; Line 3718: } 
L_35432:
        inc     dword [esp-0c4h+0d8h]
        mov     eax,dword [esp-0c8h+0d8h]
        mov     edx,edi
        movss   xmm1,[eax]
        movss   xmm0,[edx]
        comiss  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_35301
; Line 3767:             { 
; Line 3768:                 swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[edx]
        movss   [esp-0a8h+0d8h],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[eax]
        movss   [edx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-0a8h+0d8h]
        movss   [eax],xmm0
; Line 3718: } 
L_35512:
        inc     dword [esp-0c4h+0d8h]
        movss   xmm1,[edi]
        movss   xmm0,[ebp]
        comiss  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_35305
; Line 3771:                 { 
; Line 3772:                     swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[ebp]
        movss   [esp-0a8h+0d8h],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[edi]
        movss   [ebp],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-0a8h+0d8h]
        movss   [edi],xmm0
; Line 3718: } 
L_35592:
        inc     dword [esp-0c4h+0d8h]
; Line 3774:                 } 
L_35305:
; Line 3775:             } 
L_35301:
; Line 3776:         } 
L_35297:
; Line 3777:     } 
L_35293:
        mov     eax,dword [esp-0c4h+0d8h]
; Line 3779: } 
L_35291:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0c8h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_3$r#__less$ff~pf~$qpfpfr#__less$ff~ virtual
        [bits 32]
@std@__1@#__insertion_sort_3$r#__less$ff~pf~$qpfpfr#__less$ff~:
; Line 3817: void 
        add     esp,byte 0ffffffcch
        push    ebx
        push    ebp
        push    esi
        push    edi
L_35646:
        mov     edx,dword [esp+0ch+044h]
        mov     esi,dword [esp+08h+044h]
        mov     edi,dword [esp+04h+044h]
; Line 3820:     typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type; 
        mov     ecx,edi
        mov     eax,edi
        add     eax,byte 08h
        mov     ebx,eax
        push    edx
        mov     eax,ebx
        push    eax
        mov     eax,edi
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ff~pf~$qpfpfpfr#__less$ff~
        add     esp,byte 010h
; Line 3823:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     eax,ebx
        add     eax,byte 04h
        cmp     eax,esi
        je      L_35651
L_35649:
; Line 3824:     { 
; Line 3825:         if (__comp(*__i, *__j)) 
        mov     ebp,eax
        mov     ecx,ebx
        mov     edx,ebx
        movss   xmm1,[eax]
        movss   xmm0,[edx]
        comiss  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_35656
; Line 3826:         { 
; Line 3827:             value_type __t(_VSTD::move(*__i)); 
        mov     eax,ebp
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[eax]
        movss   [esp-04h+044h],xmm0
        mov     eax,ebp
; Line 3831:             { 
L_35660:
; Line 3832:                 *__j = _VSTD::move(*__k); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[edx]
        movss   [eax],xmm0
        mov     eax,ecx
; Line 3834:             } while (__j != __first && __comp(__t, *--__k)); 
L_35662:
        cmp     eax,edi
        je      L_35725
        sub     ecx,byte 04h
        mov     edx,ecx
        movss   xmm1,[esp-04h+044h]
        movss   xmm0,[edx]
        comiss  xmm0,xmm1
        seta    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        jne     L_35660
L_35725:
L_35661:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-04h+044h]
        movss   [eax],xmm0
; Line 3836:         } 
L_35656:
        mov     ebx,ebp
; Line 3838:     } 
L_35652:
        mov     eax,ebp
        add     eax,byte 04h
L_35650:
        cmp     eax,esi
        jne     L_35649
L_35651:
; Line 3839: } 
L_35647:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_incomplete$r#__less$ff~pf~$qpfpfr#__less$ff~ virtual
        [bits 32]
@std@__1@#__insertion_sort_incomplete$r#__less$ff~pf~$qpfpfr#__less$ff~:
; Line 3842: bool 
        add     esp,byte 0ffffff94h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_35761:
        mov     edx,dword [esp+0ch+07ch]
        mov     eax,dword [esp+08h+07ch]
        mov     dword [esp-068h+07ch],eax
        mov     ebx,dword [esp+04h+07ch]
; Line 3845:     switch (__last - __first) 
        mov     ecx,dword [esp-068h+07ch]
        mov     eax,ebx
        mov     esi,ecx
        sub     esi,eax
        sar     esi,02h
        mov     dword [esp-06ch+07ch],ecx
        cmp     esi,byte 06h
        jnc     L_35785
        push    esi
        mov     esi,dword [esi*4+L_65850]
        xchg    esi,dword [esp]
        ret
        times $$-$ & 3 nop
L_65850:
        dd      L_35767
        dd      L_35769
        dd      L_35771
        dd      L_35778
        dd      L_35780
        dd      L_35782
; Line 3846:     { 
; Line 3847:     case 0: 
L_35767:
L_35769:
        mov     al,01h
        jmp     L_35762
L_35771:
        mov     ecx,dword [esp-06ch+07ch]
        sub     ecx,byte 04h
        movss   xmm1,[ecx]
        movss   xmm0,[eax]
        comiss  xmm0,xmm1
        seta    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_35773
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[eax]
        movss   [esp-01ch+07ch],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[ecx]
        movss   [eax],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-01ch+07ch]
        movss   [ecx],xmm0
; Line 3718: } 
L_35849:
L_35773:
        mov     al,01h
        jmp     L_35762
L_35778:
        push    edx
        mov     ecx,dword [esp-06ch+080h]
        sub     ecx,byte 04h
        push    ecx
        mov     ecx,ebx
        add     eax,byte 04h
        push    eax
        push    ecx
        call    @std@__1@#__sort3$r#__less$ff~pf~$qpfpfpfr#__less$ff~
        add     esp,byte 010h
        mov     al,01h
        jmp     L_35762
L_35780:
        push    edx
        mov     ecx,dword [esp-06ch+080h]
        sub     ecx,byte 04h
        push    ecx
        mov     ecx,ebx
        mov     edx,eax
        add     edx,byte 08h
        push    edx
        add     eax,byte 04h
        push    eax
        push    ecx
        call    @std@__1@#__sort4$r#__less$ff~pf~$qpfpfpfpfr#__less$ff~
        add     esp,byte 014h
        mov     al,01h
        jmp     L_35762
L_35782:
        push    edx
        mov     ecx,dword [esp-06ch+080h]
        sub     ecx,byte 04h
        push    ecx
        mov     ecx,ebx
        mov     edx,eax
        add     edx,byte 0ch
        push    edx
        mov     edx,eax
        add     edx,byte 08h
        push    edx
        add     eax,byte 04h
        push    eax
        push    ecx
        call    @std@__1@#__sort5$r#__less$ff~pf~$qpfpfpfpfpfr#__less$ff~
        add     esp,byte 018h
        mov     al,01h
        jmp     L_35762
; Line 3863:     } 
L_35785:
L_35764:
        mov     ecx,eax
        add     ecx,byte 08h
        mov     esi,ecx
        push    edx
        mov     ecx,esi
        push    ecx
        mov     ecx,ebx
        add     eax,byte 04h
        push    eax
        push    ecx
        call    @std@__1@#__sort3$r#__less$ff~pf~$qpfpfpfr#__less$ff~
        add     esp,byte 010h
        xor     edi,edi
; Line 3869:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     eax,esi
        add     eax,byte 04h
        cmp     eax,dword [esp-068h+07ch]
        je      L_35789
L_35787:
; Line 3870:     { 
; Line 3871:         if (__comp(*__i, *__j)) 
        mov     edx,eax
        mov     ecx,esi
        movss   xmm1,[eax]
        movss   xmm0,[esi]
        comiss  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_35794
; Line 3872:         { 
; Line 3873:             value_type __t(_VSTD::move(*__i)); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[eax]
        movss   [esp-04h+07ch],xmm0
        mov     esi,ecx
        mov     eax,edx
; Line 3877:             { 
L_35798:
; Line 3878:                 *__j = _VSTD::move(*__k); 
        mov     ecx,esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[ecx]
        movss   [eax],xmm0
        mov     eax,esi
; Line 3880:             } while (__j != __first && __comp(__t, *--__k)); 
L_35800:
        cmp     eax,ebx
        je      L_35948
        sub     esi,byte 04h
        mov     ecx,esi
        movss   xmm1,[esp-04h+07ch]
        movss   xmm0,[ecx]
        comiss  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_35798
L_35948:
L_35799:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-04h+07ch]
        movss   [eax],xmm0
        inc     edi
        cmp     edi,byte 08h
        jne     L_35807
        mov     ecx,edx
        add     ecx,byte 04h
        mov     eax,dword [esp-06ch+07ch]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
        jmp     L_35762
L_35807:
; Line 3884:         } 
L_35794:
        mov     esi,edx
; Line 3886:     } 
L_35790:
        mov     eax,edx
        add     eax,byte 04h
L_35788:
        cmp     eax,dword [esp-068h+07ch]
        jne     L_35787
L_35789:
        mov     al,01h
; Line 3888: } 
L_35762:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 06ch
        ret
section code
section code
        section vsc@std@__1@#__sort$r#__less$ff~pf~$qpfpfr#__less$ff~ virtual
        [bits 32]
@std@__1@#__sort$r#__less$ff~pf~$qpfpfr#__less$ff~:
; Line 3926: void 
        add     esp,0fffffe64h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_35984:
        mov     eax,dword [esp+0ch+01ach]
        mov     dword [esp-019ch+01ach],eax
        mov     eax,dword [esp+08h+01ach]
        mov     dword [esp-0198h+01ach],eax
        mov     eax,dword [esp+04h+01ach]
        mov     dword [esp-0190h+01ach],eax
; Line 3930:     typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type; 
L_35987:
; Line 3935:     { 
; Line 3936:     __restart: 
L_35993:
        mov     eax,dword [esp-0198h+01ach]
        mov     ebx,dword [esp-0190h+01ach]
        mov     ecx,eax
        sub     ecx,ebx
        mov     edx,ecx
        sar     edx,02h
        mov     ecx,edx
        and     ecx,ecx
        jl      L_36015
        cmp     ecx,byte 06h
        jge     L_36015
        push    ecx
        mov     ecx,dword [ecx*4+L_65855]
        xchg    ecx,dword [esp]
        ret
        times $$-$ & 3 nop
L_65855:
        dd      L_35997
        dd      L_35999
        dd      L_36001
        dd      L_36008
        dd      L_36010
        dd      L_36012
; Line 3939:         { 
; Line 3940:         case 0: 
L_35997:
L_35999:
        jmp     L_35985
L_36001:
        sub     eax,byte 04h
        movss   xmm1,[eax]
        movss   xmm0,[ebx]
        comiss  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_35985
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[ebx]
        movss   [esp-0168h+01ach],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[eax]
        movss   [ebx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-0168h+01ach]
        movss   [eax],xmm0
; Line 3718: } 
L_36253:
L_36003:
        jmp     L_35985
L_36008:
        mov     ecx,dword [esp-019ch+01ach]
        push    ecx
        sub     eax,byte 04h
        push    eax
        mov     eax,dword [esp-0190h+01b4h]
        mov     ecx,ebx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$ff~pf~$qpfpfpfr#__less$ff~
        add     esp,byte 010h
        jmp     L_35985
L_36010:
        mov     ecx,dword [esp-019ch+01ach]
        push    ecx
        sub     eax,byte 04h
        push    eax
        mov     eax,dword [esp-0190h+01b4h]
        mov     ecx,ebx
        add     ecx,byte 08h
        push    ecx
        mov     ecx,ebx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$ff~pf~$qpfpfpfpfr#__less$ff~
        add     esp,byte 014h
        jmp     L_35985
L_36012:
        mov     ecx,dword [esp-019ch+01ach]
        push    ecx
        sub     eax,byte 04h
        push    eax
        mov     eax,dword [esp-0190h+01b4h]
        mov     ecx,ebx
        add     ecx,byte 0ch
        push    ecx
        mov     ecx,ebx
        add     ecx,byte 08h
        push    ecx
        mov     ecx,ebx
        add     ecx,byte 04h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$ff~pf~$qpfpfpfpfpfr#__less$ff~
        add     esp,byte 018h
        jmp     L_35985
; Line 3956:         } 
L_36015:
L_35994:
        cmp     edx,byte 06h
        jg      L_36017
; Line 3958:         { 
; Line 3959:             _VSTD::__insertion_sort_3<_Compare>(__first, __last, __comp); 
        mov     eax,dword [esp-019ch+01ach]
        push    eax
        mov     eax,dword [esp-0198h+01b0h]
        push    eax
        mov     eax,dword [esp-0190h+01b4h]
        push    eax
        call    @std@__1@#__insertion_sort_3$r#__less$ff~pf~$qpfpfr#__less$ff~
        add     esp,byte 0ch
        jmp     L_35985
; Line 3961:         } 
L_36017:
        mov     ecx,ebx
        sub     eax,byte 04h
        mov     esi,eax
; Line 3967:         { 
; Line 3968:         difference_type __delta; 
        cmp     edx,03e8h
        jl      L_36025
; Line 3970:         { 
; Line 3971:             __delta = __len/2; 
        mov     eax,edx
        shr     eax,01fh
        add     eax,edx
        sar     eax,01h
        mov     edx,eax
        shl     edx,02h
        add     ecx,edx
        mov     dword [esp-0188h+01ach],ecx
        mov     ecx,eax
        shr     ecx,01fh
        add     eax,ecx
        sar     eax,01h
        mov     ecx,dword [esp-019ch+01ach]
        push    ecx
        mov     ecx,esi
        push    ecx
        mov     edx,dword [esp-0188h+01b4h]
        mov     ecx,eax
        shl     ecx,02h
        mov     eax,edx
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0188h+01b8h]
        push    eax
        mov     eax,ebx
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0190h+01c0h]
        push    eax
        call    @std@__1@#__sort5$r#__less$ff~pf~$qpfpfpfpfpfr#__less$ff~
        add     esp,byte 018h
        mov     dword [esp-0184h+01ach],eax
; Line 3975:         } 
        jmp     L_36030
L_36025:
; Line 3976:         else 
; Line 3977:         { 
; Line 3978:             __delta = __len/2; 
        mov     eax,edx
        shr     eax,01fh
        add     eax,edx
        sar     eax,01h
        shl     eax,02h
        add     eax,ecx
        mov     dword [esp-0188h+01ach],eax
        mov     eax,dword [esp-019ch+01ach]
        push    eax
        mov     eax,esi
        push    eax
        mov     eax,dword [esp-0188h+01b4h]
        push    eax
        mov     eax,dword [esp-0190h+01b8h]
        push    eax
        call    @std@__1@#__sort3$r#__less$ff~pf~$qpfpfpfr#__less$ff~
        add     esp,byte 010h
        mov     dword [esp-0184h+01ach],eax
; Line 3981:         } 
L_36030:
; Line 3982:         } 
        mov     eax,dword [esp-0190h+01ach]
        mov     ebx,eax
        mov     edi,eax
        mov     edx,edi
        mov     dword [esp-018ch+01ach],edx
        mov     ecx,dword [esp-0188h+01ach]
        mov     eax,ecx
        movss   xmm1,[edx]
        movss   xmm0,[ecx]
        comiss  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_36038
; Line 3992:         { 
; Line 3995:             while (true) 
        mov     ecx,esi
L_36042:
; Line 3996:             { 
; Line 3997:                 if (__i == --__j) 
        sub     ecx,byte 04h
        mov     esi,ecx
        cmp     edi,ecx
        jne     L_36048
; Line 3998:                 { 
; Line 4001:                     ++__i;   
        mov     eax,dword [esp-018ch+01ach]
        add     eax,byte 04h
        mov     edx,eax
        mov     eax,dword [esp-0198h+01ach]
        mov     ecx,ebx
        sub     eax,byte 04h
        mov     esi,eax
        mov     edi,eax
        movss   xmm1,[ecx]
        movss   xmm0,[esi]
        comiss  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_36052
; Line 4004:                     { 
; Line 4005:                         while (true) 
L_36056:
; Line 4006:                         { 
; Line 4007:                             if (__i == __j) 
        cmp     edx,eax
        je      L_35985
L_36062:
        mov     ecx,ebx
        mov     esi,edx
        movss   xmm1,[ecx]
        movss   xmm0,[esi]
        comiss  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_36067
; Line 4010:                             { 
; Line 4011:                                 swap(*__i, *__j); 
        mov     ecx,edx
        mov     ebx,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     esi,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esi]
        movss   [esp-0168h+01ach],xmm0
        mov     esi,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esi]
        movss   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-0168h+01ach]
        movss   [ebx],xmm0
; Line 3718: } 
L_36365:
        inc     dword [esp-0184h+01ach]
        add     edx,byte 04h
; Line 4014:                                 break; 
        jmp     L_36057
L_36067:
        add     edx,byte 04h
; Line 4017:                         } 
L_36058:
        jmp     L_36056
L_36057:
; Line 4018:                     } 
L_36052:
        cmp     edx,eax
        je      L_35985
L_36080:
L_36085:
; Line 4023:                     { 
; Line 4024:                         while (!__comp(*__first, *__i)) 
        mov     ebx,dword [esp-0190h+01ach]
        mov     esi,ebx
        mov     eax,edx
        mov     ecx,edx
        movss   xmm1,[ebx]
        movss   xmm0,[eax]
        comiss  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_36092
L_36091:
        mov     eax,ecx
        add     eax,byte 04h
        mov     edx,eax
L_36093:
        mov     ebx,esi
        mov     eax,edx
        mov     ecx,edx
        movss   xmm1,[ebx]
        movss   xmm0,[eax]
        comiss  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_36091
L_36092:
        mov     ebp,esi
        mov     eax,edi
        sub     eax,byte 04h
        mov     ebx,eax
        mov     edi,eax
        movss   xmm1,[ebp]
        movss   xmm0,[eax]
        comiss  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_36099
L_36098:
L_36100:
; Line 4026:                         while (__comp(*__first, *--__j)) 
        mov     ebp,esi
        mov     eax,edi
        sub     eax,byte 04h
        mov     ebx,eax
        mov     edi,eax
        movss   xmm1,[ebp]
        movss   xmm0,[eax]
        comiss  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_36098
L_36099:
        cmp     edx,ebx
        jge     L_36086
; Line 4029:                             break; 
L_36105:
        mov     edx,ecx
        mov     eax,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[ebx]
        movss   [esp-0168h+01ach],xmm0
        mov     ebx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[ebx]
        movss   [edx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-0168h+01ach]
        movss   [eax],xmm0
; Line 3718: } 
L_36493:
        inc     dword [esp-0184h+01ach]
        mov     edx,ecx
        add     edx,byte 04h
; Line 4033:                     } 
L_36087:
; Line 4022:                     while (true) 
        jmp     L_36085
L_36086:
        mov     dword [esp-0190h+01ach],ecx
        jmp     L_35993
L_36048:
        mov     edx,esi
        mov     ecx,esi
        mov     ebp,eax
        movss   xmm1,[edx]
        movss   xmm0,[ebp]
        comiss  xmm0,xmm1
        seta    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_36116
; Line 4041:                 { 
; Line 4042:                     swap(*__i, *__j); 
        mov     edx,dword [esp-018ch+01ach]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[ebx]
        movss   [esp-0168h+01ach],xmm0
        mov     ebx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[ebx]
        movss   [edx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-0168h+01ach]
        movss   [ecx],xmm0
; Line 3718: } 
L_36573:
        inc     dword [esp-0184h+01ach]
; Line 4044:                     break;   
        jmp     L_36043
L_36116:
; Line 4046:             } 
L_36044:
        jmp     L_36042
L_36043:
; Line 4047:         } 
L_36038:
        mov     ecx,dword [esp-018ch+01ach]
        add     ecx,byte 04h
        mov     ebx,ecx
        cmp     ebx,esi
        jge     L_36129
; Line 4053:         { 
; Line 4056:             while (true) 
L_36133:
; Line 4057:             { 
; Line 4059:                 while (__comp(*__i, *__m)) 
        mov     edi,ebx
        mov     edx,ebx
        mov     ecx,eax
        movss   xmm1,[edi]
        movss   xmm0,[ecx]
        comiss  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_36140
L_36139:
        mov     ecx,edx
        add     ecx,byte 04h
        mov     ebx,ecx
L_36141:
        mov     edi,ebx
        mov     edx,ebx
        mov     ecx,eax
        movss   xmm1,[edi]
        movss   xmm0,[ecx]
        comiss  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_36139
L_36140:
        sub     esi,byte 04h
        mov     ecx,esi
        mov     edi,esi
        mov     ebp,eax
        movss   xmm1,[ecx]
        movss   xmm0,[ebp]
        comiss  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_36147
L_36146:
L_36148:
; Line 4062:                 while (!__comp(*--__j, *__m)) 
        mov     ecx,edi
        sub     ecx,byte 04h
        mov     esi,ecx
        mov     edi,ecx
        mov     ebp,eax
        movss   xmm1,[ecx]
        movss   xmm0,[ebp]
        comiss  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_36146
L_36147:
        cmp     ebx,esi
        jg      L_36134
; Line 4065:                     break; 
L_36153:
        mov     ebp,edx
        mov     ecx,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,ebp
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[eax]
        movss   [esp-0168h+01ach],xmm0
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[eax]
        movss   [ebp],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-0168h+01ach]
        movss   [ecx],xmm0
; Line 3718: } 
L_36701:
        inc     dword [esp-0184h+01ach]
        mov     eax,ebx
        cmp     dword [esp-0188h+01ach],eax
        jne     L_36158
        mov     dword [esp-0188h+01ach],edi
L_36158:
        mov     eax,edx
        add     eax,byte 04h
        mov     ebx,eax
; Line 4073:             } 
L_36135:
        mov     eax,dword [esp-0188h+01ach]
        jmp     L_36133
L_36134:
; Line 4074:         } 
L_36129:
        cmp     ebx,dword [esp-0188h+01ach]
        je      L_36169
        mov     esi,eax
        mov     ecx,ebx
        mov     edx,ebx
        movss   xmm1,[esi]
        movss   xmm0,[edx]
        comiss  xmm0,xmm1
        seta    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_36169
; Line 4077:         { 
; Line 4078:             swap(*__i, *__m); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[edx]
        movss   [esp-0168h+01ach],xmm0
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[edx]
        movss   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movss   xmm0,[esp-0168h+01ach]
        movss   [eax],xmm0
; Line 3718: } 
L_36781:
        inc     dword [esp-0184h+01ach]
; Line 4080:         } 
L_36169:
        cmp     dword [esp-0184h+01ach],byte 00h
        jne     L_36176
; Line 4084:         { 
; Line 4085:             bool __fs = _VSTD::__insertion_sort_incomplete<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-019ch+01ach]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0190h+01b4h]
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$ff~pf~$qpfpfr#__less$ff~
        add     esp,byte 0ch
        mov     byte [esp-0191h+01ach],al
        mov     eax,dword [esp-019ch+01ach]
        push    eax
        mov     eax,dword [esp-0198h+01b0h]
        push    eax
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$ff~pf~$qpfpfr#__less$ff~
        add     esp,byte 0ch
        and     al,al
        je      L_36180
; Line 4087:             { 
; Line 4088:                 if (__fs) 
        cmp     byte [esp-0191h+01ach],byte 00h
        jne     L_35985
L_36184:
        mov     dword [esp-0198h+01ach],ebx
; Line 4091:                 continue; 
        jmp     L_35987
L_36180:
; Line 4093:             else 
; Line 4094:             { 
; Line 4095:                 if (__fs) 
        cmp     byte [esp-0191h+01ach],byte 00h
        je      L_36194
; Line 4096:                 { 
; Line 4097:                     __first = ++__i; 
        mov     eax,ebx
        add     eax,byte 04h
        mov     dword [esp-0190h+01ach],eax
; Line 4098:                     continue; 
        jmp     L_35987
L_36194:
; Line 4100:             } 
L_36190:
; Line 4101:         } 
L_36176:
        mov     eax,dword [esp-0198h+01ach]
        mov     ecx,ebx
        sub     eax,ecx
        mov     edx,eax
        sar     edx,02h
        mov     eax,dword [esp-0190h+01ach]
        sub     eax,ecx
        neg     eax
        imul    eax,byte 01h
        sar     eax,02h
        cmp     eax,edx
        jge     L_36207
; Line 4104:         { 
; Line 4105:             _VSTD::__sort<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-019ch+01ach]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0190h+01b4h]
        push    eax
        call    @std@__1@#__sort$r#__less$ff~pf~$qpfpfr#__less$ff~
        add     esp,byte 0ch
        mov     eax,ebx
        add     eax,byte 04h
        mov     dword [esp-0190h+01ach],eax
; Line 4108:         } 
        jmp     L_36212
L_36207:
; Line 4109:         else 
; Line 4110:         { 
; Line 4111:             _VSTD::__sort<_Compare>(__i+1, __last, __comp); 
        mov     eax,dword [esp-019ch+01ach]
        push    eax
        mov     eax,dword [esp-0198h+01b0h]
        push    eax
        mov     eax,ecx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__sort$r#__less$ff~pf~$qpfpfr#__less$ff~
        add     esp,byte 0ch
        mov     dword [esp-0198h+01ach],ebx
; Line 4114:         } 
L_36212:
; Line 4115:     } 
L_35989:
; Line 3934:     while (true) 
        jmp     L_35987
; Line 4116: } 
L_35988:
L_35985:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,019ch
        ret
section code
section code
        section vsc@std@__1@#__sort3$r#__less$dd~pd~$qpdpdpdr#__less$dd~ virtual
        [bits 32]
@std@__1@#__sort3$r#__less$dd~pd~$qpdpdpdr#__less$dd~:
; Line 3689: unsigned 
        add     esp,0fffffe78h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_36835:
        mov     ebx,dword [esp+0ch+0198h]
        mov     ecx,dword [esp+08h+0198h]
        mov     ebp,dword [esp+04h+0198h]
; Line 3692:     unsigned __r = 0; 
        xor     edi,edi
        mov     eax,ecx
        mov     esi,ecx
        mov     edx,ebp
        movsd   xmm1,[eax]
        movsd   xmm0,[ebp]
        comisd  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_36838
; Line 3694:     { 
; Line 3695:         if (!__c(*__z, *__y))       
        mov     eax,ebx
        mov     ebp,esi
        movsd   xmm1,[ebx]
        movsd   xmm0,[ebp]
        comisd  xmm0,xmm1
        seta    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        jne     L_36842
        mov     eax,edi
        jmp     L_36836
L_36842:
        mov     ebx,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     esi,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esi]
        movsd   [esp-0158h+0198h],xmm0
        mov     esi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esi]
        movsd   [ebx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0158h+0198h]
        movsd   [eax],xmm0
; Line 3718: } 
L_36918:
        mov     ebx,01h
        mov     eax,ecx
        mov     esi,ecx
        mov     ecx,edx
        movsd   xmm1,[esi]
        movsd   xmm0,[ecx]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_36847
; Line 3701:         { 
; Line 3702:             swap(*__x, *__y);       
        mov     ecx,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [esp-0158h+0198h],xmm0
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0158h+0198h]
        movsd   [eax],xmm0
; Line 3718: } 
L_36998:
        mov     ebx,02h
; Line 3704:         } 
L_36847:
        mov     eax,ebx
        jmp     L_36836
; Line 3706:     } 
L_36838:
        mov     eax,ebx
        mov     edi,esi
        movsd   xmm1,[ebx]
        movsd   xmm0,[edi]
        comisd  xmm0,xmm1
        seta    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_36857
; Line 3708:     { 
; Line 3709:         swap(*__x, *__z);           
        mov     ecx,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [esp-0158h+0198h],xmm0
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0158h+0198h]
        movsd   [eax],xmm0
; Line 3718: } 
L_37078:
        mov     eax,01h
        jmp     L_36836
; Line 3712:     } 
L_36857:
        mov     ebx,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     esi,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esi]
        movsd   [esp-0158h+0198h],xmm0
        mov     esi,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esi]
        movsd   [edx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0158h+0198h]
        movsd   [ebx],xmm0
; Line 3718: } 
L_37142:
        mov     edx,01h
        mov     esi,eax
        mov     ebx,ecx
        movsd   xmm1,[esi]
        movsd   xmm0,[ebx]
        comisd  xmm0,xmm1
        seta    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_36864
; Line 3716:     { 
; Line 3717:         swap(*__y, *__z);           
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [esp-0158h+0198h],xmm0
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0158h+0198h]
        movsd   [eax],xmm0
; Line 3718: } 
L_37222:
        mov     edx,02h
; Line 3719:     } 
L_36864:
        mov     eax,edx
; Line 3721: }                                   
L_36836:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0188h
        ret
section code
section code
        section vsc@std@__1@#__sort4$r#__less$dd~pd~$qpdpdpdpdr#__less$dd~ virtual
        [bits 32]
@std@__1@#__sort4$r#__less$dd~pd~$qpdpdpdpdr#__less$dd~:
; Line 3726: unsigned 
        add     esp,0ffffff0ch
        push    ebx
        push    ebp
        push    esi
        push    edi
L_37276:
        mov     eax,dword [esp+014h+0104h]
        mov     esi,dword [esp+010h+0104h]
        mov     ebx,dword [esp+0ch+0104h]
        mov     ebp,dword [esp+08h+0104h]
        mov     edi,dword [esp+04h+0104h]
; Line 3730:     unsigned __r = __sort3<_Compare>(__x1, __x2, __x3, __c); 
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,ebp
        push    eax
        mov     eax,edi
        push    eax
        call    @std@__1@#__sort3$r#__less$dd~pd~$qpdpdpdr#__less$dd~
        add     esp,byte 010h
        mov     dword [esp-0f4h+0104h],eax
        mov     edx,esi
        mov     ecx,esi
        mov     eax,ebx
        mov     esi,ebx
        movsd   xmm1,[ecx]
        movsd   xmm0,[esi]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_37279
; Line 3732:     { 
; Line 3733:         swap(*__x3, *__x4); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ecx]
        movsd   [esp-0c0h+0104h],xmm0
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ecx]
        movsd   [eax],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0c0h+0104h]
        movsd   [edx],xmm0
; Line 3718: } 
L_37331:
        inc     dword [esp-0f4h+0104h]
        mov     eax,ebx
        mov     ecx,ebp
        mov     edx,ebp
        movsd   xmm1,[ebx]
        movsd   xmm0,[edx]
        comisd  xmm0,xmm1
        seta    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_37283
; Line 3736:         { 
; Line 3737:             swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [esp-0c0h+0104h],xmm0
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0c0h+0104h]
        movsd   [eax],xmm0
; Line 3718: } 
L_37411:
        inc     dword [esp-0f4h+0104h]
        mov     ecx,ebp
        mov     eax,edi
        movsd   xmm1,[ecx]
        movsd   xmm0,[eax]
        comisd  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_37287
; Line 3740:             { 
; Line 3741:                 swap(*__x1, *__x2); 
        mov     eax,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ecx]
        movsd   [esp-0c0h+0104h],xmm0
        mov     ecx,ebp
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ecx]
        movsd   [eax],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0c0h+0104h]
        movsd   [ebp],xmm0
; Line 3718: } 
L_37491:
        inc     dword [esp-0f4h+0104h]
; Line 3743:             } 
L_37287:
; Line 3744:         } 
L_37283:
; Line 3745:     } 
L_37279:
        mov     eax,dword [esp-0f4h+0104h]
; Line 3747: } 
L_37277:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0f4h
        ret
section code
section code
        section vsc@std@__1@#__sort5$r#__less$dd~pd~$qpdpdpdpdpdr#__less$dd~ virtual
        [bits 32]
@std@__1@#__sort5$r#__less$dd~pd~$qpdpdpdpdpdr#__less$dd~:
; Line 3752: _LIBCPP_HIDDEN 
        add     esp,0fffffeb8h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_37545:
        mov     ecx,dword [esp+018h+0158h]
        mov     ebx,dword [esp+014h+0158h]
        mov     esi,dword [esp+010h+0158h]
        mov     eax,dword [esp+0ch+0158h]
        mov     dword [esp-0148h+0158h],eax
        mov     edi,dword [esp+08h+0158h]
        mov     ebp,dword [esp+04h+0158h]
; Line 3757:     unsigned __r = __sort4<_Compare>(__x1, __x2, __x3, __x4, __c); 
        push    ecx
        mov     eax,esi
        push    eax
        mov     eax,dword [esp-0148h+0160h]
        push    eax
        mov     eax,edi
        push    eax
        mov     eax,ebp
        push    eax
        call    @std@__1@#__sort4$r#__less$dd~pd~$qpdpdpdpdr#__less$dd~
        add     esp,byte 014h
        mov     dword [esp-0144h+0158h],eax
        mov     edx,ebx
        mov     ecx,ebx
        mov     eax,esi
        mov     ebx,esi
        movsd   xmm1,[ecx]
        movsd   xmm0,[ebx]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_37548
; Line 3759:     { 
; Line 3760:         swap(*__x4, *__x5); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ecx]
        movsd   [esp-0110h+0158h],xmm0
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ecx]
        movsd   [eax],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0110h+0158h]
        movsd   [edx],xmm0
; Line 3718: } 
L_37607:
        inc     dword [esp-0144h+0158h]
        mov     eax,esi
        mov     ebx,esi
        mov     ecx,dword [esp-0148h+0158h]
        mov     edx,ecx
        movsd   xmm1,[ebx]
        movsd   xmm0,[edx]
        comisd  xmm0,xmm1
        seta    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_37552
; Line 3763:         { 
; Line 3764:             swap(*__x3, *__x4); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ecx]
        movsd   [esp-0110h+0158h],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[eax]
        movsd   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0110h+0158h]
        movsd   [eax],xmm0
; Line 3718: } 
L_37687:
        inc     dword [esp-0144h+0158h]
        mov     eax,dword [esp-0148h+0158h]
        mov     edx,edi
        movsd   xmm1,[eax]
        movsd   xmm0,[edx]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_37556
; Line 3767:             { 
; Line 3768:                 swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [esp-0110h+0158h],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[eax]
        movsd   [edx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0110h+0158h]
        movsd   [eax],xmm0
; Line 3718: } 
L_37767:
        inc     dword [esp-0144h+0158h]
        movsd   xmm1,[edi]
        movsd   xmm0,[ebp]
        comisd  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_37560
; Line 3771:                 { 
; Line 3772:                     swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ebp]
        movsd   [esp-0110h+0158h],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edi]
        movsd   [ebp],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0110h+0158h]
        movsd   [edi],xmm0
; Line 3718: } 
L_37847:
        inc     dword [esp-0144h+0158h]
; Line 3774:                 } 
L_37560:
; Line 3775:             } 
L_37556:
; Line 3776:         } 
L_37552:
; Line 3777:     } 
L_37548:
        mov     eax,dword [esp-0144h+0158h]
; Line 3779: } 
L_37546:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0148h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_3$r#__less$dd~pd~$qpdpdr#__less$dd~ virtual
        [bits 32]
@std@__1@#__insertion_sort_3$r#__less$dd~pd~$qpdpdr#__less$dd~:
; Line 3817: void 
        add     esp,byte 0ffffffb8h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_37901:
        mov     edx,dword [esp+0ch+058h]
        mov     esi,dword [esp+08h+058h]
        mov     edi,dword [esp+04h+058h]
; Line 3820:     typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type; 
        mov     ecx,edi
        mov     eax,edi
        add     eax,byte 010h
        mov     ebx,eax
        push    edx
        mov     eax,ebx
        push    eax
        mov     eax,edi
        add     ecx,byte 08h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$dd~pd~$qpdpdpdr#__less$dd~
        add     esp,byte 010h
; Line 3823:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     eax,ebx
        add     eax,byte 08h
        cmp     eax,esi
        je      L_37906
L_37904:
; Line 3824:     { 
; Line 3825:         if (__comp(*__i, *__j)) 
        mov     ebp,eax
        mov     ecx,ebx
        mov     edx,ebx
        movsd   xmm1,[eax]
        movsd   xmm0,[edx]
        comisd  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_37911
; Line 3826:         { 
; Line 3827:             value_type __t(_VSTD::move(*__i)); 
        mov     eax,ebp
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[eax]
        movsd   [esp-08h+058h],xmm0
        mov     eax,ebp
; Line 3831:             { 
L_37915:
; Line 3832:                 *__j = _VSTD::move(*__k); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [eax],xmm0
        mov     eax,ecx
; Line 3834:             } while (__j != __first && __comp(__t, *--__k)); 
L_37917:
        cmp     eax,edi
        je      L_37980
        sub     ecx,byte 08h
        mov     edx,ecx
        movsd   xmm1,[esp-08h+058h]
        movsd   xmm0,[edx]
        comisd  xmm0,xmm1
        seta    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        jne     L_37915
L_37980:
L_37916:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-08h+058h]
        movsd   [eax],xmm0
; Line 3836:         } 
L_37911:
        mov     ebx,ebp
; Line 3838:     } 
L_37907:
        mov     eax,ebp
        add     eax,byte 08h
L_37905:
        cmp     eax,esi
        jne     L_37904
L_37906:
; Line 3839: } 
L_37902:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_incomplete$r#__less$dd~pd~$qpdpdr#__less$dd~ virtual
        [bits 32]
@std@__1@#__insertion_sort_incomplete$r#__less$dd~pd~$qpdpdr#__less$dd~:
; Line 3842: bool 
        add     esp,0ffffff60h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_38016:
        mov     edx,dword [esp+0ch+0b0h]
        mov     eax,dword [esp+08h+0b0h]
        mov     dword [esp-09ch+0b0h],eax
        mov     ebx,dword [esp+04h+0b0h]
; Line 3845:     switch (__last - __first) 
        mov     ecx,dword [esp-09ch+0b0h]
        mov     eax,ebx
        mov     esi,ecx
        sub     esi,eax
        sar     esi,03h
        mov     dword [esp-0a0h+0b0h],ecx
        cmp     esi,byte 06h
        jnc     L_38040
        push    esi
        mov     esi,dword [esi*4+L_65884]
        xchg    esi,dword [esp]
        ret
        times $$-$ & 3 nop
L_65884:
        dd      L_38022
        dd      L_38024
        dd      L_38026
        dd      L_38033
        dd      L_38035
        dd      L_38037
; Line 3846:     { 
; Line 3847:     case 0: 
L_38022:
L_38024:
        mov     al,01h
        jmp     L_38017
L_38026:
        mov     ecx,dword [esp-0a0h+0b0h]
        sub     ecx,byte 08h
        movsd   xmm1,[ecx]
        movsd   xmm0,[eax]
        comisd  xmm0,xmm1
        seta    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_38028
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[eax]
        movsd   [esp-028h+0b0h],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ecx]
        movsd   [eax],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-028h+0b0h]
        movsd   [ecx],xmm0
; Line 3718: } 
L_38104:
L_38028:
        mov     al,01h
        jmp     L_38017
L_38033:
        push    edx
        mov     ecx,dword [esp-0a0h+0b4h]
        sub     ecx,byte 08h
        push    ecx
        mov     ecx,ebx
        add     eax,byte 08h
        push    eax
        push    ecx
        call    @std@__1@#__sort3$r#__less$dd~pd~$qpdpdpdr#__less$dd~
        add     esp,byte 010h
        mov     al,01h
        jmp     L_38017
L_38035:
        push    edx
        mov     ecx,dword [esp-0a0h+0b4h]
        sub     ecx,byte 08h
        push    ecx
        mov     ecx,ebx
        mov     edx,eax
        add     edx,byte 010h
        push    edx
        add     eax,byte 08h
        push    eax
        push    ecx
        call    @std@__1@#__sort4$r#__less$dd~pd~$qpdpdpdpdr#__less$dd~
        add     esp,byte 014h
        mov     al,01h
        jmp     L_38017
L_38037:
        push    edx
        mov     ecx,dword [esp-0a0h+0b4h]
        sub     ecx,byte 08h
        push    ecx
        mov     ecx,ebx
        mov     edx,eax
        add     edx,byte 018h
        push    edx
        mov     edx,eax
        add     edx,byte 010h
        push    edx
        add     eax,byte 08h
        push    eax
        push    ecx
        call    @std@__1@#__sort5$r#__less$dd~pd~$qpdpdpdpdpdr#__less$dd~
        add     esp,byte 018h
        mov     al,01h
        jmp     L_38017
; Line 3863:     } 
L_38040:
L_38019:
        mov     ecx,eax
        add     ecx,byte 010h
        mov     esi,ecx
        push    edx
        mov     ecx,esi
        push    ecx
        mov     ecx,ebx
        add     eax,byte 08h
        push    eax
        push    ecx
        call    @std@__1@#__sort3$r#__less$dd~pd~$qpdpdpdr#__less$dd~
        add     esp,byte 010h
        xor     edi,edi
; Line 3869:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     eax,esi
        add     eax,byte 08h
        cmp     eax,dword [esp-09ch+0b0h]
        je      L_38044
L_38042:
; Line 3870:     { 
; Line 3871:         if (__comp(*__i, *__j)) 
        mov     edx,eax
        mov     ecx,esi
        movsd   xmm1,[eax]
        movsd   xmm0,[esi]
        comisd  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_38049
; Line 3872:         { 
; Line 3873:             value_type __t(_VSTD::move(*__i)); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[eax]
        movsd   [esp-08h+0b0h],xmm0
        mov     esi,ecx
        mov     eax,edx
; Line 3877:             { 
L_38053:
; Line 3878:                 *__j = _VSTD::move(*__k); 
        mov     ecx,esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ecx]
        movsd   [eax],xmm0
        mov     eax,esi
; Line 3880:             } while (__j != __first && __comp(__t, *--__k)); 
L_38055:
        cmp     eax,ebx
        je      L_38203
        sub     esi,byte 08h
        mov     ecx,esi
        movsd   xmm1,[esp-08h+0b0h]
        movsd   xmm0,[ecx]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_38053
L_38203:
L_38054:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-08h+0b0h]
        movsd   [eax],xmm0
        inc     edi
        cmp     edi,byte 08h
        jne     L_38062
        mov     ecx,edx
        add     ecx,byte 08h
        mov     eax,dword [esp-0a0h+0b0h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
        jmp     L_38017
L_38062:
; Line 3884:         } 
L_38049:
        mov     esi,edx
; Line 3886:     } 
L_38045:
        mov     eax,edx
        add     eax,byte 08h
L_38043:
        cmp     eax,dword [esp-09ch+0b0h]
        jne     L_38042
L_38044:
        mov     al,01h
; Line 3888: } 
L_38017:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0a0h
        ret
section code
section code
        section vsc@std@__1@#__sort$r#__less$dd~pd~$qpdpdr#__less$dd~ virtual
        [bits 32]
@std@__1@#__sort$r#__less$dd~pd~$qpdpdr#__less$dd~:
; Line 3926: void 
        add     esp,0fffffdach
        push    ebx
        push    ebp
        push    esi
        push    edi
L_38239:
        mov     eax,dword [esp+0ch+0264h]
        mov     dword [esp-0254h+0264h],eax
        mov     eax,dword [esp+08h+0264h]
        mov     dword [esp-0250h+0264h],eax
        mov     eax,dword [esp+04h+0264h]
        mov     dword [esp-0248h+0264h],eax
; Line 3930:     typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type; 
L_38242:
; Line 3935:     { 
; Line 3936:     __restart: 
L_38248:
        mov     eax,dword [esp-0250h+0264h]
        mov     ebx,dword [esp-0248h+0264h]
        mov     ecx,eax
        sub     ecx,ebx
        mov     edx,ecx
        sar     edx,03h
        mov     ecx,edx
        and     ecx,ecx
        jl      L_38270
        cmp     ecx,byte 06h
        jge     L_38270
        push    ecx
        mov     ecx,dword [ecx*4+L_65889]
        xchg    ecx,dword [esp]
        ret
        times $$-$ & 3 nop
L_65889:
        dd      L_38252
        dd      L_38254
        dd      L_38256
        dd      L_38263
        dd      L_38265
        dd      L_38267
; Line 3939:         { 
; Line 3940:         case 0: 
L_38252:
L_38254:
        jmp     L_38240
L_38256:
        sub     eax,byte 08h
        movsd   xmm1,[eax]
        movsd   xmm0,[ebx]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_38240
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ebx]
        movsd   [esp-0208h+0264h],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[eax]
        movsd   [ebx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0208h+0264h]
        movsd   [eax],xmm0
; Line 3718: } 
L_38508:
L_38258:
        jmp     L_38240
L_38263:
        mov     ecx,dword [esp-0254h+0264h]
        push    ecx
        sub     eax,byte 08h
        push    eax
        mov     eax,dword [esp-0248h+026ch]
        mov     ecx,ebx
        add     ecx,byte 08h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$dd~pd~$qpdpdpdr#__less$dd~
        add     esp,byte 010h
        jmp     L_38240
L_38265:
        mov     ecx,dword [esp-0254h+0264h]
        push    ecx
        sub     eax,byte 08h
        push    eax
        mov     eax,dword [esp-0248h+026ch]
        mov     ecx,ebx
        add     ecx,byte 010h
        push    ecx
        mov     ecx,ebx
        add     ecx,byte 08h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$dd~pd~$qpdpdpdpdr#__less$dd~
        add     esp,byte 014h
        jmp     L_38240
L_38267:
        mov     ecx,dword [esp-0254h+0264h]
        push    ecx
        sub     eax,byte 08h
        push    eax
        mov     eax,dword [esp-0248h+026ch]
        mov     ecx,ebx
        add     ecx,byte 018h
        push    ecx
        mov     ecx,ebx
        add     ecx,byte 010h
        push    ecx
        mov     ecx,ebx
        add     ecx,byte 08h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$dd~pd~$qpdpdpdpdpdr#__less$dd~
        add     esp,byte 018h
        jmp     L_38240
; Line 3956:         } 
L_38270:
L_38249:
        cmp     edx,byte 06h
        jg      L_38272
; Line 3958:         { 
; Line 3959:             _VSTD::__insertion_sort_3<_Compare>(__first, __last, __comp); 
        mov     eax,dword [esp-0254h+0264h]
        push    eax
        mov     eax,dword [esp-0250h+0268h]
        push    eax
        mov     eax,dword [esp-0248h+026ch]
        push    eax
        call    @std@__1@#__insertion_sort_3$r#__less$dd~pd~$qpdpdr#__less$dd~
        add     esp,byte 0ch
        jmp     L_38240
; Line 3961:         } 
L_38272:
        mov     ecx,ebx
        sub     eax,byte 08h
        mov     esi,eax
; Line 3967:         { 
; Line 3968:         difference_type __delta; 
        cmp     edx,03e8h
        jl      L_38280
; Line 3970:         { 
; Line 3971:             __delta = __len/2; 
        mov     eax,edx
        shr     eax,01fh
        add     eax,edx
        sar     eax,01h
        mov     edx,eax
        shl     edx,03h
        add     ecx,edx
        mov     dword [esp-0240h+0264h],ecx
        mov     ecx,eax
        shr     ecx,01fh
        add     eax,ecx
        sar     eax,01h
        mov     ecx,dword [esp-0254h+0264h]
        push    ecx
        mov     ecx,esi
        push    ecx
        mov     edx,dword [esp-0240h+026ch]
        mov     ecx,eax
        shl     ecx,03h
        mov     eax,edx
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0240h+0270h]
        push    eax
        mov     eax,ebx
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0248h+0278h]
        push    eax
        call    @std@__1@#__sort5$r#__less$dd~pd~$qpdpdpdpdpdr#__less$dd~
        add     esp,byte 018h
        mov     dword [esp-023ch+0264h],eax
; Line 3975:         } 
        jmp     L_38285
L_38280:
; Line 3976:         else 
; Line 3977:         { 
; Line 3978:             __delta = __len/2; 
        mov     eax,edx
        shr     eax,01fh
        add     eax,edx
        sar     eax,01h
        shl     eax,03h
        add     eax,ecx
        mov     dword [esp-0240h+0264h],eax
        mov     eax,dword [esp-0254h+0264h]
        push    eax
        mov     eax,esi
        push    eax
        mov     eax,dword [esp-0240h+026ch]
        push    eax
        mov     eax,dword [esp-0248h+0270h]
        push    eax
        call    @std@__1@#__sort3$r#__less$dd~pd~$qpdpdpdr#__less$dd~
        add     esp,byte 010h
        mov     dword [esp-023ch+0264h],eax
; Line 3981:         } 
L_38285:
; Line 3982:         } 
        mov     eax,dword [esp-0248h+0264h]
        mov     ebx,eax
        mov     edi,eax
        mov     edx,edi
        mov     dword [esp-0244h+0264h],edx
        mov     ecx,dword [esp-0240h+0264h]
        mov     eax,ecx
        movsd   xmm1,[edx]
        movsd   xmm0,[ecx]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_38293
; Line 3992:         { 
; Line 3995:             while (true) 
        mov     ecx,esi
L_38297:
; Line 3996:             { 
; Line 3997:                 if (__i == --__j) 
        sub     ecx,byte 08h
        mov     esi,ecx
        cmp     edi,ecx
        jne     L_38303
; Line 3998:                 { 
; Line 4001:                     ++__i;   
        mov     eax,dword [esp-0244h+0264h]
        add     eax,byte 08h
        mov     edx,eax
        mov     eax,dword [esp-0250h+0264h]
        mov     ecx,ebx
        sub     eax,byte 08h
        mov     esi,eax
        mov     edi,eax
        movsd   xmm1,[ecx]
        movsd   xmm0,[esi]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_38307
; Line 4004:                     { 
; Line 4005:                         while (true) 
L_38311:
; Line 4006:                         { 
; Line 4007:                             if (__i == __j) 
        cmp     edx,eax
        je      L_38240
L_38317:
        mov     ecx,ebx
        mov     esi,edx
        movsd   xmm1,[ecx]
        movsd   xmm0,[esi]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_38322
; Line 4010:                             { 
; Line 4011:                                 swap(*__i, *__j); 
        mov     ecx,edx
        mov     ebx,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     esi,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esi]
        movsd   [esp-0208h+0264h],xmm0
        mov     esi,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esi]
        movsd   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0208h+0264h]
        movsd   [ebx],xmm0
; Line 3718: } 
L_38620:
        inc     dword [esp-023ch+0264h]
        add     edx,byte 08h
; Line 4014:                                 break; 
        jmp     L_38312
L_38322:
        add     edx,byte 08h
; Line 4017:                         } 
L_38313:
        jmp     L_38311
L_38312:
; Line 4018:                     } 
L_38307:
        cmp     edx,eax
        je      L_38240
L_38335:
L_38340:
; Line 4023:                     { 
; Line 4024:                         while (!__comp(*__first, *__i)) 
        mov     ebx,dword [esp-0248h+0264h]
        mov     esi,ebx
        mov     eax,edx
        mov     ecx,edx
        movsd   xmm1,[ebx]
        movsd   xmm0,[eax]
        comisd  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_38347
L_38346:
        mov     eax,ecx
        add     eax,byte 08h
        mov     edx,eax
L_38348:
        mov     ebx,esi
        mov     eax,edx
        mov     ecx,edx
        movsd   xmm1,[ebx]
        movsd   xmm0,[eax]
        comisd  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_38346
L_38347:
        mov     ebp,esi
        mov     eax,edi
        sub     eax,byte 08h
        mov     ebx,eax
        mov     edi,eax
        movsd   xmm1,[ebp]
        movsd   xmm0,[eax]
        comisd  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_38354
L_38353:
L_38355:
; Line 4026:                         while (__comp(*__first, *--__j)) 
        mov     ebp,esi
        mov     eax,edi
        sub     eax,byte 08h
        mov     ebx,eax
        mov     edi,eax
        movsd   xmm1,[ebp]
        movsd   xmm0,[eax]
        comisd  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_38353
L_38354:
        cmp     edx,ebx
        jge     L_38341
; Line 4029:                             break; 
L_38360:
        mov     edx,ecx
        mov     eax,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ebx]
        movsd   [esp-0208h+0264h],xmm0
        mov     ebx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ebx]
        movsd   [edx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0208h+0264h]
        movsd   [eax],xmm0
; Line 3718: } 
L_38748:
        inc     dword [esp-023ch+0264h]
        mov     edx,ecx
        add     edx,byte 08h
; Line 4033:                     } 
L_38342:
; Line 4022:                     while (true) 
        jmp     L_38340
L_38341:
        mov     dword [esp-0248h+0264h],ecx
        jmp     L_38248
L_38303:
        mov     edx,esi
        mov     ecx,esi
        mov     ebp,eax
        movsd   xmm1,[edx]
        movsd   xmm0,[ebp]
        comisd  xmm0,xmm1
        seta    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_38371
; Line 4041:                 { 
; Line 4042:                     swap(*__i, *__j); 
        mov     edx,dword [esp-0244h+0264h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ebx]
        movsd   [esp-0208h+0264h],xmm0
        mov     ebx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ebx]
        movsd   [edx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0208h+0264h]
        movsd   [ecx],xmm0
; Line 3718: } 
L_38828:
        inc     dword [esp-023ch+0264h]
; Line 4044:                     break;   
        jmp     L_38298
L_38371:
; Line 4046:             } 
L_38299:
        jmp     L_38297
L_38298:
; Line 4047:         } 
L_38293:
        mov     ecx,dword [esp-0244h+0264h]
        add     ecx,byte 08h
        mov     ebx,ecx
        cmp     ebx,esi
        jge     L_38384
; Line 4053:         { 
; Line 4056:             while (true) 
L_38388:
; Line 4057:             { 
; Line 4059:                 while (__comp(*__i, *__m)) 
        mov     edi,ebx
        mov     edx,ebx
        mov     ecx,eax
        movsd   xmm1,[edi]
        movsd   xmm0,[ecx]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_38395
L_38394:
        mov     ecx,edx
        add     ecx,byte 08h
        mov     ebx,ecx
L_38396:
        mov     edi,ebx
        mov     edx,ebx
        mov     ecx,eax
        movsd   xmm1,[edi]
        movsd   xmm0,[ecx]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_38394
L_38395:
        sub     esi,byte 08h
        mov     ecx,esi
        mov     edi,esi
        mov     ebp,eax
        movsd   xmm1,[ecx]
        movsd   xmm0,[ebp]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_38402
L_38401:
L_38403:
; Line 4062:                 while (!__comp(*--__j, *__m)) 
        mov     ecx,edi
        sub     ecx,byte 08h
        mov     esi,ecx
        mov     edi,ecx
        mov     ebp,eax
        movsd   xmm1,[ecx]
        movsd   xmm0,[ebp]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_38401
L_38402:
        cmp     ebx,esi
        jg      L_38389
; Line 4065:                     break; 
L_38408:
        mov     ebp,edx
        mov     ecx,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,ebp
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[eax]
        movsd   [esp-0208h+0264h],xmm0
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[eax]
        movsd   [ebp],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0208h+0264h]
        movsd   [ecx],xmm0
; Line 3718: } 
L_38956:
        inc     dword [esp-023ch+0264h]
        mov     eax,ebx
        cmp     dword [esp-0240h+0264h],eax
        jne     L_38413
        mov     dword [esp-0240h+0264h],edi
L_38413:
        mov     eax,edx
        add     eax,byte 08h
        mov     ebx,eax
; Line 4073:             } 
L_38390:
        mov     eax,dword [esp-0240h+0264h]
        jmp     L_38388
L_38389:
; Line 4074:         } 
L_38384:
        cmp     ebx,dword [esp-0240h+0264h]
        je      L_38424
        mov     esi,eax
        mov     ecx,ebx
        mov     edx,ebx
        movsd   xmm1,[esi]
        movsd   xmm0,[edx]
        comisd  xmm0,xmm1
        seta    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_38424
; Line 4077:         { 
; Line 4078:             swap(*__i, *__m); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [esp-0208h+0264h],xmm0
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0208h+0264h]
        movsd   [eax],xmm0
; Line 3718: } 
L_39036:
        inc     dword [esp-023ch+0264h]
; Line 4080:         } 
L_38424:
        cmp     dword [esp-023ch+0264h],byte 00h
        jne     L_38431
; Line 4084:         { 
; Line 4085:             bool __fs = _VSTD::__insertion_sort_incomplete<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-0254h+0264h]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0248h+026ch]
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$dd~pd~$qpdpdr#__less$dd~
        add     esp,byte 0ch
        mov     byte [esp-0249h+0264h],al
        mov     eax,dword [esp-0254h+0264h]
        push    eax
        mov     eax,dword [esp-0250h+0268h]
        push    eax
        mov     eax,ebx
        add     eax,byte 08h
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$dd~pd~$qpdpdr#__less$dd~
        add     esp,byte 0ch
        and     al,al
        je      L_38435
; Line 4087:             { 
; Line 4088:                 if (__fs) 
        cmp     byte [esp-0249h+0264h],byte 00h
        jne     L_38240
L_38439:
        mov     dword [esp-0250h+0264h],ebx
; Line 4091:                 continue; 
        jmp     L_38242
L_38435:
; Line 4093:             else 
; Line 4094:             { 
; Line 4095:                 if (__fs) 
        cmp     byte [esp-0249h+0264h],byte 00h
        je      L_38449
; Line 4096:                 { 
; Line 4097:                     __first = ++__i; 
        mov     eax,ebx
        add     eax,byte 08h
        mov     dword [esp-0248h+0264h],eax
; Line 4098:                     continue; 
        jmp     L_38242
L_38449:
; Line 4100:             } 
L_38445:
; Line 4101:         } 
L_38431:
        mov     eax,dword [esp-0250h+0264h]
        mov     ecx,ebx
        sub     eax,ecx
        mov     edx,eax
        sar     edx,03h
        mov     eax,dword [esp-0248h+0264h]
        sub     eax,ecx
        neg     eax
        imul    eax,byte 01h
        sar     eax,03h
        cmp     eax,edx
        jge     L_38462
; Line 4104:         { 
; Line 4105:             _VSTD::__sort<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-0254h+0264h]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0248h+026ch]
        push    eax
        call    @std@__1@#__sort$r#__less$dd~pd~$qpdpdr#__less$dd~
        add     esp,byte 0ch
        mov     eax,ebx
        add     eax,byte 08h
        mov     dword [esp-0248h+0264h],eax
; Line 4108:         } 
        jmp     L_38467
L_38462:
; Line 4109:         else 
; Line 4110:         { 
; Line 4111:             _VSTD::__sort<_Compare>(__i+1, __last, __comp); 
        mov     eax,dword [esp-0254h+0264h]
        push    eax
        mov     eax,dword [esp-0250h+0268h]
        push    eax
        mov     eax,ecx
        add     eax,byte 08h
        push    eax
        call    @std@__1@#__sort$r#__less$dd~pd~$qpdpdr#__less$dd~
        add     esp,byte 0ch
        mov     dword [esp-0250h+0264h],ebx
; Line 4114:         } 
L_38467:
; Line 4115:     } 
L_38244:
; Line 3934:     while (true) 
        jmp     L_38242
; Line 4116: } 
L_38243:
L_38240:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0254h
        ret
section code
section code
        section vsc@std@__1@#__sort3$r#__less$gg~pg~$qpgpgpgr#__less$gg~ virtual
        [bits 32]
@std@__1@#__sort3$r#__less$gg~pg~$qpgpgpgr#__less$gg~:
; Line 3689: unsigned 
        add     esp,0fffffe78h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_39090:
        mov     ebx,dword [esp+0ch+0198h]
        mov     ecx,dword [esp+08h+0198h]
        mov     ebp,dword [esp+04h+0198h]
; Line 3692:     unsigned __r = 0; 
        xor     edi,edi
        mov     eax,ecx
        mov     esi,ecx
        mov     edx,ebp
        movsd   xmm1,[eax]
        movsd   xmm0,[ebp]
        comisd  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_39093
; Line 3694:     { 
; Line 3695:         if (!__c(*__z, *__y))       
        mov     eax,ebx
        mov     ebp,esi
        movsd   xmm1,[ebx]
        movsd   xmm0,[ebp]
        comisd  xmm0,xmm1
        seta    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        jne     L_39097
        mov     eax,edi
        jmp     L_39091
L_39097:
        mov     ebx,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     esi,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esi]
        movsd   [esp-0158h+0198h],xmm0
        mov     esi,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esi]
        movsd   [ebx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0158h+0198h]
        movsd   [eax],xmm0
; Line 3718: } 
L_39173:
        mov     ebx,01h
        mov     eax,ecx
        mov     esi,ecx
        mov     ecx,edx
        movsd   xmm1,[esi]
        movsd   xmm0,[ecx]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_39102
; Line 3701:         { 
; Line 3702:             swap(*__x, *__y);       
        mov     ecx,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [esp-0158h+0198h],xmm0
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0158h+0198h]
        movsd   [eax],xmm0
; Line 3718: } 
L_39253:
        mov     ebx,02h
; Line 3704:         } 
L_39102:
        mov     eax,ebx
        jmp     L_39091
; Line 3706:     } 
L_39093:
        mov     eax,ebx
        mov     edi,esi
        movsd   xmm1,[ebx]
        movsd   xmm0,[edi]
        comisd  xmm0,xmm1
        seta    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_39112
; Line 3708:     { 
; Line 3709:         swap(*__x, *__z);           
        mov     ecx,edx
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [esp-0158h+0198h],xmm0
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0158h+0198h]
        movsd   [eax],xmm0
; Line 3718: } 
L_39333:
        mov     eax,01h
        jmp     L_39091
; Line 3712:     } 
L_39112:
        mov     ebx,esi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     esi,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esi]
        movsd   [esp-0158h+0198h],xmm0
        mov     esi,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esi]
        movsd   [edx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0158h+0198h]
        movsd   [ebx],xmm0
; Line 3718: } 
L_39397:
        mov     edx,01h
        mov     esi,eax
        mov     ebx,ecx
        movsd   xmm1,[esi]
        movsd   xmm0,[ebx]
        comisd  xmm0,xmm1
        seta    bl
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_39119
; Line 3716:     { 
; Line 3717:         swap(*__y, *__z);           
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [esp-0158h+0198h],xmm0
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0158h+0198h]
        movsd   [eax],xmm0
; Line 3718: } 
L_39477:
        mov     edx,02h
; Line 3719:     } 
L_39119:
        mov     eax,edx
; Line 3721: }                                   
L_39091:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0188h
        ret
section code
section code
        section vsc@std@__1@#__sort4$r#__less$gg~pg~$qpgpgpgpgr#__less$gg~ virtual
        [bits 32]
@std@__1@#__sort4$r#__less$gg~pg~$qpgpgpgpgr#__less$gg~:
; Line 3726: unsigned 
        add     esp,0ffffff0ch
        push    ebx
        push    ebp
        push    esi
        push    edi
L_39531:
        mov     eax,dword [esp+014h+0104h]
        mov     esi,dword [esp+010h+0104h]
        mov     ebx,dword [esp+0ch+0104h]
        mov     ebp,dword [esp+08h+0104h]
        mov     edi,dword [esp+04h+0104h]
; Line 3730:     unsigned __r = __sort3<_Compare>(__x1, __x2, __x3, __c); 
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,ebp
        push    eax
        mov     eax,edi
        push    eax
        call    @std@__1@#__sort3$r#__less$gg~pg~$qpgpgpgr#__less$gg~
        add     esp,byte 010h
        mov     dword [esp-0f4h+0104h],eax
        mov     edx,esi
        mov     ecx,esi
        mov     eax,ebx
        mov     esi,ebx
        movsd   xmm1,[ecx]
        movsd   xmm0,[esi]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_39534
; Line 3732:     { 
; Line 3733:         swap(*__x3, *__x4); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ecx]
        movsd   [esp-0c0h+0104h],xmm0
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ecx]
        movsd   [eax],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0c0h+0104h]
        movsd   [edx],xmm0
; Line 3718: } 
L_39586:
        inc     dword [esp-0f4h+0104h]
        mov     eax,ebx
        mov     ecx,ebp
        mov     edx,ebp
        movsd   xmm1,[ebx]
        movsd   xmm0,[edx]
        comisd  xmm0,xmm1
        seta    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_39538
; Line 3736:         { 
; Line 3737:             swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [esp-0c0h+0104h],xmm0
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0c0h+0104h]
        movsd   [eax],xmm0
; Line 3718: } 
L_39666:
        inc     dword [esp-0f4h+0104h]
        mov     ecx,ebp
        mov     eax,edi
        movsd   xmm1,[ecx]
        movsd   xmm0,[eax]
        comisd  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_39542
; Line 3740:             { 
; Line 3741:                 swap(*__x1, *__x2); 
        mov     eax,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ecx]
        movsd   [esp-0c0h+0104h],xmm0
        mov     ecx,ebp
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ecx]
        movsd   [eax],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0c0h+0104h]
        movsd   [ebp],xmm0
; Line 3718: } 
L_39746:
        inc     dword [esp-0f4h+0104h]
; Line 3743:             } 
L_39542:
; Line 3744:         } 
L_39538:
; Line 3745:     } 
L_39534:
        mov     eax,dword [esp-0f4h+0104h]
; Line 3747: } 
L_39532:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0f4h
        ret
section code
section code
        section vsc@std@__1@#__sort5$r#__less$gg~pg~$qpgpgpgpgpgr#__less$gg~ virtual
        [bits 32]
@std@__1@#__sort5$r#__less$gg~pg~$qpgpgpgpgpgr#__less$gg~:
; Line 3752: _LIBCPP_HIDDEN 
        add     esp,0fffffeb8h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_39800:
        mov     ecx,dword [esp+018h+0158h]
        mov     ebx,dword [esp+014h+0158h]
        mov     esi,dword [esp+010h+0158h]
        mov     eax,dword [esp+0ch+0158h]
        mov     dword [esp-0148h+0158h],eax
        mov     edi,dword [esp+08h+0158h]
        mov     ebp,dword [esp+04h+0158h]
; Line 3757:     unsigned __r = __sort4<_Compare>(__x1, __x2, __x3, __x4, __c); 
        push    ecx
        mov     eax,esi
        push    eax
        mov     eax,dword [esp-0148h+0160h]
        push    eax
        mov     eax,edi
        push    eax
        mov     eax,ebp
        push    eax
        call    @std@__1@#__sort4$r#__less$gg~pg~$qpgpgpgpgr#__less$gg~
        add     esp,byte 014h
        mov     dword [esp-0144h+0158h],eax
        mov     edx,ebx
        mov     ecx,ebx
        mov     eax,esi
        mov     ebx,esi
        movsd   xmm1,[ecx]
        movsd   xmm0,[ebx]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_39803
; Line 3759:     { 
; Line 3760:         swap(*__x4, *__x5); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ecx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ecx]
        movsd   [esp-0110h+0158h],xmm0
        mov     ecx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ecx]
        movsd   [eax],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0110h+0158h]
        movsd   [edx],xmm0
; Line 3718: } 
L_39862:
        inc     dword [esp-0144h+0158h]
        mov     eax,esi
        mov     ebx,esi
        mov     ecx,dword [esp-0148h+0158h]
        mov     edx,ecx
        movsd   xmm1,[ebx]
        movsd   xmm0,[edx]
        comisd  xmm0,xmm1
        seta    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_39807
; Line 3763:         { 
; Line 3764:             swap(*__x3, *__x4); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ecx]
        movsd   [esp-0110h+0158h],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[eax]
        movsd   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0110h+0158h]
        movsd   [eax],xmm0
; Line 3718: } 
L_39942:
        inc     dword [esp-0144h+0158h]
        mov     eax,dword [esp-0148h+0158h]
        mov     edx,edi
        movsd   xmm1,[eax]
        movsd   xmm0,[edx]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_39811
; Line 3767:             { 
; Line 3768:                 swap(*__x2, *__x3); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [esp-0110h+0158h],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[eax]
        movsd   [edx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0110h+0158h]
        movsd   [eax],xmm0
; Line 3718: } 
L_40022:
        inc     dword [esp-0144h+0158h]
        movsd   xmm1,[edi]
        movsd   xmm0,[ebp]
        comisd  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_39815
; Line 3771:                 { 
; Line 3772:                     swap(*__x1, *__x2); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ebp]
        movsd   [esp-0110h+0158h],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edi]
        movsd   [ebp],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0110h+0158h]
        movsd   [edi],xmm0
; Line 3718: } 
L_40102:
        inc     dword [esp-0144h+0158h]
; Line 3774:                 } 
L_39815:
; Line 3775:             } 
L_39811:
; Line 3776:         } 
L_39807:
; Line 3777:     } 
L_39803:
        mov     eax,dword [esp-0144h+0158h]
; Line 3779: } 
L_39801:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0148h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_3$r#__less$gg~pg~$qpgpgr#__less$gg~ virtual
        [bits 32]
@std@__1@#__insertion_sort_3$r#__less$gg~pg~$qpgpgr#__less$gg~:
; Line 3817: void 
        add     esp,byte 0ffffffb8h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_40156:
        mov     edx,dword [esp+0ch+058h]
        mov     esi,dword [esp+08h+058h]
        mov     edi,dword [esp+04h+058h]
; Line 3820:     typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type; 
        mov     ecx,edi
        mov     eax,edi
        add     eax,byte 010h
        mov     ebx,eax
        push    edx
        mov     eax,ebx
        push    eax
        mov     eax,edi
        add     ecx,byte 08h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$gg~pg~$qpgpgpgr#__less$gg~
        add     esp,byte 010h
; Line 3823:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     eax,ebx
        add     eax,byte 08h
        cmp     eax,esi
        je      L_40161
L_40159:
; Line 3824:     { 
; Line 3825:         if (__comp(*__i, *__j)) 
        mov     ebp,eax
        mov     ecx,ebx
        mov     edx,ebx
        movsd   xmm1,[eax]
        movsd   xmm0,[edx]
        comisd  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_40166
; Line 3826:         { 
; Line 3827:             value_type __t(_VSTD::move(*__i)); 
        mov     eax,ebp
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[eax]
        movsd   [esp-08h+058h],xmm0
        mov     eax,ebp
; Line 3831:             { 
L_40170:
; Line 3832:                 *__j = _VSTD::move(*__k); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [eax],xmm0
        mov     eax,ecx
; Line 3834:             } while (__j != __first && __comp(__t, *--__k)); 
L_40172:
        cmp     eax,edi
        je      L_40235
        sub     ecx,byte 08h
        mov     edx,ecx
        movsd   xmm1,[esp-08h+058h]
        movsd   xmm0,[edx]
        comisd  xmm0,xmm1
        seta    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        jne     L_40170
L_40235:
L_40171:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-08h+058h]
        movsd   [eax],xmm0
; Line 3836:         } 
L_40166:
        mov     ebx,ebp
; Line 3838:     } 
L_40162:
        mov     eax,ebp
        add     eax,byte 08h
L_40160:
        cmp     eax,esi
        jne     L_40159
L_40161:
; Line 3839: } 
L_40157:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@__1@#__insertion_sort_incomplete$r#__less$gg~pg~$qpgpgr#__less$gg~ virtual
        [bits 32]
@std@__1@#__insertion_sort_incomplete$r#__less$gg~pg~$qpgpgr#__less$gg~:
; Line 3842: bool 
        add     esp,0ffffff60h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_40271:
        mov     edx,dword [esp+0ch+0b0h]
        mov     eax,dword [esp+08h+0b0h]
        mov     dword [esp-09ch+0b0h],eax
        mov     ebx,dword [esp+04h+0b0h]
; Line 3845:     switch (__last - __first) 
        mov     ecx,dword [esp-09ch+0b0h]
        mov     eax,ebx
        mov     esi,ecx
        sub     esi,eax
        sar     esi,03h
        mov     dword [esp-0a0h+0b0h],ecx
        cmp     esi,byte 06h
        jnc     L_40295
        push    esi
        mov     esi,dword [esi*4+L_65918]
        xchg    esi,dword [esp]
        ret
        times $$-$ & 3 nop
L_65918:
        dd      L_40277
        dd      L_40279
        dd      L_40281
        dd      L_40288
        dd      L_40290
        dd      L_40292
; Line 3846:     { 
; Line 3847:     case 0: 
L_40277:
L_40279:
        mov     al,01h
        jmp     L_40272
L_40281:
        mov     ecx,dword [esp-0a0h+0b0h]
        sub     ecx,byte 08h
        movsd   xmm1,[ecx]
        movsd   xmm0,[eax]
        comisd  xmm0,xmm1
        seta    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_40283
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[eax]
        movsd   [esp-028h+0b0h],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ecx]
        movsd   [eax],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-028h+0b0h]
        movsd   [ecx],xmm0
; Line 3718: } 
L_40359:
L_40283:
        mov     al,01h
        jmp     L_40272
L_40288:
        push    edx
        mov     ecx,dword [esp-0a0h+0b4h]
        sub     ecx,byte 08h
        push    ecx
        mov     ecx,ebx
        add     eax,byte 08h
        push    eax
        push    ecx
        call    @std@__1@#__sort3$r#__less$gg~pg~$qpgpgpgr#__less$gg~
        add     esp,byte 010h
        mov     al,01h
        jmp     L_40272
L_40290:
        push    edx
        mov     ecx,dword [esp-0a0h+0b4h]
        sub     ecx,byte 08h
        push    ecx
        mov     ecx,ebx
        mov     edx,eax
        add     edx,byte 010h
        push    edx
        add     eax,byte 08h
        push    eax
        push    ecx
        call    @std@__1@#__sort4$r#__less$gg~pg~$qpgpgpgpgr#__less$gg~
        add     esp,byte 014h
        mov     al,01h
        jmp     L_40272
L_40292:
        push    edx
        mov     ecx,dword [esp-0a0h+0b4h]
        sub     ecx,byte 08h
        push    ecx
        mov     ecx,ebx
        mov     edx,eax
        add     edx,byte 018h
        push    edx
        mov     edx,eax
        add     edx,byte 010h
        push    edx
        add     eax,byte 08h
        push    eax
        push    ecx
        call    @std@__1@#__sort5$r#__less$gg~pg~$qpgpgpgpgpgr#__less$gg~
        add     esp,byte 018h
        mov     al,01h
        jmp     L_40272
; Line 3863:     } 
L_40295:
L_40274:
        mov     ecx,eax
        add     ecx,byte 010h
        mov     esi,ecx
        push    edx
        mov     ecx,esi
        push    ecx
        mov     ecx,ebx
        add     eax,byte 08h
        push    eax
        push    ecx
        call    @std@__1@#__sort3$r#__less$gg~pg~$qpgpgpgr#__less$gg~
        add     esp,byte 010h
        xor     edi,edi
; Line 3869:     for (_RandomAccessIterator __i = __j+1; __i != __last; ++__i) 
        mov     eax,esi
        add     eax,byte 08h
        cmp     eax,dword [esp-09ch+0b0h]
        je      L_40299
L_40297:
; Line 3870:     { 
; Line 3871:         if (__comp(*__i, *__j)) 
        mov     edx,eax
        mov     ecx,esi
        movsd   xmm1,[eax]
        movsd   xmm0,[esi]
        comisd  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_40304
; Line 3872:         { 
; Line 3873:             value_type __t(_VSTD::move(*__i)); 
        mov     eax,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[eax]
        movsd   [esp-08h+0b0h],xmm0
        mov     esi,ecx
        mov     eax,edx
; Line 3877:             { 
L_40308:
; Line 3878:                 *__j = _VSTD::move(*__k); 
        mov     ecx,esi
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ecx]
        movsd   [eax],xmm0
        mov     eax,esi
; Line 3880:             } while (__j != __first && __comp(__t, *--__k)); 
L_40310:
        cmp     eax,ebx
        je      L_40458
        sub     esi,byte 08h
        mov     ecx,esi
        movsd   xmm1,[esp-08h+0b0h]
        movsd   xmm0,[ecx]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_40308
L_40458:
L_40309:
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-08h+0b0h]
        movsd   [eax],xmm0
        inc     edi
        cmp     edi,byte 08h
        jne     L_40317
        mov     ecx,edx
        add     ecx,byte 08h
        mov     eax,dword [esp-0a0h+0b0h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
        jmp     L_40272
L_40317:
; Line 3884:         } 
L_40304:
        mov     esi,edx
; Line 3886:     } 
L_40300:
        mov     eax,edx
        add     eax,byte 08h
L_40298:
        cmp     eax,dword [esp-09ch+0b0h]
        jne     L_40297
L_40299:
        mov     al,01h
; Line 3888: } 
L_40272:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0a0h
        ret
section code
section code
        section vsc@std@__1@#__sort$r#__less$gg~pg~$qpgpgr#__less$gg~ virtual
        [bits 32]
@std@__1@#__sort$r#__less$gg~pg~$qpgpgr#__less$gg~:
; Line 3926: void 
        add     esp,0fffffdach
        push    ebx
        push    ebp
        push    esi
        push    edi
L_40494:
        mov     eax,dword [esp+0ch+0264h]
        mov     dword [esp-0254h+0264h],eax
        mov     eax,dword [esp+08h+0264h]
        mov     dword [esp-0250h+0264h],eax
        mov     eax,dword [esp+04h+0264h]
        mov     dword [esp-0248h+0264h],eax
; Line 3930:     typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type; 
L_40497:
; Line 3935:     { 
; Line 3936:     __restart: 
L_40503:
        mov     eax,dword [esp-0250h+0264h]
        mov     ebx,dword [esp-0248h+0264h]
        mov     ecx,eax
        sub     ecx,ebx
        mov     edx,ecx
        sar     edx,03h
        mov     ecx,edx
        and     ecx,ecx
        jl      L_40525
        cmp     ecx,byte 06h
        jge     L_40525
        push    ecx
        mov     ecx,dword [ecx*4+L_65923]
        xchg    ecx,dword [esp]
        ret
        times $$-$ & 3 nop
L_65923:
        dd      L_40507
        dd      L_40509
        dd      L_40511
        dd      L_40518
        dd      L_40520
        dd      L_40522
; Line 3939:         { 
; Line 3940:         case 0: 
L_40507:
L_40509:
        jmp     L_40495
L_40511:
        sub     eax,byte 08h
        movsd   xmm1,[eax]
        movsd   xmm0,[ebx]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_40495
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ebx]
        movsd   [esp-0208h+0264h],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[eax]
        movsd   [ebx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0208h+0264h]
        movsd   [eax],xmm0
; Line 3718: } 
L_40763:
L_40513:
        jmp     L_40495
L_40518:
        mov     ecx,dword [esp-0254h+0264h]
        push    ecx
        sub     eax,byte 08h
        push    eax
        mov     eax,dword [esp-0248h+026ch]
        mov     ecx,ebx
        add     ecx,byte 08h
        push    ecx
        push    eax
        call    @std@__1@#__sort3$r#__less$gg~pg~$qpgpgpgr#__less$gg~
        add     esp,byte 010h
        jmp     L_40495
L_40520:
        mov     ecx,dword [esp-0254h+0264h]
        push    ecx
        sub     eax,byte 08h
        push    eax
        mov     eax,dword [esp-0248h+026ch]
        mov     ecx,ebx
        add     ecx,byte 010h
        push    ecx
        mov     ecx,ebx
        add     ecx,byte 08h
        push    ecx
        push    eax
        call    @std@__1@#__sort4$r#__less$gg~pg~$qpgpgpgpgr#__less$gg~
        add     esp,byte 014h
        jmp     L_40495
L_40522:
        mov     ecx,dword [esp-0254h+0264h]
        push    ecx
        sub     eax,byte 08h
        push    eax
        mov     eax,dword [esp-0248h+026ch]
        mov     ecx,ebx
        add     ecx,byte 018h
        push    ecx
        mov     ecx,ebx
        add     ecx,byte 010h
        push    ecx
        mov     ecx,ebx
        add     ecx,byte 08h
        push    ecx
        push    eax
        call    @std@__1@#__sort5$r#__less$gg~pg~$qpgpgpgpgpgr#__less$gg~
        add     esp,byte 018h
        jmp     L_40495
; Line 3956:         } 
L_40525:
L_40504:
        cmp     edx,byte 06h
        jg      L_40527
; Line 3958:         { 
; Line 3959:             _VSTD::__insertion_sort_3<_Compare>(__first, __last, __comp); 
        mov     eax,dword [esp-0254h+0264h]
        push    eax
        mov     eax,dword [esp-0250h+0268h]
        push    eax
        mov     eax,dword [esp-0248h+026ch]
        push    eax
        call    @std@__1@#__insertion_sort_3$r#__less$gg~pg~$qpgpgr#__less$gg~
        add     esp,byte 0ch
        jmp     L_40495
; Line 3961:         } 
L_40527:
        mov     ecx,ebx
        sub     eax,byte 08h
        mov     esi,eax
; Line 3967:         { 
; Line 3968:         difference_type __delta; 
        cmp     edx,03e8h
        jl      L_40535
; Line 3970:         { 
; Line 3971:             __delta = __len/2; 
        mov     eax,edx
        shr     eax,01fh
        add     eax,edx
        sar     eax,01h
        mov     edx,eax
        shl     edx,03h
        add     ecx,edx
        mov     dword [esp-0240h+0264h],ecx
        mov     ecx,eax
        shr     ecx,01fh
        add     eax,ecx
        sar     eax,01h
        mov     ecx,dword [esp-0254h+0264h]
        push    ecx
        mov     ecx,esi
        push    ecx
        mov     edx,dword [esp-0240h+026ch]
        mov     ecx,eax
        shl     ecx,03h
        mov     eax,edx
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0240h+0270h]
        push    eax
        mov     eax,ebx
        add     eax,ecx
        push    eax
        mov     eax,dword [esp-0248h+0278h]
        push    eax
        call    @std@__1@#__sort5$r#__less$gg~pg~$qpgpgpgpgpgr#__less$gg~
        add     esp,byte 018h
        mov     dword [esp-023ch+0264h],eax
; Line 3975:         } 
        jmp     L_40540
L_40535:
; Line 3976:         else 
; Line 3977:         { 
; Line 3978:             __delta = __len/2; 
        mov     eax,edx
        shr     eax,01fh
        add     eax,edx
        sar     eax,01h
        shl     eax,03h
        add     eax,ecx
        mov     dword [esp-0240h+0264h],eax
        mov     eax,dword [esp-0254h+0264h]
        push    eax
        mov     eax,esi
        push    eax
        mov     eax,dword [esp-0240h+026ch]
        push    eax
        mov     eax,dword [esp-0248h+0270h]
        push    eax
        call    @std@__1@#__sort3$r#__less$gg~pg~$qpgpgpgr#__less$gg~
        add     esp,byte 010h
        mov     dword [esp-023ch+0264h],eax
; Line 3981:         } 
L_40540:
; Line 3982:         } 
        mov     eax,dword [esp-0248h+0264h]
        mov     ebx,eax
        mov     edi,eax
        mov     edx,edi
        mov     dword [esp-0244h+0264h],edx
        mov     ecx,dword [esp-0240h+0264h]
        mov     eax,ecx
        movsd   xmm1,[edx]
        movsd   xmm0,[ecx]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_40548
; Line 3992:         { 
; Line 3995:             while (true) 
        mov     ecx,esi
L_40552:
; Line 3996:             { 
; Line 3997:                 if (__i == --__j) 
        sub     ecx,byte 08h
        mov     esi,ecx
        cmp     edi,ecx
        jne     L_40558
; Line 3998:                 { 
; Line 4001:                     ++__i;   
        mov     eax,dword [esp-0244h+0264h]
        add     eax,byte 08h
        mov     edx,eax
        mov     eax,dword [esp-0250h+0264h]
        mov     ecx,ebx
        sub     eax,byte 08h
        mov     esi,eax
        mov     edi,eax
        movsd   xmm1,[ecx]
        movsd   xmm0,[esi]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_40562
; Line 4004:                     { 
; Line 4005:                         while (true) 
L_40566:
; Line 4006:                         { 
; Line 4007:                             if (__i == __j) 
        cmp     edx,eax
        je      L_40495
L_40572:
        mov     ecx,ebx
        mov     esi,edx
        movsd   xmm1,[ecx]
        movsd   xmm0,[esi]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_40577
; Line 4010:                             { 
; Line 4011:                                 swap(*__i, *__j); 
        mov     ecx,edx
        mov     ebx,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     esi,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esi]
        movsd   [esp-0208h+0264h],xmm0
        mov     esi,ebx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esi]
        movsd   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0208h+0264h]
        movsd   [ebx],xmm0
; Line 3718: } 
L_40875:
        inc     dword [esp-023ch+0264h]
        add     edx,byte 08h
; Line 4014:                                 break; 
        jmp     L_40567
L_40577:
        add     edx,byte 08h
; Line 4017:                         } 
L_40568:
        jmp     L_40566
L_40567:
; Line 4018:                     } 
L_40562:
        cmp     edx,eax
        je      L_40495
L_40590:
L_40595:
; Line 4023:                     { 
; Line 4024:                         while (!__comp(*__first, *__i)) 
        mov     ebx,dword [esp-0248h+0264h]
        mov     esi,ebx
        mov     eax,edx
        mov     ecx,edx
        movsd   xmm1,[ebx]
        movsd   xmm0,[eax]
        comisd  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_40602
L_40601:
        mov     eax,ecx
        add     eax,byte 08h
        mov     edx,eax
L_40603:
        mov     ebx,esi
        mov     eax,edx
        mov     ecx,edx
        movsd   xmm1,[ebx]
        movsd   xmm0,[eax]
        comisd  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_40601
L_40602:
        mov     ebp,esi
        mov     eax,edi
        sub     eax,byte 08h
        mov     ebx,eax
        mov     edi,eax
        movsd   xmm1,[ebp]
        movsd   xmm0,[eax]
        comisd  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_40609
L_40608:
L_40610:
; Line 4026:                         while (__comp(*__first, *--__j)) 
        mov     ebp,esi
        mov     eax,edi
        sub     eax,byte 08h
        mov     ebx,eax
        mov     edi,eax
        movsd   xmm1,[ebp]
        movsd   xmm0,[eax]
        comisd  xmm0,xmm1
        seta    al
        and     eax,byte 01h
        setne   al
        and     al,al
        jne     L_40608
L_40609:
        cmp     edx,ebx
        jge     L_40596
; Line 4029:                             break; 
L_40615:
        mov     edx,ecx
        mov     eax,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ebx]
        movsd   [esp-0208h+0264h],xmm0
        mov     ebx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ebx]
        movsd   [edx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0208h+0264h]
        movsd   [eax],xmm0
; Line 3718: } 
L_41003:
        inc     dword [esp-023ch+0264h]
        mov     edx,ecx
        add     edx,byte 08h
; Line 4033:                     } 
L_40597:
; Line 4022:                     while (true) 
        jmp     L_40595
L_40596:
        mov     dword [esp-0248h+0264h],ecx
        jmp     L_40503
L_40558:
        mov     edx,esi
        mov     ecx,esi
        mov     ebp,eax
        movsd   xmm1,[edx]
        movsd   xmm0,[ebp]
        comisd  xmm0,xmm1
        seta    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_40626
; Line 4041:                 { 
; Line 4042:                     swap(*__i, *__j); 
        mov     edx,dword [esp-0244h+0264h]
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     ebx,edx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ebx]
        movsd   [esp-0208h+0264h],xmm0
        mov     ebx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[ebx]
        movsd   [edx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0208h+0264h]
        movsd   [ecx],xmm0
; Line 3718: } 
L_41083:
        inc     dword [esp-023ch+0264h]
; Line 4044:                     break;   
        jmp     L_40553
L_40626:
; Line 4046:             } 
L_40554:
        jmp     L_40552
L_40553:
; Line 4047:         } 
L_40548:
        mov     ecx,dword [esp-0244h+0264h]
        add     ecx,byte 08h
        mov     ebx,ecx
        cmp     ebx,esi
        jge     L_40639
; Line 4053:         { 
; Line 4056:             while (true) 
L_40643:
; Line 4057:             { 
; Line 4059:                 while (__comp(*__i, *__m)) 
        mov     edi,ebx
        mov     edx,ebx
        mov     ecx,eax
        movsd   xmm1,[edi]
        movsd   xmm0,[ecx]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_40650
L_40649:
        mov     ecx,edx
        add     ecx,byte 08h
        mov     ebx,ecx
L_40651:
        mov     edi,ebx
        mov     edx,ebx
        mov     ecx,eax
        movsd   xmm1,[edi]
        movsd   xmm0,[ecx]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_40649
L_40650:
        sub     esi,byte 08h
        mov     ecx,esi
        mov     edi,esi
        mov     ebp,eax
        movsd   xmm1,[ecx]
        movsd   xmm0,[ebp]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_40657
L_40656:
L_40658:
; Line 4062:                 while (!__comp(*--__j, *__m)) 
        mov     ecx,edi
        sub     ecx,byte 08h
        mov     esi,ecx
        mov     edi,ecx
        mov     ebp,eax
        movsd   xmm1,[ecx]
        movsd   xmm0,[ebp]
        comisd  xmm0,xmm1
        seta    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_40656
L_40657:
        cmp     ebx,esi
        jg      L_40644
; Line 4065:                     break; 
L_40663:
        mov     ebp,edx
        mov     ecx,edi
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     eax,ebp
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[eax]
        movsd   [esp-0208h+0264h],xmm0
        mov     eax,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[eax]
        movsd   [ebp],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0208h+0264h]
        movsd   [ecx],xmm0
; Line 3718: } 
L_41211:
        inc     dword [esp-023ch+0264h]
        mov     eax,ebx
        cmp     dword [esp-0240h+0264h],eax
        jne     L_40668
        mov     dword [esp-0240h+0264h],edi
L_40668:
        mov     eax,edx
        add     eax,byte 08h
        mov     ebx,eax
; Line 4073:             } 
L_40645:
        mov     eax,dword [esp-0240h+0264h]
        jmp     L_40643
L_40644:
; Line 4074:         } 
L_40639:
        cmp     ebx,dword [esp-0240h+0264h]
        je      L_40679
        mov     esi,eax
        mov     ecx,ebx
        mov     edx,ebx
        movsd   xmm1,[esi]
        movsd   xmm0,[edx]
        comisd  xmm0,xmm1
        seta    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_40679
; Line 4077:         { 
; Line 4078:             swap(*__i, *__m); 
; Line 3715:     _Tp __t(_VSTD::move(__x)); 
        mov     edx,ecx
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [esp-0208h+0264h],xmm0
        mov     edx,eax
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[edx]
        movsd   [ecx],xmm0
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        movsd   xmm0,[esp-0208h+0264h]
        movsd   [eax],xmm0
; Line 3718: } 
L_41291:
        inc     dword [esp-023ch+0264h]
; Line 4080:         } 
L_40679:
        cmp     dword [esp-023ch+0264h],byte 00h
        jne     L_40686
; Line 4084:         { 
; Line 4085:             bool __fs = _VSTD::__insertion_sort_incomplete<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-0254h+0264h]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0248h+026ch]
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$gg~pg~$qpgpgr#__less$gg~
        add     esp,byte 0ch
        mov     byte [esp-0249h+0264h],al
        mov     eax,dword [esp-0254h+0264h]
        push    eax
        mov     eax,dword [esp-0250h+0268h]
        push    eax
        mov     eax,ebx
        add     eax,byte 08h
        push    eax
        call    @std@__1@#__insertion_sort_incomplete$r#__less$gg~pg~$qpgpgr#__less$gg~
        add     esp,byte 0ch
        and     al,al
        je      L_40690
; Line 4087:             { 
; Line 4088:                 if (__fs) 
        cmp     byte [esp-0249h+0264h],byte 00h
        jne     L_40495
L_40694:
        mov     dword [esp-0250h+0264h],ebx
; Line 4091:                 continue; 
        jmp     L_40497
L_40690:
; Line 4093:             else 
; Line 4094:             { 
; Line 4095:                 if (__fs) 
        cmp     byte [esp-0249h+0264h],byte 00h
        je      L_40704
; Line 4096:                 { 
; Line 4097:                     __first = ++__i; 
        mov     eax,ebx
        add     eax,byte 08h
        mov     dword [esp-0248h+0264h],eax
; Line 4098:                     continue; 
        jmp     L_40497
L_40704:
; Line 4100:             } 
L_40700:
; Line 4101:         } 
L_40686:
        mov     eax,dword [esp-0250h+0264h]
        mov     ecx,ebx
        sub     eax,ecx
        mov     edx,eax
        sar     edx,03h
        mov     eax,dword [esp-0248h+0264h]
        sub     eax,ecx
        neg     eax
        imul    eax,byte 01h
        sar     eax,03h
        cmp     eax,edx
        jge     L_40717
; Line 4104:         { 
; Line 4105:             _VSTD::__sort<_Compare>(__first, __i, __comp); 
        mov     eax,dword [esp-0254h+0264h]
        push    eax
        mov     eax,ebx
        push    eax
        mov     eax,dword [esp-0248h+026ch]
        push    eax
        call    @std@__1@#__sort$r#__less$gg~pg~$qpgpgr#__less$gg~
        add     esp,byte 0ch
        mov     eax,ebx
        add     eax,byte 08h
        mov     dword [esp-0248h+0264h],eax
; Line 4108:         } 
        jmp     L_40722
L_40717:
; Line 4109:         else 
; Line 4110:         { 
; Line 4111:             _VSTD::__sort<_Compare>(__i+1, __last, __comp); 
        mov     eax,dword [esp-0254h+0264h]
        push    eax
        mov     eax,dword [esp-0250h+0268h]
        push    eax
        mov     eax,ecx
        add     eax,byte 08h
        push    eax
        call    @std@__1@#__sort$r#__less$gg~pg~$qpgpgr#__less$gg~
        add     esp,byte 0ch
        mov     dword [esp-0250h+0264h],ebx
; Line 4114:         } 
L_40722:
; Line 4115:     } 
L_40499:
; Line 3934:     while (true) 
        jmp     L_40497
; Line 4116: } 
L_40498:
L_40495:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,0254h
        ret
section code
section code
        section vsc@std@__1@#char_traits$c~@compare$qpxcpxcui virtual
        [bits 32]
@std@__1@#char_traits$c~@compare$qpxcpxcui:
; Line 294: { 
        push    ebx
L_41345:
        mov     edx,dword [esp+0ch+04h]
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
; Line 295:     if (__n == 0) 
        and     edx,edx
        jne     L_41348
; Line 296:         return 0; 
        xor     eax,eax
        jmp     L_41346
L_41348:
; Line 298:     return __builtin_memcmp(__s1, __s2, __n); 
; Line 302:     for (; __n; --__n, ++__s1, ++__s2) 
; Line 303:     { 
; Line 304:         if (lt(*__s1, *__s2)) 
; Line 305:             return -1; 
; Line 306:         if (lt(*__s2, *__s1)) 
; Line 307:             return 1; 
; Line 308:     } 
; Line 309:     return 0; 
; Line 311: } 
        push    edx
        push    ecx
        push    eax
        call    _memcmp
        add     esp,byte 0ch
; Line 300:     return memcmp(__s1, __s2, __n); 
L_41346:
        pop     ebx
        ret
section code
section code
        section vsc@std@__1@#char_traits$c~@find$qpxcuirxc virtual
        [bits 32]
@std@__1@#char_traits$c~@find$qpxcuirxc:
; Line 313: inline _LIBCPP_CONSTEXPR_AFTER_CXX14 
        push    ecx
        push    ebx
L_41358:
        mov     ecx,dword [esp+0ch+08h]
        mov     edx,dword [esp+08h+08h]
        mov     eax,dword [esp+04h+08h]
; Line 316: { 
; Line 317:     if (__n == 0) 
        and     edx,edx
        jne     L_41361
; Line 318:         return nullptr; 
        xor     eax,eax
        jmp     L_41359
L_41361:
; Line 320:     return __builtin_char_memchr(__s, to_int_type(__a), __n); 
; Line 324:     for (; __n; --__n) 
; Line 325:     { 
; Line 326:         if (eq(*__s, __a)) 
; Line 327:             return __s; 
; Line 328:         ++__s; 
; Line 329:     } 
; Line 330:     return nullptr; 
; Line 332: } 
        push    edx
        mov     cl,byte [ecx]
        movzx   ecx,cl
        push    ecx
        push    eax
        call    _memchr
        add     esp,byte 0ch
; Line 322:     return (const char_type*) memchr(__s, to_int_type(__a), __n); 
L_41359:
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#char_traits$C~@compare$qpxCpxCui virtual
        [bits 32]
@std@__1@#char_traits$C~@compare$qpxCpxCui:
; Line 396: { 
        push    ebx
L_41387:
        mov     edx,dword [esp+0ch+04h]
        mov     ecx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
; Line 397:     if (__n == 0) 
        and     edx,edx
        jne     L_41390
; Line 398:         return 0; 
        xor     eax,eax
        jmp     L_41388
L_41390:
; Line 400:     return __builtin_wmemcmp(__s1, __s2, __n); 
; Line 404:     for (; __n; --__n, ++__s1, ++__s2) 
; Line 405:     { 
; Line 406:         if (lt(*__s1, *__s2)) 
; Line 407:             return -1; 
; Line 408:         if (lt(*__s2, *__s1)) 
; Line 409:             return 1; 
; Line 410:     } 
; Line 411:     return 0; 
; Line 413: } 
        push    edx
        push    ecx
        push    eax
        call    _wmemcmp
        add     esp,byte 0ch
; Line 402:     return wmemcmp(__s1, __s2, __n); 
L_41388:
        pop     ebx
        ret
section code
section code
        section vsc@std@__1@#char_traits$C~@length$qpxC virtual
        [bits 32]
@std@__1@#char_traits$C~@length$qpxC:
; Line 428: size_t 
L_41400:
        mov     eax,dword [esp+04h]
; Line 430: { 
; Line 432:     return __builtin_wcslen(__s); 
; Line 436:     size_t __len = 0; 
; Line 437:     for (; !eq(*__s, char_type(0)); ++__s) 
; Line 438:         ++__len; 
; Line 439:     return __len; 
; Line 441: } 
        push    eax
        call    _wcslen
        pop     ecx
; Line 434:     return wcslen(__s); 
L_41401:
        ret
section code
section code
        section vsc@std@__1@#char_traits$C~@find$qpxCuirxC virtual
        [bits 32]
@std@__1@#char_traits$C~@find$qpxCuirxC:
; Line 443: inline _LIBCPP_CONSTEXPR_AFTER_CXX14 
        push    ebx
L_41408:
        mov     ecx,dword [esp+0ch+04h]
        mov     edx,dword [esp+08h+04h]
        mov     eax,dword [esp+04h+04h]
; Line 446: { 
; Line 447:     if (__n == 0) 
        and     edx,edx
        jne     L_41411
; Line 448:         return nullptr; 
        xor     eax,eax
        jmp     L_41409
L_41411:
; Line 450:     return __builtin_wmemchr(__s, __a, __n); 
; Line 454:     for (; __n; --__n) 
; Line 455:     { 
; Line 456:         if (eq(*__s, __a)) 
; Line 457:             return __s; 
; Line 458:         ++__s; 
; Line 459:     } 
; Line 460:     return nullptr; 
; Line 462: } 
        push    edx
        movzx   ecx,word [ecx]
        push    ecx
        push    eax
        call    _wmemchr
        add     esp,byte 0ch
; Line 452:     return wmemchr(__s, __a, __n); 
L_41409:
        pop     ebx
        ret
section code
section code
        section vsc@std@__1@#char_traits$h~@compare$qpxhpxhui virtual
        [bits 32]
@std@__1@#char_traits$h~@compare$qpxhpxhui:
; Line 620: { 
        push    ecx
        push    ecx
        push    ebx
        push    ebp
        push    esi
        push    edi
L_41421:
        mov     edx,dword [esp+0ch+018h]
        mov     ebx,dword [esp+08h+018h]
        mov     ecx,dword [esp+04h+018h]
; Line 621:     for (; __n; --__n, ++__s1, ++__s2) 
        and     edx,edx
        je      L_41426
L_41424:
; Line 622:     { 
; Line 623:         if (lt(*__s1, *__s2)) 
        mov     ax,word [ecx]
        mov     esi,ecx
        mov     edi,eax
        mov     cx,word [ebx]
        mov     ebp,ebx
        mov     ebx,ecx
        movzx   edi,di
        movzx   ecx,cx
        cmp     edi,ecx
        setl    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_41430
; Line 624:             return -1; 
        mov     eax,0ffffffffh
        jmp     L_41422
L_41430:
; Line 625:         if (lt(*__s2, *__s1)) 
        movzx   ecx,bx
        movzx   eax,ax
        cmp     ecx,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_41435
; Line 626:             return 1; 
        mov     eax,01h
        jmp     L_41422
L_41435:
; Line 627:     } 
L_41427:
        dec     edx
        mov     ecx,esi
        add     ecx,byte 02h
        mov     eax,ebp
        add     eax,byte 02h
        mov     ebx,eax
L_41425:
        and     edx,edx
        jne     L_41424
L_41426:
; Line 628:     return 0; 
        xor     eax,eax
; Line 629: } 
L_41422:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#char_traits$h~@length$qpxh virtual
        [bits 32]
@std@__1@#char_traits$h~@length$qpxh:
; Line 631: inline _LIBCPP_CONSTEXPR_AFTER_CXX14 
        push    ecx
        push    ecx
        push    ebx
        push    esi
L_41479:
        mov     edx,dword [esp+04h+010h]
; Line 634: { 
; Line 635:     size_t __len = 0; 
        xor     eax,eax
; Line 636:     for (; !eq(*__s, char_type(0)); ++__s) 
        mov     cx,word [edx]
        xor     esi,esi
        movzx   ebx,cx
        movzx   ecx,si
        cmp     ebx,ecx
        sete    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_41484
L_41482:
        inc     eax
L_41485:
        add     edx,byte 02h
L_41483:
        mov     cx,word [edx]
        xor     esi,esi
        movzx   ebx,cx
        movzx   ecx,si
        cmp     ebx,ecx
        sete    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_41482
L_41484:
; Line 637:         ++__len; 
; Line 638:     return __len; 
; Line 638:     return __len; 
; Line 639: } 
L_41480:
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#char_traits$h~@find$qpxhuirxh virtual
        [bits 32]
@std@__1@#char_traits$h~@find$qpxhuirxh:
; Line 641: inline _LIBCPP_CONSTEXPR_AFTER_CXX14 
        push    ecx
        push    ebx
        push    esi
        push    edi
L_41525:
        mov     ebx,dword [esp+0ch+010h]
        mov     eax,dword [esp+08h+010h]
        mov     ecx,dword [esp+04h+010h]
; Line 644: { 
        and     eax,eax
        je      L_41530
L_41528:
; Line 646:     { 
; Line 647:         if (eq(*__s, __a)) 
        mov     edi,ecx
        mov     dx,word [edi]
        mov     esi,ebx
        mov     si,word [esi]
        movzx   edx,dx
        movzx   esi,si
        cmp     edx,esi
        sete    dl
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_41534
; Line 648:             return __s; 
        mov     eax,ecx
        jmp     L_41526
L_41534:
        mov     ecx,edi
        add     ecx,byte 02h
; Line 649:         ++__s; 
L_41531:
        dec     eax
; Line 645:     for (; __n; --__n) 
L_41529:
        and     eax,eax
        jne     L_41528
L_41530:
; Line 650:     } 
; Line 651:     return 0; 
; Line 651:     return 0; 
        xor     eax,eax
; Line 652: } 
L_41526:
        pop     edi
        pop     esi
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#char_traits$h~@move$qphpxhui virtual
        [bits 32]
@std@__1@#char_traits$h~@move$qphpxhui:
; Line 654: inline _LIBCPP_CONSTEXPR_AFTER_CXX17 
        add     esp,byte 0fffffff0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_41562:
        mov     ecx,dword [esp+0ch+020h]
        mov     edx,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
; Line 657: { 
; Line 658:     if (__n == 0) return __s1; 
        and     ecx,ecx
        jne     L_41565
        mov     eax,ebx
        jmp     L_41563
L_41565:
; Line 659:     char_type* __r = __s1; 
        mov     edi,ebx
        mov     eax,ebx
; Line 660:     if (__s1 < __s2) 
        cmp     ebx,edx
        jge     L_41570
; Line 661:     { 
; Line 662:         for (; __n; --__n, ++__s1, ++__s2) 
        and     ecx,ecx
        je      L_41581
L_41574:
; Line 663:             assign(*__s1, *__s2); 
        mov     esi,ebx
        mov     edi,edx
        mov     di,word [edi]
        mov     word [esi],di
L_41614:
L_41577:
        dec     ecx
        add     ebx,byte 02h
        add     edx,byte 02h
L_41575:
        and     ecx,ecx
        jne     L_41574
L_41576:
; Line 664:     } 
        jmp     L_41581
L_41570:
; Line 665:     else if (__s2 < __s1) 
        cmp     edx,ebx
        jge     L_41584
; Line 666:     { 
; Line 667:         __s1 += __n; 
        mov     esi,ecx
        shl     esi,01h
        mov     ebx,edi
        add     ebx,esi
; Line 668:         __s2 += __n; 
        add     edx,esi
; Line 669:         for (; __n; --__n) 
        and     ecx,ecx
        je      L_41590
L_41588:
; Line 670:             assign(*--__s1, *--__s2); 
        sub     ebx,byte 02h
        mov     esi,ebx
        sub     edx,byte 02h
        mov     edi,edx
        mov     di,word [edi]
        mov     word [esi],di
L_41630:
L_41591:
        dec     ecx
L_41589:
        and     ecx,ecx
        jne     L_41588
L_41590:
; Line 671:     } 
L_41584:
L_41581:
; Line 672:     return __r; 
; Line 673: } 
L_41563:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#char_traits$h~@copy$qphpxhui virtual
        [bits 32]
@std@__1@#char_traits$h~@copy$qphpxhui:
; Line 675: inline _LIBCPP_CONSTEXPR_AFTER_CXX17 
        push    ecx
        push    ecx
        push    ebx
        push    esi
        push    edi
L_41636:
        mov     ecx,dword [esp+0ch+014h]
        mov     esi,dword [esp+08h+014h]
        mov     eax,dword [esp+04h+014h]
; Line 678: { 
; Line 679:     _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, "char_traits::copy overlapped range"); 
; Line 680:     char_type* __r = __s1; 
; Line 680:     char_type* __r = __s1; 
        mov     edx,eax
; Line 681:     for (; __n; --__n, ++__s1, ++__s2) 
        and     ecx,ecx
        je      L_41641
L_41639:
; Line 682:         assign(*__s1, *__s2); 
        mov     ebx,eax
        mov     edi,esi
        mov     di,word [edi]
        mov     word [ebx],di
L_41660:
L_41642:
        dec     ecx
        add     eax,byte 02h
        add     esi,byte 02h
L_41640:
        and     ecx,ecx
        jne     L_41639
L_41641:
; Line 683:     return __r; 
        mov     eax,edx
; Line 684: } 
L_41637:
        pop     edi
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#char_traits$h~@assign$qphuih virtual
        [bits 32]
@std@__1@#char_traits$h~@assign$qphuih:
; Line 686: inline _LIBCPP_CONSTEXPR_AFTER_CXX17 
        push    ecx
        push    ecx
        push    ebx
        push    esi
L_41666:
        mov     edx,dword [esp+08h+010h]
        mov     ecx,dword [esp+04h+010h]
; Line 689: { 
; Line 690:     char_type* __r = __s; 
        mov     eax,ecx
; Line 691:     for (; __n; --__n, ++__s) 
        and     edx,edx
        je      L_41671
L_41669:
; Line 692:         assign(*__s, __a); 
        mov     ebx,ecx
        mov     si,word [esp+0ch+010h]
        mov     word [ebx],si
L_41690:
L_41672:
        dec     edx
        add     ecx,byte 02h
L_41670:
        and     edx,edx
        jne     L_41669
L_41671:
; Line 693:     return __r; 
; Line 694: } 
L_41667:
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#char_traits$H~@compare$qpxHpxHui virtual
        [bits 32]
@std@__1@#char_traits$H~@compare$qpxHpxHui:
; Line 740: { 
        add     esp,byte 0fffffff0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_41696:
        mov     edx,dword [esp+0ch+020h]
        mov     ebx,dword [esp+08h+020h]
        mov     ecx,dword [esp+04h+020h]
; Line 741:     for (; __n; --__n, ++__s1, ++__s2) 
        and     edx,edx
        je      L_41701
L_41699:
; Line 742:     { 
; Line 743:         if (lt(*__s1, *__s2)) 
        mov     eax,dword [ecx]
        mov     esi,eax
        mov     edi,eax
        mov     eax,dword [ebx]
        mov     ebp,eax
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_41705
; Line 744:             return -1; 
        mov     eax,0ffffffffh
        jmp     L_41697
L_41705:
; Line 745:         if (lt(*__s2, *__s1)) 
        mov     edi,ebp
        mov     eax,esi
        cmp     edi,eax
        setl    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_41710
; Line 746:             return 1; 
        mov     eax,01h
        jmp     L_41697
L_41710:
; Line 747:     } 
L_41702:
        dec     edx
        add     ecx,byte 04h
        add     ebx,byte 04h
L_41700:
        and     edx,edx
        jne     L_41699
L_41701:
; Line 748:     return 0; 
        xor     eax,eax
; Line 749: } 
L_41697:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#char_traits$H~@length$qpxH virtual
        [bits 32]
@std@__1@#char_traits$H~@length$qpxH:
; Line 751: inline _LIBCPP_CONSTEXPR_AFTER_CXX14 
        add     esp,byte 0fffffff0h
L_41754:
        mov     edx,dword [esp+04h+010h]
; Line 754: { 
; Line 755:     size_t __len = 0; 
        xor     eax,eax
; Line 756:     for (; !eq(*__s, char_type(0)); ++__s) 
        mov     ecx,dword [edx]
        and     ecx,ecx
        sete    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        jne     L_41759
L_41757:
        inc     eax
L_41760:
        add     edx,byte 04h
L_41758:
        mov     ecx,dword [edx]
        and     ecx,ecx
        sete    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_41757
L_41759:
; Line 757:         ++__len; 
; Line 758:     return __len; 
; Line 758:     return __len; 
; Line 759: } 
L_41755:
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#char_traits$H~@find$qpxHuirxH virtual
        [bits 32]
@std@__1@#char_traits$H~@find$qpxHuirxH:
; Line 761: inline _LIBCPP_CONSTEXPR_AFTER_CXX14 
        push    ecx
        push    ecx
        push    ebx
        push    esi
        push    edi
L_41800:
        mov     esi,dword [esp+0ch+014h]
        mov     eax,dword [esp+08h+014h]
        mov     edx,dword [esp+04h+014h]
; Line 764: { 
        and     eax,eax
        je      L_41805
L_41803:
; Line 766:     { 
; Line 767:         if (eq(*__s, __a)) 
        mov     ebx,edx
        mov     edi,dword [ebx]
        mov     ecx,esi
        mov     ecx,dword [ecx]
        cmp     edi,ecx
        sete    cl
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_41809
; Line 768:             return __s; 
        mov     eax,edx
        jmp     L_41801
L_41809:
        mov     edx,ebx
        add     edx,byte 04h
; Line 769:         ++__s; 
L_41806:
        dec     eax
; Line 765:     for (; __n; --__n) 
L_41804:
        and     eax,eax
        jne     L_41803
L_41805:
; Line 770:     } 
; Line 771:     return 0; 
; Line 771:     return 0; 
        xor     eax,eax
; Line 772: } 
L_41801:
        pop     edi
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#char_traits$H~@move$qpHpxHui virtual
        [bits 32]
@std@__1@#char_traits$H~@move$qpHpxHui:
; Line 774: inline _LIBCPP_CONSTEXPR_AFTER_CXX17 
        add     esp,byte 0fffffff0h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_41837:
        mov     ecx,dword [esp+0ch+020h]
        mov     edx,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
; Line 777: { 
; Line 778:     if (__n == 0) return __s1; 
        and     ecx,ecx
        jne     L_41840
        mov     eax,ebx
        jmp     L_41838
L_41840:
; Line 779:     char_type* __r = __s1; 
        mov     edi,ebx
        mov     eax,ebx
; Line 780:     if (__s1 < __s2) 
        cmp     ebx,edx
        jge     L_41845
; Line 781:     { 
; Line 782:         for (; __n; --__n, ++__s1, ++__s2) 
        and     ecx,ecx
        je      L_41856
L_41849:
; Line 783:             assign(*__s1, *__s2); 
        mov     esi,ebx
        mov     edi,edx
        mov     edi,dword [edi]
        mov     dword [esi],edi
L_41889:
L_41852:
        dec     ecx
        add     ebx,byte 04h
        add     edx,byte 04h
L_41850:
        and     ecx,ecx
        jne     L_41849
L_41851:
; Line 784:     } 
        jmp     L_41856
L_41845:
; Line 785:     else if (__s2 < __s1) 
        cmp     edx,ebx
        jge     L_41859
; Line 786:     { 
; Line 787:         __s1 += __n; 
        mov     esi,ecx
        shl     esi,02h
        mov     ebx,edi
        add     ebx,esi
; Line 788:         __s2 += __n; 
        add     edx,esi
; Line 789:         for (; __n; --__n) 
        and     ecx,ecx
        je      L_41865
L_41863:
; Line 790:             assign(*--__s1, *--__s2); 
        sub     ebx,byte 04h
        mov     esi,ebx
        sub     edx,byte 04h
        mov     edi,edx
        mov     edi,dword [edi]
        mov     dword [esi],edi
L_41905:
L_41866:
        dec     ecx
L_41864:
        and     ecx,ecx
        jne     L_41863
L_41865:
; Line 791:     } 
L_41859:
L_41856:
; Line 792:     return __r; 
; Line 793: } 
L_41838:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#char_traits$H~@copy$qpHpxHui virtual
        [bits 32]
@std@__1@#char_traits$H~@copy$qpHpxHui:
; Line 795: inline _LIBCPP_CONSTEXPR_AFTER_CXX17 
        push    ecx
        push    ecx
        push    ebx
        push    esi
        push    edi
L_41911:
        mov     ecx,dword [esp+0ch+014h]
        mov     esi,dword [esp+08h+014h]
        mov     eax,dword [esp+04h+014h]
; Line 798: { 
; Line 799:     _LIBCPP_ASSERT(__s2 < __s1 || __s2 >= __s1+__n, "char_traits::copy overlapped range"); 
; Line 800:     char_type* __r = __s1; 
; Line 800:     char_type* __r = __s1; 
        mov     edx,eax
; Line 801:     for (; __n; --__n, ++__s1, ++__s2) 
        and     ecx,ecx
        je      L_41916
L_41914:
; Line 802:         assign(*__s1, *__s2); 
        mov     ebx,eax
        mov     edi,esi
        mov     edi,dword [edi]
        mov     dword [ebx],edi
L_41935:
L_41917:
        dec     ecx
        add     eax,byte 04h
        add     esi,byte 04h
L_41915:
        and     ecx,ecx
        jne     L_41914
L_41916:
; Line 803:     return __r; 
        mov     eax,edx
; Line 804: } 
L_41912:
        pop     edi
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#char_traits$H~@assign$qpHuiH virtual
        [bits 32]
@std@__1@#char_traits$H~@assign$qpHuiH:
; Line 806: inline _LIBCPP_CONSTEXPR_AFTER_CXX17 
        push    ecx
        push    ecx
        push    ebx
        push    esi
L_41941:
        mov     edx,dword [esp+08h+010h]
        mov     ecx,dword [esp+04h+010h]
; Line 809: { 
; Line 810:     char_type* __r = __s; 
        mov     eax,ecx
; Line 811:     for (; __n; --__n, ++__s) 
        and     edx,edx
        je      L_41946
L_41944:
; Line 812:         assign(*__s, __a); 
        mov     ebx,ecx
        mov     esi,dword [esp+0ch+010h]
        mov     dword [ebx],esi
L_41965:
L_41947:
        dec     edx
        add     ecx,byte 04h
L_41945:
        and     edx,edx
        jne     L_41944
L_41946:
; Line 813:     return __r; 
; Line 814: } 
L_41942:
        pop     esi
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@$bctr$qR#basic_string$c#char_traits$c~#allocator$c~~ virtual
        [bits 32]
@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@$bctr$qR#basic_string$c#char_traits$c~#allocator$c~~:
        add     esp,byte 0ffffffcch
        push    ebx
        push    esi
L_41971:
        mov     esi,dword [esp+08h+03ch]
        mov     ebx,dword [esp+04h+03ch]
        mov     eax,ebx
        push    eax
        call    @std@__1@#__basic_string_common$4bool?1?~@$bctr$qv
        pop     ecx
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,esi
        add     ecx,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    ecx
        push    eax
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@__rep@$bctr$qRx51@#basic_string$c#char_traits$c~#allocator$c~~@__rep
        pop     ecx
        pop     ecx
; Line 1872:     __str.__zero(); 
        push    esi
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@__zero$qv
        pop     ecx
; Line 1874:     __get_db()->__insert_c(this); 
; Line 1875:     if (__is_long()) 
; Line 1875:     if (__is_long()) 
        mov     eax,ebx
L_41972:
        pop     esi
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@$basn$qR#basic_string$c#char_traits$c~#allocator$c~~ virtual
        [bits 32]
@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@$basn$qR#basic_string$c#char_traits$c~#allocator$c~~:
        add     esp,byte 0ffffffc4h
        push    ebx
L_42061:
        mov     eax,dword [esp+08h+040h]
        mov     ebx,dword [esp+04h+040h]
; Line 2320:     __move_assign(__str, integral_constant<bool, 
        add     esp,byte 0fffffffch
        mov     ecx,esp
        mov     dword [esp-04h+044h],00h
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@__move_assign$qr#basic_string$c#char_traits$c~#allocator$c~~#integral_constant$4bool3_Tp?1?~
        add     esp,byte 0ch
        mov     eax,ebx
L_42111:
; Line 2323: } 
L_42125:
L_42062:
        pop     ebx
        add     esp,byte 03ch
        ret
section code
section code
        section vsc@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@substr$xquiui virtual
        [bits 32]
@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@substr$xquiui:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffff90h
        push    ebx
        push    esi
        push    edi
L_42131:
        mov     eax,dword [ebp+08h]
        mov     dword [ebp-070h],eax
        mov     edi,dword [ebp+014h]
        mov     esi,dword [ebp+010h]
        mov     ebx,dword [ebp+0ch]
        push    dword @$xc@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@substr$xquiui
        lea     eax,[ebp-05ch]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_42134:
; Line 3296:     return basic_string(*this, __pos, __n, __alloc()); 
        mov     eax,ebx
        add     eax,byte 04h
; Line 2319:     return static_cast<_Base2 const&>(*this).__get(); 
        mov     dword [ebp-06ch],eax
        and     eax,eax
        je      L_42183
        mov     eax,dword [ebp-06ch]
        add     eax,byte 0ch
        jmp     L_42184
L_42183:
        mov     eax,dword [ebp-06ch]
L_42184:
; Line 2320:   } 
        push    eax
        push    edi
        push    esi
        push    ebx
        mov     eax,dword [ebp-070h]
        push    eax
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@$bctr$qrx#basic_string$c#char_traits$c~#allocator$c~~uiuirx#allocator$c~
        add     esp,byte 014h
        mov     dword [ebp-05ch+014h],01h
        mov     eax,dword [ebp+08h]
; Line 3297: } 
L_42132:
        call    @_RundownException$qv
        pop     edi
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@$xc@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@substr$xquiui virtual
        [bits 32]
@$xc@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@substr$xquiui:
        dd      00h
        dd      0ffffffa4h
        dd      00h
section code
section code
        section vsc@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@find_first_of$xqpxcui virtual
        [bits 32]
@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@find_first_of$xqpxcui:
        add     esp,byte 0ffffff80h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_42191:
        mov     edi,dword [esp+0ch+090h]
        mov     esi,dword [esp+08h+090h]
        mov     ecx,dword [esp+04h+090h]
; Line 3494:     _LIBCPP_ASSERT(__s != nullptr, "string::find_first_of(): received nullptr"); 
        mov     eax,ecx
        mov     edx,eax
        add     edx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-080h+090h],edx
        and     edx,edx
        je      L_42313
        mov     edx,dword [esp-080h+090h]
        jmp     L_42314
L_42313:
        mov     edx,dword [esp-080h+090h]
L_42314:
; Line 2310:   } 
        movzx   edx,byte [edx]
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_42266
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-080h+090h],eax
        and     eax,eax
        je      L_42363
        mov     eax,dword [esp-080h+090h]
        jmp     L_42364
L_42363:
        mov     eax,dword [esp-080h+090h]
L_42364:
; Line 2310:   } 
        mov     eax,dword [eax+08h]
        jmp     L_42267
L_42266:
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-080h+090h],eax
        and     eax,eax
        je      L_42428
        mov     eax,dword [esp-080h+090h]
        jmp     L_42429
L_42428:
        mov     eax,dword [esp-080h+090h]
L_42429:
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_42267:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        mov     ebx,eax
        mov     eax,ecx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-080h+090h],eax
        and     eax,eax
        je      L_42515
        mov     eax,dword [esp-080h+090h]
        jmp     L_42516
L_42515:
        mov     eax,dword [esp-080h+090h]
L_42516:
; Line 2310:   } 
        movzx   eax,byte [eax]
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_42468
        mov     eax,ecx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-080h+090h],eax
        and     eax,eax
        je      L_42565
        mov     eax,dword [esp-080h+090h]
        jmp     L_42566
L_42565:
        mov     eax,dword [esp-080h+090h]
L_42566:
; Line 2310:   } 
        mov     eax,dword [eax+04h]
        jmp     L_42469
L_42468:
        mov     eax,ecx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-080h+090h],eax
        and     eax,eax
        je      L_42615
        mov     eax,dword [esp-080h+090h]
        jmp     L_42616
L_42615:
        mov     eax,dword [esp-080h+090h]
L_42616:
; Line 2310:   } 
        movzx   eax,byte [eax]
        shr     eax,01h
L_42469:
        mov     ebp,eax
        mov     ecx,esi
        push    ecx
        call    _strlen
        pop     ecx
; Line 938:     if (__pos >= __sz || __n == 0) 
        cmp     edi,ebp
        jnc     L_42637
        and     eax,eax
        jne     L_42197
L_42637:
        or      eax,byte 0ffffffffh
        jmp     L_42219
L_42197:
        push    dword @std@__1@#char_traits$c~@eq$qcc
        mov     ecx,esi
        add     eax,ecx
        push    eax
        push    ecx
        mov     ecx,ebx
        mov     esi,ebp
        mov     eax,ecx
        add     eax,esi
        push    eax
        mov     eax,edi
        add     eax,ecx
        push    eax
        call    @std@__1@#__find_first_of_ce$pxcpxcpqcc$4bool~$qpxcpxcpxcpxcpqcc$n0
        add     esp,byte 014h
        mov     ecx,ebx
        add     ebx,esi
        cmp     eax,ebx
        jne     L_42202
        or      eax,byte 0ffffffffh
        jmp     L_42219
L_42202:
        sub     eax,ecx
; Line 945: } 
L_42219:
; Line 3497: } 
L_42192:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,080h
        ret
section code
section code
        section vsc@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@find_first_not_of$xqpxcui virtual
        [bits 32]
@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@find_first_not_of$xqpxcui:
        add     esp,byte 0ffffff98h
        push    ebx
        push    esi
        push    edi
L_42642:
        mov     edi,dword [esp+0ch+074h]
        mov     esi,dword [esp+08h+074h]
        mov     ebx,dword [esp+04h+074h]
; Line 3610:     _LIBCPP_ASSERT(__s != nullptr, "string::find_first_not_of(): received nullptr"); 
        mov     eax,esi
        push    eax
        call    _strlen
        pop     ecx
        push    eax
        push    edi
        push    esi
        mov     eax,ebx
        mov     ecx,eax
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-068h+080h],ecx
        and     ecx,ecx
        je      L_42725
        mov     ecx,dword [esp-068h+080h]
        jmp     L_42726
L_42725:
        mov     ecx,dword [esp-068h+080h]
L_42726:
; Line 2310:   } 
        movzx   ecx,byte [ecx]
        and     ecx,byte 01h
        setne   cl
        and     cl,cl
        je      L_42678
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-068h+080h],eax
        and     eax,eax
        je      L_42775
        mov     eax,dword [esp-068h+080h]
        jmp     L_42776
L_42775:
        mov     eax,dword [esp-068h+080h]
L_42776:
; Line 2310:   } 
        mov     eax,dword [eax+04h]
        jmp     L_42679
L_42678:
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-068h+080h],eax
        and     eax,eax
        je      L_42825
        mov     eax,dword [esp-068h+080h]
        jmp     L_42826
L_42825:
        mov     eax,dword [esp-068h+080h]
L_42826:
; Line 2310:   } 
        movzx   eax,byte [eax]
        shr     eax,01h
L_42679:
        push    eax
        mov     eax,ebx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-068h+084h],eax
        and     eax,eax
        je      L_42923
        mov     eax,dword [esp-068h+084h]
        jmp     L_42924
L_42923:
        mov     eax,dword [esp-068h+084h]
L_42924:
; Line 2310:   } 
        movzx   eax,byte [eax]
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_42876
        mov     eax,ebx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-068h+084h],eax
        and     eax,eax
        je      L_42973
        mov     eax,dword [esp-068h+084h]
        jmp     L_42974
L_42973:
        mov     eax,dword [esp-068h+084h]
L_42974:
; Line 2310:   } 
        mov     eax,dword [eax+08h]
        jmp     L_42877
L_42876:
        mov     eax,ebx
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-068h+084h],eax
        and     eax,eax
        je      L_43038
        mov     eax,dword [esp-068h+084h]
        jmp     L_43039
L_43038:
        mov     eax,dword [esp-068h+084h]
L_43039:
; Line 2310:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_42877:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    eax
        call    @std@__1@#__str_find_first_not_of$cui#char_traits$c~6_SizeT?4294967295?~$qpxcuipxcuiui
        add     esp,byte 014h
; Line 3613: } 
L_42643:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 068h
        ret
section code
section code
        section vsc@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@__zero$qv virtual
        [bits 32]
@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@__zero$qv:
; Line 1518:         { 
        push    ecx
        push    ecx
        push    ecx
L_43066:
        mov     eax,dword [esp+04h+0ch]
; Line 1519:             size_type (&__a)[__n_words] = __r_.first().__r.__words; 
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0ch+0ch],eax
        and     eax,eax
        je      L_43109
        mov     eax,dword [esp-0ch+0ch]
        jmp     L_43110
L_43109:
        mov     eax,dword [esp-0ch+0ch]
L_43110:
; Line 2305:   } 
        mov     edx,eax
; Line 1520:             for (unsigned __i = 0; __i < __n_words; ++__i) 
        xor     eax,eax
L_43069:
        mov     ecx,eax
        mov     dword [edx+eax*4],00h
L_43072:
        mov     eax,ecx
        inc     eax
L_43070:
        cmp     eax,byte 03h
        jc      L_43069
L_43071:
; Line 1522:         } 
L_43067:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@__move_assign$qr#basic_string$c#char_traits$c~#allocator$c~~#integral_constant$4bool3_Tp?1?~ virtual
        [bits 32]
@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@__move_assign$qr#basic_string$c#char_traits$c~#allocator$c~~#integral_constant$4bool3_Tp?1?~:
        add     esp,0fffffeb4h
        push    ebx
        push    esi
L_43116:
        mov     ebx,dword [esp+08h+0154h]
        mov     esi,dword [esp+04h+0154h]
; Line 2298:   if (__is_long()) { 
        mov     eax,esi
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-0140h+0154h],eax
        and     eax,eax
        je      L_43182
        mov     eax,dword [esp-0140h+0154h]
        jmp     L_43183
L_43182:
        mov     eax,dword [esp-0140h+0154h]
L_43183:
; Line 2310:   } 
        movzx   eax,byte [eax]
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_43119
; Line 2299:     __alloc_traits::deallocate(__alloc(), __get_long_pointer(), 
        mov     eax,esi
        add     eax,byte 04h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0144h+0154h],eax
L_43247:
L_43248:
; Line 2315:   } 
        mov     eax,esi
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0148h+0154h],eax
        and     eax,eax
        je      L_43297
        mov     eax,dword [esp-0148h+0154h]
        jmp     L_43298
L_43297:
        mov     eax,dword [esp-0148h+0154h]
L_43298:
; Line 2305:   } 
        mov     eax,dword [eax+08h]
        mov     ecx,esi
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-0140h+0154h],ecx
L_43347:
L_43348:
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_43380:
L_43365:
L_43200:
; Line 2303:       __set_short_size(0); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 2305:     } 
L_43123:
; Line 2307:   } 
L_43119:
        mov     eax,esi
        mov     ecx,ebx
        add     esp,byte 0fffffffch
        mov     edx,esp
        mov     dword [esp-014ch+0158h],00h
        push    ecx
        push    eax
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@__move_assign_alloc$qr#basic_string$c#char_traits$c~#allocator$c~~#integral_constant$4bool3_Tp?1?~
        add     esp,byte 0ch
L_43641:
L_43596:
        mov     eax,ebx
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0148h+0154h],eax
        and     eax,eax
        je      L_43675
        mov     eax,dword [esp-0148h+0154h]
        jmp     L_43676
L_43675:
        mov     eax,dword [esp-0148h+0154h]
L_43676:
; Line 2305:   } 
        push    eax
        mov     eax,esi
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0148h+0158h],eax
        and     eax,eax
        je      L_43709
        mov     eax,dword [esp-0148h+0158h]
        jmp     L_43710
L_43709:
        mov     eax,dword [esp-0148h+0158h]
L_43710:
; Line 2305:   } 
        push    eax
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@__rep@$basn$qr51@#basic_string$c#char_traits$c~#allocator$c~~@__rep
        pop     ecx
        pop     ecx
        mov     eax,ebx
        xor     ecx,ecx
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0148h+0154h],eax
        and     eax,eax
        je      L_43758
        mov     eax,dword [esp-0148h+0154h]
        jmp     L_43759
L_43758:
        mov     eax,dword [esp-0148h+0154h]
L_43759:
; Line 2305:   } 
        mov     byte [eax],cl
L_43726:
        mov     eax,ebx
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0148h+0154h],eax
        and     eax,eax
        je      L_43838
        mov     eax,dword [esp-0148h+0154h]
        jmp     L_43839
L_43838:
        mov     eax,dword [esp-0148h+0154h]
L_43839:
; Line 2305:   } 
        inc     eax
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        xor     ecx,ecx
        mov     byte [esp-01h+0154h],cl
        mov     cl,byte [esp-01h+0154h]
        mov     byte [eax],cl
L_43776:
; Line 2312: } 
L_43478:
L_43479:
L_43446:
L_43558:
L_43559:
L_43496:
L_43117:
        pop     esi
        pop     ebx
        add     esp,014ch
        ret
section code
section code
        section vsc@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@__move_assign_alloc$qr#basic_string$c#char_traits$c~#allocator$c~~#integral_constant$4bool3_Tp?1?~ virtual
        [bits 32]
@std@__1@#basic_string$c#char_traits$c~#allocator$c~~@__move_assign_alloc$qr#basic_string$c#char_traits$c~#allocator$c~~#integral_constant$4bool3_Tp?1?~:
; Line 1632:         { 
        add     esp,byte 0ffffffb8h
L_43864:
        mov     ecx,dword [esp+08h+048h]
        mov     eax,dword [esp+04h+048h]
; Line 1633:             __alloc() = _VSTD::move(__c.__alloc()); 
        add     ecx,byte 04h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-048h+048h],ecx
        and     ecx,ecx
        je      L_43931
        mov     ecx,dword [esp-048h+048h]
        add     ecx,byte 0ch
        jmp     L_43932
L_43931:
        mov     ecx,dword [esp-048h+048h]
L_43932:
; Line 2315:   } 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    ecx
        add     eax,byte 04h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-048h+04ch],eax
        and     eax,eax
        je      L_43982
        mov     eax,dword [esp-048h+04ch]
        add     eax,byte 0ch
        jmp     L_43983
L_43982:
        mov     eax,dword [esp-048h+04ch]
L_43983:
; Line 2315:   } 
        push    eax
        call    @std@__1@#allocator$c~@$basn$qRx#allocator$c~
        pop     ecx
        pop     ecx
; Line 1634:         } 
L_43865:
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv virtual
        [bits 32]
@std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qv:
        add     esp,byte 0ffffffe8h
        push    ebx
L_43990:
        mov     ebx,dword [esp+04h+01ch]
        mov     eax,ebx
        push    eax
        call    @std@__1@#__basic_string_common$4bool?1?~@$bctr$qv
        pop     ecx
        mov     dword [esp-08h+01ch],00h
        lea     eax,[esp-08h+01ch]
        push    eax
        mov     dword [esp-04h+020h],00h
        lea     eax,[esp-04h+020h]
        push    eax
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair$51@#basic_string$C#char_traits$C~#allocator$C~~@__rep#allocator$C~~@$bctr$r18__default_init_tagrn1~$qrn1rn1
        add     esp,byte 0ch
        mov     eax,ebx
; Line 1727:     __get_db()->__insert_c(this); 
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__zero$qv
        pop     ecx
; Line 1730: } 
L_44040:
L_44054:
        mov     eax,ebx
L_43991:
        pop     ebx
        add     esp,byte 018h
        ret
section code
section code
        section vsc@std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qR#basic_string$C#char_traits$C~#allocator$C~~ virtual
        [bits 32]
@std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qR#basic_string$C#char_traits$C~#allocator$C~~:
        add     esp,byte 0ffffffcch
        push    ebx
        push    esi
L_44060:
        mov     esi,dword [esp+08h+03ch]
        mov     ebx,dword [esp+04h+03ch]
        mov     eax,ebx
        push    eax
        call    @std@__1@#__basic_string_common$4bool?1?~@$bctr$qv
        pop     ecx
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,esi
        add     ecx,byte 04h
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    ecx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__rep@$bctr$qRx51@#basic_string$C#char_traits$C~#allocator$C~~@__rep
        pop     ecx
        pop     ecx
; Line 1872:     __str.__zero(); 
        push    esi
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__zero$qv
        pop     ecx
; Line 1874:     __get_db()->__insert_c(this); 
; Line 1875:     if (__is_long()) 
; Line 1875:     if (__is_long()) 
        mov     eax,ebx
L_44061:
        pop     esi
        pop     ebx
        add     esp,byte 034h
        ret
section code
section code
        section vsc@std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qR#basic_string$C#char_traits$C~#allocator$C~~ virtual
        [bits 32]
@std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qR#basic_string$C#char_traits$C~#allocator$C~~:
        add     esp,byte 0ffffffc4h
        push    ebx
L_44150:
        mov     eax,dword [esp+08h+040h]
        mov     ebx,dword [esp+04h+040h]
; Line 2320:     __move_assign(__str, integral_constant<bool, 
        add     esp,byte 0fffffffch
        mov     ecx,esp
        mov     dword [esp-04h+044h],00h
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__move_assign$qr#basic_string$C#char_traits$C~#allocator$C~~#integral_constant$4bool3_Tp?1?~
        add     esp,byte 0ch
        mov     eax,ebx
L_44200:
; Line 2323: } 
L_44214:
L_44151:
        pop     ebx
        add     esp,byte 03ch
        ret
section code
section code
        section vsc@std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$barray$qui virtual
        [bits 32]
@std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$barray$qui:
        add     esp,byte 0ffffffc8h
L_44220:
        mov     eax,dword [esp+08h+038h]
        mov     ecx,dword [esp+04h+038h]
; Line 3221:     _LIBCPP_ASSERT(__pos <= size(), "string index out of bounds"); 
        mov     edx,ecx
        add     edx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-034h+038h],edx
        and     edx,edx
        je      L_44287
        mov     edx,dword [esp-034h+038h]
        jmp     L_44288
L_44287:
        mov     edx,dword [esp-034h+038h]
L_44288:
; Line 2310:   } 
        movzx   edx,byte [edx]
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_44240
        add     ecx,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-038h+038h],ecx
        and     ecx,ecx
        je      L_44337
        mov     ecx,dword [esp-038h+038h]
        jmp     L_44338
L_44337:
        mov     ecx,dword [esp-038h+038h]
L_44338:
; Line 2305:   } 
        mov     ecx,dword [ecx+08h]
        jmp     L_44241
L_44240:
        add     ecx,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-038h+038h],ecx
        and     ecx,ecx
        je      L_44402
        mov     ecx,dword [esp-038h+038h]
        jmp     L_44403
L_44402:
        mov     ecx,dword [esp-038h+038h]
L_44403:
; Line 2305:   } 
        add     ecx,dword 02h
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_44241:
        shl     eax,01h
        add     eax,ecx
; Line 3223: } 
L_44221:
        add     esp,byte 038h
        ret
section code
section code
        section vsc@std@__1@#basic_string$C#char_traits$C~#allocator$C~~@append$qrx#basic_string$C#char_traits$C~#allocator$C~~ virtual
        [bits 32]
@std@__1@#basic_string$C#char_traits$C~#allocator$C~~@append$qrx#basic_string$C#char_traits$C~#allocator$C~~:
        add     esp,byte 0ffffff9ch
        push    ebx
L_44428:
        mov     ecx,dword [esp+08h+068h]
        mov     eax,dword [esp+04h+068h]
; Line 2553:     return append(__str.data(), __str.size()); 
        mov     edx,ecx
        mov     ebx,edx
        add     ebx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-064h+068h],ebx
        and     ebx,ebx
        je      L_44495
        mov     ebx,dword [esp-064h+068h]
        jmp     L_44496
L_44495:
        mov     ebx,dword [esp-064h+068h]
L_44496:
; Line 2310:   } 
        movzx   ebx,byte [ebx]
        and     ebx,byte 01h
        setne   bl
        and     bl,bl
        je      L_44448
        add     edx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-064h+068h],edx
        and     edx,edx
        je      L_44545
        mov     edx,dword [esp-064h+068h]
        jmp     L_44546
L_44545:
        mov     edx,dword [esp-064h+068h]
L_44546:
; Line 2310:   } 
        mov     edx,dword [edx+04h]
        jmp     L_44449
L_44448:
        add     edx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-064h+068h],edx
        and     edx,edx
        je      L_44595
        mov     edx,dword [esp-064h+068h]
        jmp     L_44596
L_44595:
        mov     edx,dword [esp-064h+068h]
L_44596:
; Line 2310:   } 
        movzx   edx,byte [edx]
        shr     edx,01h
L_44449:
        push    edx
        mov     edx,ecx
        add     edx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-064h+06ch],edx
        and     edx,edx
        je      L_44693
        mov     edx,dword [esp-064h+06ch]
        jmp     L_44694
L_44693:
        mov     edx,dword [esp-064h+06ch]
L_44694:
; Line 2310:   } 
        movzx   edx,byte [edx]
        and     edx,byte 01h
        setne   dl
        and     dl,dl
        je      L_44646
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-064h+06ch],ecx
        and     ecx,ecx
        je      L_44743
        mov     ecx,dword [esp-064h+06ch]
        jmp     L_44744
L_44743:
        mov     ecx,dword [esp-064h+06ch]
L_44744:
; Line 2310:   } 
        mov     ecx,dword [ecx+08h]
        jmp     L_44647
L_44646:
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-064h+06ch],ecx
        and     ecx,ecx
        je      L_44808
        mov     ecx,dword [esp-064h+06ch]
        jmp     L_44809
L_44808:
        mov     ecx,dword [esp-064h+06ch]
L_44809:
; Line 2310:   } 
        add     ecx,dword 02h
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
L_44647:
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    ecx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@append$qpxCui
        add     esp,byte 0ch
; Line 2554: } 
L_44429:
        pop     ebx
        add     esp,byte 064h
        ret
section code
section code
        section vsc@std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__zero$qv virtual
        [bits 32]
@std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__zero$qv:
; Line 1518:         { 
        push    ecx
        push    ecx
        push    ecx
L_44836:
        mov     eax,dword [esp+04h+0ch]
; Line 1519:             size_type (&__a)[__n_words] = __r_.first().__r.__words; 
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0ch+0ch],eax
        and     eax,eax
        je      L_44879
        mov     eax,dword [esp-0ch+0ch]
        jmp     L_44880
L_44879:
        mov     eax,dword [esp-0ch+0ch]
L_44880:
; Line 2305:   } 
        mov     edx,eax
; Line 1520:             for (unsigned __i = 0; __i < __n_words; ++__i) 
        xor     eax,eax
L_44839:
        mov     ecx,eax
        mov     dword [edx+eax*4],00h
L_44842:
        mov     eax,ecx
        inc     eax
L_44840:
        cmp     eax,byte 03h
        jc      L_44839
L_44841:
; Line 1522:         } 
L_44837:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__move_assign$qr#basic_string$C#char_traits$C~#allocator$C~~#integral_constant$4bool3_Tp?1?~ virtual
        [bits 32]
@std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__move_assign$qr#basic_string$C#char_traits$C~#allocator$C~~#integral_constant$4bool3_Tp?1?~:
        add     esp,0fffffeb4h
        push    ebx
        push    esi
L_44886:
        mov     ebx,dword [esp+08h+0154h]
        mov     esi,dword [esp+04h+0154h]
; Line 2298:   if (__is_long()) { 
        mov     eax,esi
        add     eax,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-0140h+0154h],eax
        and     eax,eax
        je      L_44952
        mov     eax,dword [esp-0140h+0154h]
        jmp     L_44953
L_44952:
        mov     eax,dword [esp-0140h+0154h]
L_44953:
; Line 2310:   } 
        movzx   eax,byte [eax]
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_44889
; Line 2299:     __alloc_traits::deallocate(__alloc(), __get_long_pointer(), 
        mov     eax,esi
        add     eax,byte 04h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0144h+0154h],eax
L_45017:
L_45018:
; Line 2315:   } 
        mov     eax,esi
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0148h+0154h],eax
        and     eax,eax
        je      L_45067
        mov     eax,dword [esp-0148h+0154h]
        jmp     L_45068
L_45067:
        mov     eax,dword [esp-0148h+0154h]
L_45068:
; Line 2305:   } 
        mov     eax,dword [eax+08h]
        mov     ecx,esi
        add     ecx,byte 04h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-0140h+0154h],ecx
L_45117:
L_45118:
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_45150:
L_45135:
L_44970:
; Line 2303:       __set_short_size(0); 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
; Line 2305:   } 
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
; Line 2305:     } 
L_44893:
; Line 2307:   } 
L_44889:
        mov     eax,esi
        mov     ecx,ebx
        add     esp,byte 0fffffffch
        mov     edx,esp
        mov     dword [esp-014ch+0158h],00h
        push    ecx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__move_assign_alloc$qr#basic_string$C#char_traits$C~#allocator$C~~#integral_constant$4bool3_Tp?1?~
        add     esp,byte 0ch
L_45411:
L_45366:
        mov     eax,ebx
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0148h+0154h],eax
        and     eax,eax
        je      L_45445
        mov     eax,dword [esp-0148h+0154h]
        jmp     L_45446
L_45445:
        mov     eax,dword [esp-0148h+0154h]
L_45446:
; Line 2305:   } 
        push    eax
        mov     eax,esi
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0148h+0158h],eax
        and     eax,eax
        je      L_45479
        mov     eax,dword [esp-0148h+0158h]
        jmp     L_45480
L_45479:
        mov     eax,dword [esp-0148h+0158h]
L_45480:
; Line 2305:   } 
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__rep@$basn$qr51@#basic_string$C#char_traits$C~#allocator$C~~@__rep
        pop     ecx
        pop     ecx
        mov     eax,ebx
        xor     ecx,ecx
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0148h+0154h],eax
        and     eax,eax
        je      L_45528
        mov     eax,dword [esp-0148h+0154h]
        jmp     L_45529
L_45528:
        mov     eax,dword [esp-0148h+0154h]
L_45529:
; Line 2305:   } 
        mov     byte [eax],cl
L_45496:
        mov     eax,ebx
        add     eax,byte 04h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0148h+0154h],eax
        and     eax,eax
        je      L_45608
        mov     eax,dword [esp-0148h+0154h]
        jmp     L_45609
L_45608:
        mov     eax,dword [esp-0148h+0154h]
L_45609:
; Line 2305:   } 
        add     eax,dword 02h
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        xor     ecx,ecx
        mov     word [esp-02h+0154h],cx
        mov     cx,word [esp-02h+0154h]
        mov     word [eax],cx
L_45546:
; Line 2312: } 
L_45248:
L_45249:
L_45216:
L_45328:
L_45329:
L_45266:
L_44887:
        pop     esi
        pop     ebx
        add     esp,014ch
        ret
section code
section code
        section vsc@std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__move_assign_alloc$qr#basic_string$C#char_traits$C~#allocator$C~~#integral_constant$4bool3_Tp?1?~ virtual
        [bits 32]
@std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__move_assign_alloc$qr#basic_string$C#char_traits$C~#allocator$C~~#integral_constant$4bool3_Tp?1?~:
; Line 1632:         { 
        add     esp,byte 0ffffffb8h
L_45634:
        mov     ecx,dword [esp+08h+048h]
        mov     eax,dword [esp+04h+048h]
; Line 1633:             __alloc() = _VSTD::move(__c.__alloc()); 
        add     ecx,byte 04h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-048h+048h],ecx
        and     ecx,ecx
        je      L_45701
        mov     ecx,dword [esp-048h+048h]
        add     ecx,byte 0ch
        jmp     L_45702
L_45701:
        mov     ecx,dword [esp-048h+048h]
L_45702:
; Line 2315:   } 
; Line 2260:     typedef _LIBCPP_NODEBUG_TYPE typename remove_reference<_Tp>::type _Up; 
; Line 2262: } 
        push    ecx
        add     eax,byte 04h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-048h+04ch],eax
        and     eax,eax
        je      L_45752
        mov     eax,dword [esp-048h+04ch]
        add     eax,byte 0ch
        jmp     L_45753
L_45752:
        mov     eax,dword [esp-048h+04ch]
L_45753:
; Line 2315:   } 
        push    eax
        call    @std@__1@#allocator$C~@$basn$qRx#allocator$C~
        pop     ecx
        pop     ecx
; Line 1634:         } 
L_45635:
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$51@#basic_string$c#char_traits$c~#allocator$c~~@__rep#allocator$c~~@$bctr$r18__default_init_tagrn1~$qrn1rn1 virtual
        [bits 32]
@std@__1@#__compressed_pair$51@#basic_string$c#char_traits$c~#allocator$c~~@__rep#allocator$c~~@$bctr$r18__default_init_tagrn1~$qrn1rn1:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        add     esp,byte 0ffffffe8h
        push    ebx
L_45760:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        mov     ebx,dword [esp+04h+01ch]
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        push    eax
        call    @std@__1@#__compressed_pair_elem$51@#basic_string$c#char_traits$c~#allocator$c~~@__repi?0?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        add     eax,byte 0ch
        push    eax
        call    @std@__1@#__compressed_pair_elem$#allocator$c~i?1?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        mov     eax,ebx
L_45761:
        pop     ebx
        add     esp,byte 018h
        ret
section code
section code
        section vsc@std@__1@#copy$pxcpc~$qpxcpxcpc virtual
        [bits 32]
@std@__1@#copy$pxcpc~$qpxcpxcpc:
; Line 1730: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17_WITH_IS_CONSTANT_EVALUATED 
        add     esp,byte 0ffffffc4h
        push    ebx
        push    esi
L_45834:
        mov     eax,dword [esp+0ch+044h]
        mov     ebx,dword [esp+08h+044h]
        mov     edx,dword [esp+04h+044h]
; Line 1734:     if (__libcpp_is_constant_evaluated()) { 
; Line 1735:         return _VSTD::__copy_constexpr( 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1700:     for (; __first != __last; ++__first, (void) ++__result) 
; Line 1703: } 
; Line 1737:     } else { 
L_45837:
; Line 1738:         return _VSTD::__copy( 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1710:     return __copy_constexpr(__first, __last, __result); 
; Line 1700:     for (; __first != __last; ++__first, (void) ++__result) 
        cmp     edx,ebx
        je      L_45987
L_45985:
        mov     cl,byte [edx]
        mov     byte [eax],cl
L_45988:
        inc     edx
        inc     eax
L_45986:
        cmp     edx,ebx
        jne     L_45985
L_45987:
; Line 1703: } 
; Line 1711: } 
; Line 1740:     } 
L_45842:
L_45852:
L_45855:
L_45853:
L_45854:
L_45835:
        pop     esi
        pop     ebx
        add     esp,byte 03ch
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$51@#basic_string$C#char_traits$C~#allocator$C~~@__rep#allocator$C~~@$bctr$r18__default_init_tagrn1~$qrn1rn1 virtual
        [bits 32]
@std@__1@#__compressed_pair$51@#basic_string$C#char_traits$C~#allocator$C~~@__rep#allocator$C~~@$bctr$r18__default_init_tagrn1~$qrn1rn1:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        add     esp,byte 0ffffffe8h
        push    ebx
L_46010:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        mov     ebx,dword [esp+04h+01ch]
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        push    eax
        call    @std@__1@#__compressed_pair_elem$51@#basic_string$C#char_traits$C~#allocator$C~~@__repi?0?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        add     eax,byte 0ch
        push    eax
        call    @std@__1@#__compressed_pair_elem$#allocator$C~i?1?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        mov     eax,ebx
L_46011:
        pop     ebx
        add     esp,byte 018h
        ret
section code
section code
        section vsc@std@__1@#copy$pxCpC~$qpxCpxCpC virtual
        [bits 32]
@std@__1@#copy$pxCpC~$qpxCpxCpC:
; Line 1730: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17_WITH_IS_CONSTANT_EVALUATED 
        add     esp,byte 0ffffffc4h
        push    ebx
        push    esi
L_46084:
        mov     eax,dword [esp+0ch+044h]
        mov     ebx,dword [esp+08h+044h]
        mov     ecx,dword [esp+04h+044h]
; Line 1734:     if (__libcpp_is_constant_evaluated()) { 
; Line 1735:         return _VSTD::__copy_constexpr( 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1700:     for (; __first != __last; ++__first, (void) ++__result) 
; Line 1703: } 
; Line 1737:     } else { 
L_46087:
; Line 1738:         return _VSTD::__copy( 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1710:     return __copy_constexpr(__first, __last, __result); 
; Line 1700:     for (; __first != __last; ++__first, (void) ++__result) 
        cmp     ecx,ebx
        je      L_46237
L_46235:
        mov     dx,word [ecx]
        mov     word [eax],dx
L_46238:
        add     ecx,byte 02h
        add     eax,byte 02h
L_46236:
        cmp     ecx,ebx
        jne     L_46235
L_46237:
; Line 1703: } 
; Line 1711: } 
; Line 1740:     } 
L_46092:
L_46102:
L_46105:
L_46103:
L_46104:
L_46085:
        pop     esi
        pop     ebx
        add     esp,byte 03ch
        ret
section code
section code
        section vsc@Token@IsNumeric$xqv virtual
        [bits 32]
@Token@IsNumeric$xqv:
; Line 52:     virtual bool IsNumeric() const { return false; } 
L_46260:
        xor     al,al
L_46261:
        ret
section code
section code
        section vsc@Token@IsKeyword$xqv virtual
        [bits 32]
@Token@IsKeyword$xqv:
; Line 54:     virtual bool IsKeyword() const { return false; } 
L_46268:
        xor     al,al
L_46269:
        ret
section code
section code
        section vsc@Token@IsString$xqv virtual
        [bits 32]
@Token@IsString$xqv:
; Line 56:     virtual bool IsString() const { return false; } 
L_46276:
        xor     al,al
L_46277:
        ret
section code
section code
        section vsc@Token@IsIdentifier$xqv virtual
        [bits 32]
@Token@IsIdentifier$xqv:
; Line 57:     virtual bool IsIdentifier() const { return false; } 
L_46284:
        xor     al,al
L_46285:
        ret
section code
section code
        section vsc@Token@GetString$xqv virtual
        [bits 32]
@Token@GetString$xqv:
; Line 61:     virtual std::wstring GetString() const { return L""; } 
        add     esp,byte 0ffffffdch
        push    ebx
L_46292:
        mov     ebx,dword [esp+04h+028h]
; Line 812:     basic_string(basic_string&& __str, const allocator_type& __a); 
; Line 816:     _LIBCPP_INLINE_VISIBILITY 
; Line 817:     basic_string(const _CharT* __s) : __r_(__default_init_tag(), __default_init_tag()) { 
; Line 817:     basic_string(const _CharT* __s) : __r_(__default_init_tag(), __default_init_tag()) { 
        mov     eax,ebx
        push    eax
        call    @std@__1@#__basic_string_common$4bool?1?~@$bctr$qv
        pop     ecx
        mov     dword [esp-020h+028h],00h
        lea     eax,[esp-020h+028h]
        push    eax
        mov     dword [esp-024h+02ch],00h
        lea     eax,[esp-024h+02ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair$51@#basic_string$C#char_traits$C~#allocator$C~~@__rep#allocator$C~~@$bctr$r18__default_init_tagrn1~$qrn1rn1
        add     esp,byte 0ch
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 430: { 
; Line 432:     return __builtin_wcslen(__s); 
; Line 436:     size_t __len = 0; 
; Line 437:     for (; !eq(*__s, char_type(0)); ++__s) 
; Line 438:         ++__len; 
; Line 439:     return __len; 
; Line 441: } 
        push    dword L_1676
        call    _wcslen
        pop     ecx
; Line 434:     return wcslen(__s); 
        push    eax
        push    dword L_1676
        push    ebx
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__init$qpxCui
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
L_46373:
L_46387:
        mov     eax,dword [esp+04h+028h]
L_46293:
        pop     ebx
        add     esp,byte 024h
        ret
section code
section code
        section vsc@Token@GetRawString$xqv virtual
        [bits 32]
@Token@GetRawString$xqv:
; Line 62:     virtual std::wstring GetRawString() const { return L""; } 
        add     esp,byte 0ffffffdch
        push    ebx
L_46394:
        mov     ebx,dword [esp+04h+028h]
; Line 812:     basic_string(basic_string&& __str, const allocator_type& __a); 
; Line 816:     _LIBCPP_INLINE_VISIBILITY 
; Line 817:     basic_string(const _CharT* __s) : __r_(__default_init_tag(), __default_init_tag()) { 
; Line 817:     basic_string(const _CharT* __s) : __r_(__default_init_tag(), __default_init_tag()) { 
        mov     eax,ebx
        push    eax
        call    @std@__1@#__basic_string_common$4bool?1?~@$bctr$qv
        pop     ecx
        mov     dword [esp-020h+028h],00h
        lea     eax,[esp-020h+028h]
        push    eax
        mov     dword [esp-024h+02ch],00h
        lea     eax,[esp-024h+02ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair$51@#basic_string$C#char_traits$C~#allocator$C~~@__rep#allocator$C~~@$bctr$r18__default_init_tagrn1~$qrn1rn1
        add     esp,byte 0ch
; Line 818:       _LIBCPP_ASSERT(__s != nullptr, "basic_string(const char*) detected nullptr"); 
; Line 430: { 
; Line 432:     return __builtin_wcslen(__s); 
; Line 436:     size_t __len = 0; 
; Line 437:     for (; !eq(*__s, char_type(0)); ++__s) 
; Line 438:         ++__len; 
; Line 439:     return __len; 
; Line 441: } 
        push    dword L_1676
        call    _wcslen
        pop     ecx
; Line 434:     return wcslen(__s); 
        push    eax
        push    dword L_1676
        push    ebx
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__init$qpxCui
        add     esp,byte 0ch
; Line 821:       __get_db()->__insert_c(this); 
L_46475:
L_46489:
        mov     eax,dword [esp+04h+028h]
L_46395:
        pop     ebx
        add     esp,byte 024h
        ret
section code
section code
        section vsc@Token@GetKeyword$xqv virtual
        [bits 32]
@Token@GetKeyword$xqv:
; Line 66:     virtual kw GetKeyword() const { return (kw)-1; } 
L_46496:
        mov     eax,0ffffffffh
L_46497:
        ret
section code
section code
@std@__1@literals@chrono_literals@$blit@h$quL:
; Line 2838: inline namespace literals 
        add     esp,byte 0fffffff0h
L_46504:
        mov     eax,dword [esp+04h+010h]
; Line 2844:     { 
; Line 1080:                 : __rep_(__r) {} 
        mov     ecx,dword [esp+08h+010h]
        mov     dword [eax],ecx
        mov     eax,dword [esp+04h+010h]
; Line 2846:     } 
L_46505:
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
@std@__1@literals@chrono_literals@$blit@h$qg:
; Line 2849:     { 
        add     esp,byte 0ffffffech
L_46530:
        mov     eax,dword [esp+04h+014h]
; Line 2850:         return chrono::duration<long double, ratio<3600,1>>(__h); 
; Line 1080:                 : __rep_(__r) {} 
        movsd   xmm0,[esp+08h+014h]
        movsd   [eax],xmm0
        mov     eax,dword [esp+04h+014h]
; Line 2851:     } 
L_46531:
        add     esp,byte 014h
        ret
@std@__1@literals@chrono_literals@$blit@min$quL:
; Line 2855:     { 
        add     esp,byte 0fffffff0h
L_46556:
        mov     eax,dword [esp+04h+010h]
; Line 2856:         return chrono::minutes(static_cast<chrono::minutes::rep>(__m)); 
; Line 1080:                 : __rep_(__r) {} 
        mov     ecx,dword [esp+08h+010h]
        mov     dword [eax],ecx
        mov     eax,dword [esp+04h+010h]
; Line 2857:     } 
L_46557:
        pop     ecx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
@std@__1@literals@chrono_literals@$blit@min$qg:
; Line 2860:     { 
        add     esp,byte 0ffffffech
L_46582:
        mov     eax,dword [esp+04h+014h]
; Line 2861:         return chrono::duration<long double, ratio<60,1>> (__m); 
; Line 1080:                 : __rep_(__r) {} 
        movsd   xmm0,[esp+08h+014h]
        movsd   [eax],xmm0
        mov     eax,dword [esp+04h+014h]
; Line 2862:     } 
L_46583:
        add     esp,byte 014h
        ret
@std@__1@literals@chrono_literals@$blit@s$quL:
; Line 2866:     { 
        add     esp,byte 0ffffffech
L_46608:
        mov     eax,dword [esp+04h+014h]
; Line 2867:         return chrono::seconds(static_cast<chrono::seconds::rep>(__s)); 
; Line 1080:                 : __rep_(__r) {} 
        mov     ecx,dword [esp+08h+014h]
        mov     edx,dword [esp+08h+04h+014h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
        mov     eax,dword [esp+04h+014h]
; Line 2868:     } 
L_46609:
        add     esp,byte 014h
        ret
@std@__1@literals@chrono_literals@$blit@s$qg:
; Line 2871:     { 
        add     esp,byte 0ffffffech
L_46634:
        mov     eax,dword [esp+04h+014h]
; Line 2872:         return chrono::duration<long double> (__s); 
; Line 846: _LIBCPP_BEGIN_NAMESPACE_STD 
; Line 2873:     } 
; Line 1080:                 : __rep_(__r) {} 
        movsd   xmm0,[esp+08h+014h]
        movsd   [eax],xmm0
        mov     eax,dword [esp+04h+014h]
; Line 853: template <class _Tp> 
L_46635:
        add     esp,byte 014h
        ret
@std@__1@literals@chrono_literals@$blit@ms$quL:
; Line 2877:     { 
        add     esp,byte 0ffffffech
L_46660:
        mov     eax,dword [esp+04h+014h]
; Line 2878:         return chrono::milliseconds(static_cast<chrono::milliseconds::rep>(__ms)); 
; Line 1080:                 : __rep_(__r) {} 
        mov     ecx,dword [esp+08h+014h]
        mov     edx,dword [esp+08h+04h+014h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
        mov     eax,dword [esp+04h+014h]
; Line 2879:     } 
L_46661:
        add     esp,byte 014h
        ret
@std@__1@literals@chrono_literals@$blit@ms$qg:
; Line 2882:     { 
        add     esp,byte 0ffffffech
L_46686:
        mov     eax,dword [esp+04h+014h]
; Line 2883:         return chrono::duration<long double, milli>(__ms); 
; Line 1080:                 : __rep_(__r) {} 
        movsd   xmm0,[esp+08h+014h]
        movsd   [eax],xmm0
        mov     eax,dword [esp+04h+014h]
; Line 2884:     } 
L_46687:
        add     esp,byte 014h
        ret
@std@__1@literals@chrono_literals@$blit@us$quL:
; Line 2888:     { 
        add     esp,byte 0ffffffech
L_46712:
        mov     eax,dword [esp+04h+014h]
; Line 2889:         return chrono::microseconds(static_cast<chrono::microseconds::rep>(__us)); 
; Line 1080:                 : __rep_(__r) {} 
        mov     ecx,dword [esp+08h+014h]
        mov     edx,dword [esp+08h+04h+014h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
        mov     eax,dword [esp+04h+014h]
; Line 2890:     } 
L_46713:
        add     esp,byte 014h
        ret
@std@__1@literals@chrono_literals@$blit@us$qg:
; Line 2893:     { 
        add     esp,byte 0ffffffech
L_46738:
        mov     eax,dword [esp+04h+014h]
; Line 2894:         return chrono::duration<long double, micro> (__us); 
; Line 1080:                 : __rep_(__r) {} 
        movsd   xmm0,[esp+08h+014h]
        movsd   [eax],xmm0
        mov     eax,dword [esp+04h+014h]
; Line 2895:     } 
L_46739:
        add     esp,byte 014h
        ret
@std@__1@literals@chrono_literals@$blit@ns$quL:
; Line 2899:     { 
        add     esp,byte 0ffffffech
L_46764:
        mov     eax,dword [esp+04h+014h]
; Line 2900:         return chrono::nanoseconds(static_cast<chrono::nanoseconds::rep>(__ns)); 
; Line 1080:                 : __rep_(__r) {} 
        mov     ecx,dword [esp+08h+014h]
        mov     edx,dword [esp+08h+04h+014h]
        mov     dword [eax],ecx
        mov     dword [eax+04h],edx
        mov     eax,dword [esp+04h+014h]
; Line 2901:     } 
L_46765:
        add     esp,byte 014h
        ret
@std@__1@literals@chrono_literals@$blit@ns$qg:
; Line 2904:     { 
        add     esp,byte 0ffffffech
L_46790:
        mov     eax,dword [esp+04h+014h]
; Line 2905:         return chrono::duration<long double, nano> (__ns); 
; Line 1080:                 : __rep_(__r) {} 
        movsd   xmm0,[esp+08h+014h]
        movsd   [eax],xmm0
        mov     eax,dword [esp+04h+014h]
; Line 2906:     } 
L_46791:
        add     esp,byte 014h
        ret
        section vsc@std@__1@error_code@$bdtr$qv virtual
        [bits 32]
@std@__1@error_code@$bdtr$qv:
L_46816:
L_46817:
        ret
section code
section code
        section vsc@std@__1@this_thread@get_id$qv virtual
        [bits 32]
@std@__1@this_thread@get_id$qv:
; Line 673: namespace this_thread 
        push    ecx
        push    ecx
        push    ebx
L_46822:
        mov     ebx,dword [esp+04h+0ch]
; Line 679: { 
; Line 680:     return __libcpp_thread_get_current_id(); 
        call    @std@__1@__libcpp_thread_get_current_id$qv
        mov     dword [ebx],eax
        mov     eax,dword [esp+04h+0ch]
; Line 681: } 
L_46823:
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@Resource@$bdtr$qv virtual
        [bits 32]
@Resource@$bdtr$qv:
; Line 73:     virtual ~Resource() {} 
        push    ecx
        push    ecx
        push    ecx
        push    ebx
L_46848:
        mov     ebx,dword [esp+04h+010h]
        mov     eax,ebx
        add     eax,byte 02ch
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bdtr$qv
        pop     ecx
L_46864:
        mov     eax,ebx
        add     eax,byte 014h
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bdtr$qv
        pop     ecx
L_46878:
L_46892:
L_46849:
        pop     ebx
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@Resource@ReadRC$qr6RCFile virtual
        [bits 32]
@Resource@ReadRC$qr6RCFile:
; Line 76:     virtual void ReadRC(RCFile& rcFile) {} 
L_46898:
L_46899:
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p17@Accelerators@Key#allocator$pn0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__split_buffer$p17@Accelerators@Key#allocator$pn0~~@$bdtr$qv:
        add     esp,0ffffff48h
        push    ebx
L_46906:
        mov     ebx,dword [esp+04h+0bch]
; Line 348:     clear(); 
        mov     ecx,ebx
        mov     eax,ecx
        mov     ecx,dword [ecx+08h]
        add     esp,byte 0fffffffch
        mov     edx,esp
        mov     dword [esp-0b0h+0c0h],00h
        push    ecx
        push    eax
        call    @std@__1@#__split_buffer$p17@Accelerators@Key#allocator$pn0~~@__destruct_at_end$qppn0#integral_constant$4bool3_Tp?0?~
        add     esp,byte 0ch
L_46991:
L_46946:
L_46929:
        cmp     dword [ebx+04h],byte 00h
        je      L_46909
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0b4h+0bch],eax
L_47056:
L_47057:
; Line 2315:   } 
        mov     eax,dword [ebx+04h]
        mov     ecx,ebx
        add     ecx,byte 010h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-0b8h+0bch],ecx
L_47121:
L_47122:
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_47155:
L_47140:
L_47009:
L_46909:
; Line 351: } 
L_47245:
L_47232:
L_47260:
L_47219:
L_47275:
L_46907:
        pop     ebx
        add     esp,0b8h
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p17@Accelerators@Key#allocator$pn0~~@__destruct_at_end$qppn0#integral_constant$4bool3_Tp?0?~ virtual
        [bits 32]
@std@__1@#__split_buffer$p17@Accelerators@Key#allocator$pn0~~@__destruct_at_end$qppn0#integral_constant$4bool3_Tp?0?~:
        add     esp,byte 0ffffff80h
        push    ebx
        push    esi
L_47281:
        mov     ebx,dword [esp+08h+088h]
        mov     esi,dword [esp+04h+088h]
; Line 302:     while (__new_last != __end_) 
        cmp     ebx,dword [esi+0ch]
        je      L_47285
L_47284:
        mov     eax,esi
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-07ch+088h],eax
        and     eax,eax
        je      L_47357
        mov     eax,dword [esp-07ch+088h]
        add     eax,byte 04h
        jmp     L_47358
L_47357:
        mov     eax,dword [esp-07ch+088h]
L_47358:
; Line 2315:   } 
        sub     dword [esi+0ch],byte 04h
        mov     ecx,dword [esi+0ch]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    ecx
        push    eax
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-080h+094h],00h
        call    @std@__1@#allocator_traits$#allocator$p17@Accelerators@Key~~@#__destroy$pn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$pn0~ppn0
        add     esp,byte 0ch
L_47450:
L_47437:
L_47310:
L_47286:
        cmp     ebx,dword [esi+0ch]
        jne     L_47284
L_47285:
; Line 304: } 
L_47282:
        pop     esi
        pop     ebx
        add     esp,080h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@$bctr$qv virtual
        [bits 32]
@std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@$bctr$qv:
; Line 1174:     : __start_(0), __size_(0, __default_init_tag()) {} 
        add     esp,byte 0ffffffech
        push    ebx
L_47458:
        mov     ebx,dword [esp+04h+018h]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__split_buffer$p17@Accelerators@Key#allocator$pn0~~@$bctr$qv
        pop     ecx
        mov     dword [ebx+01ch],00h
        mov     dword [esp-04h+018h],00h
        lea     eax,[esp-04h+018h]
        push    eax
        mov     dword [esp-08h+01ch],00h
        lea     eax,[esp-08h+01ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 020h
        push    eax
        call    @std@__1@#__compressed_pair$ui#allocator$17@Accelerators@Key~~@$bctr$ir18__default_init_tag~$qRirn1
        add     esp,byte 0ch
; Line 2198:   template <class _Up, class = typename enable_if< 
L_47508:
        mov     eax,ebx
L_47459:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@$bdtr$qv:
        add     esp,byte 0ffffff98h
        push    ebx
        push    esi
        push    edi
L_47514:
        mov     esi,dword [esp+04h+074h]
; Line 1184:     clear(); 
        mov     eax,esi
        push    eax
        call    @std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@clear$qv
        pop     ecx
        mov     eax,esi
        add     eax,byte 04h
        mov     ebx,dword [eax+08h]
        mov     eax,esi
        add     eax,byte 04h
        mov     edi,dword [eax+0ch]
; Line 1187:     for (; __i != __e; ++__i) 
        cmp     ebx,edi
        je      L_47519
L_47517:
        mov     eax,esi
        add     eax,byte 020h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-068h+074h],eax
L_47617:
L_47618:
; Line 2315:   } 
        mov     eax,dword [ebx]
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_47650:
L_47635:
L_47570:
L_47520:
        add     ebx,byte 04h
L_47518:
        cmp     ebx,edi
        jne     L_47517
L_47519:
; Line 1189: } 
L_47740:
L_47727:
L_47755:
L_47714:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__split_buffer$p17@Accelerators@Key#allocator$pn0~~@$bdtr$qv
        pop     ecx
L_47770:
L_47515:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 068h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@clear$qv virtual
        [bits 32]
@std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@clear$qv:
        add     esp,0fffffed4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_47776:
        mov     ebx,dword [esp+04h+013ch]
; Line 1245:     allocator_type& __a = __alloc(); 
        mov     eax,ebx
        add     eax,byte 020h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0120h+013ch],eax
        and     eax,eax
        je      L_47853
        mov     eax,dword [esp-0120h+013ch]
        add     eax,byte 04h
        jmp     L_47854
L_47853:
        mov     eax,dword [esp-0120h+013ch]
L_47854:
        mov     esi,eax
; Line 2315:   } 
; Line 1246:     for (iterator __i = begin(), __e = end(); __i != __e; ++__i) 
        mov     eax,ebx
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@begin$qv
        pop     ecx
        pop     ecx
        mov     eax,ebx
        push    eax
        lea     eax,[esp-018h+0140h]
        push    eax
        call    @std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@end$qv
        pop     ecx
        pop     ecx
        lea     eax,[esp-018h+013ch]
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @$bneq$qrx#__deque_iterator$17@Accelerators@Keypn0rn0ppn0ii?341?~rx#__deque_iterator$n0pn0rn0ppn0ii?341?~
        pop     ecx
        pop     ecx
        and     al,al
        je      L_47781
L_47779:
        mov     eax,esi
        mov     ecx,dword [esp-08h+04h+013ch]
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        push    ecx
        push    eax
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-0124h+0148h],00h
        call    @std@__1@#allocator_traits$#allocator$17@Accelerators@Key~~@#__destroy$n0~$q#integral_constant$4bool3_Tp?0?~r#allocator$n0~pn0
        add     esp,byte 0ch
L_47979:
L_47966:
L_47873:
L_47782:
; Line 323:         if (++__ptr_ - *__m_iter_ == __block_size) 
        mov     eax,dword [@std@__1@#__deque_iterator$17@Accelerators@Keypn0rn0ppn0ii?341?~@__block_size]
        add     dword [esp-08h+04h+013ch],byte 0ch
        mov     ecx,dword [esp-08h+013ch]
        mov     ecx,dword [ecx]
        sub     ecx,dword [esp-08h+04h+013ch]
        neg     ecx
        imul    ecx,dword 0aaaaaaabh
        sar     ecx,02h
        cmp     ecx,eax
        jne     L_47985
; Line 324:         { 
; Line 325:             ++__m_iter_; 
        add     dword [esp-08h+013ch],byte 04h
        mov     eax,dword [esp-08h+013ch]
        mov     eax,dword [eax]
        mov     dword [esp-08h+04h+013ch],eax
; Line 327:         } 
L_47985:
; Line 329:     } 
L_47780:
        lea     eax,[esp-018h+013ch]
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @$bneq$qrx#__deque_iterator$17@Accelerators@Keypn0rn0ppn0ii?341?~rx#__deque_iterator$n0pn0rn0ppn0ii?341?~
        pop     ecx
        pop     ecx
        and     al,al
        jne     L_47779
L_47781:
L_48018:
L_48032:
        mov     eax,ebx
        add     eax,byte 020h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0128h+013ch],eax
        and     eax,eax
        je      L_48080
        mov     eax,dword [esp-0128h+013ch]
        jmp     L_48081
L_48080:
        mov     eax,dword [esp-0128h+013ch]
L_48081:
; Line 2305:   } 
        mov     dword [eax],00h
        mov     esi,ebx
        add     esi,byte 04h
        mov     eax,esi
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 02h
        jbe     L_47788
L_47787:
; Line 1250:     { 
; Line 1251:         __alloc_traits::deallocate(__a, __map_.front(), __block_size); 
        mov     eax,esi
        mov     eax,dword [eax+08h]
        mov     eax,dword [eax]
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_48160:
L_48145:
L_48114:
        mov     eax,esi
        mov     edi,eax
        mov     ebp,dword [eax+08h]
        add     ebp,byte 04h
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-012ch+0140h],00h
        lea     eax,[esp-012ch+0140h]
        push    eax
        call    @std@__1@#__libcpp_trivial_destructor$p17@Accelerators@Key~@$bctr$qv
        pop     ecx
        push    ebp
        push    edi
        call    @std@__1@#__split_buffer$p17@Accelerators@Key#allocator$pn0~~@__destruct_at_begin$qppn0#integral_constant$4bool3_Tp?1?~
        add     esp,byte 0ch
        lea     eax,[esp-012ch+013ch]
        push    eax
        call    @std@__1@#__libcpp_trivial_destructor$p17@Accelerators@Key~@$bdtr$qv
        pop     ecx
L_48288:
L_48243:
L_48226:
; Line 1253:     } 
L_47789:
; Line 1249:     while (__map_.size() > 2) 
        mov     eax,esi
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 02h
        ja      L_47787
L_47788:
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 01h
        je      L_47799
        cmp     eax,byte 02h
        je      L_47801
        jmp     L_47804
; Line 1255:     { 
; Line 1256:     case 1: 
L_47799:
        mov     eax,dword [@std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@__block_size]
        mov     ecx,eax
        shr     ecx,01fh
        add     eax,ecx
        sar     eax,01h
        mov     dword [ebx+01ch],eax
; Line 1258:         break; 
        jmp     L_47796
L_47801:
        mov     eax,dword [@std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@__block_size]
        mov     dword [ebx+01ch],eax
; Line 1261:         break; 
L_47804:
L_47796:
; Line 1263: } 
L_47777:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,012ch
        ret
section code
section code
        section vsc@std@__1@#unique_ptr$12ResourceData#default_delete$n0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#unique_ptr$12ResourceData#default_delete$n0~~@$bdtr$qv:
; Line 2572:   ~unique_ptr() { reset(); } 
        add     esp,byte 0ffffffb4h
        push    ebx
L_48328:
        mov     eax,dword [esp+04h+050h]
        xor     edx,edx
; Line 2615:     pointer __tmp = __ptr_.first(); 
        mov     ecx,eax
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-044h+050h],ecx
        and     ecx,ecx
        je      L_48383
        mov     ecx,dword [esp-044h+050h]
        jmp     L_48384
L_48383:
        mov     ecx,dword [esp-044h+050h]
L_48384:
; Line 2305:   } 
        mov     ecx,dword [ecx]
        mov     ebx,eax
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-044h+050h],ebx
        and     ebx,ebx
        je      L_48417
        mov     ebx,dword [esp-044h+050h]
        jmp     L_48418
L_48417:
        mov     ebx,dword [esp-044h+050h]
L_48418:
; Line 2305:   } 
        mov     dword [ebx],edx
        and     ecx,ecx
        je      L_48334
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-048h+050h],eax
L_48466:
L_48467:
; Line 2315:   } 
; Line 2359:     static_assert(sizeof(_Tp) > 0, 
        mov     dword [esp-04ch+050h],ecx
        and     ecx,ecx
        je      L_48470
        mov     eax,dword [esp-04ch+050h]
        add     eax,byte 04h
        push    eax
        call    @std@__1@#unique_ptr$puc#default_delete$puc~~@$bdtr$qv
        pop     ecx
L_48484:
        mov     eax,dword [esp-04ch+050h]
        push    eax
        call    @$bdel$qpv
        pop     ecx
L_48470:
; Line 2364:   } 
; Line 2365: }; 
; Line 2365: }; 
L_48434:
L_48334:
; Line 2619:   } 
L_48351:
L_48526:
L_48513:
L_48541:
L_48500:
L_48329:
        pop     ebx
        add     esp,byte 04ch
        ret
section code
section code
        section vsc@std@__1@#unique_ptr$puc#default_delete$puc~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#unique_ptr$puc#default_delete$puc~~@$bdtr$qv:
; Line 2795:   ~unique_ptr() { reset(); } 
        add     esp,byte 0ffffffb8h
L_48548:
        mov     ecx,dword [esp+04h+048h]
; Line 2848:     pointer __tmp = __ptr_.first(); 
        mov     eax,ecx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-040h+048h],eax
        and     eax,eax
        je      L_48603
        mov     eax,dword [esp-040h+048h]
        jmp     L_48604
L_48603:
        mov     eax,dword [esp-040h+048h]
L_48604:
; Line 2305:   } 
        mov     eax,dword [eax]
        mov     edx,ecx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-040h+048h],edx
        and     edx,edx
        je      L_48637
        mov     edx,dword [esp-040h+048h]
        jmp     L_48638
L_48637:
        mov     edx,dword [esp-040h+048h]
L_48638:
; Line 2305:   } 
        mov     dword [edx],00h
        and     eax,eax
        je      L_48554
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-044h+048h],ecx
L_48686:
L_48687:
; Line 2315:   } 
; Line 2390:     static_assert(sizeof(_Tp) > 0, 
        mov     dword [esp-048h+048h],eax
        and     eax,eax
        je      L_48690
        mov     eax,dword [esp-048h+048h]
        push    eax
        call    @$bdla$qpv
        pop     ecx
L_48690:
; Line 2395:   } 
; Line 2396: }; 
; Line 2396: }; 
L_48654:
L_48554:
; Line 2852:   } 
L_48571:
L_48730:
L_48717:
L_48745:
L_48704:
L_48549:
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$pp4Icon#allocator$ppn0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__split_buffer$pp4Icon#allocator$ppn0~~@$bdtr$qv:
        add     esp,0ffffff48h
        push    ebx
L_48752:
        mov     ebx,dword [esp+04h+0bch]
; Line 348:     clear(); 
        mov     ecx,ebx
        mov     eax,ecx
        mov     ecx,dword [ecx+08h]
        add     esp,byte 0fffffffch
        mov     edx,esp
        mov     dword [esp-0b0h+0c0h],00h
        push    ecx
        push    eax
        call    @std@__1@#__split_buffer$pp4Icon#allocator$ppn0~~@__destruct_at_end$qpppn0#integral_constant$4bool3_Tp?0?~
        add     esp,byte 0ch
L_48837:
L_48792:
L_48775:
        cmp     dword [ebx+04h],byte 00h
        je      L_48755
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0b4h+0bch],eax
L_48902:
L_48903:
; Line 2315:   } 
        mov     eax,dword [ebx+04h]
        mov     ecx,ebx
        add     ecx,byte 010h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-0b8h+0bch],ecx
L_48967:
L_48968:
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_49001:
L_48986:
L_48855:
L_48755:
; Line 351: } 
L_49091:
L_49078:
L_49106:
L_49065:
L_49121:
L_48753:
        pop     ebx
        add     esp,0b8h
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$pp4Icon#allocator$ppn0~~@__destruct_at_end$qpppn0#integral_constant$4bool3_Tp?0?~ virtual
        [bits 32]
@std@__1@#__split_buffer$pp4Icon#allocator$ppn0~~@__destruct_at_end$qpppn0#integral_constant$4bool3_Tp?0?~:
        add     esp,byte 0ffffff80h
        push    ebx
        push    esi
L_49127:
        mov     ebx,dword [esp+08h+088h]
        mov     esi,dword [esp+04h+088h]
; Line 302:     while (__new_last != __end_) 
        cmp     ebx,dword [esi+0ch]
        je      L_49131
L_49130:
        mov     eax,esi
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-07ch+088h],eax
        and     eax,eax
        je      L_49203
        mov     eax,dword [esp-07ch+088h]
        add     eax,byte 04h
        jmp     L_49204
L_49203:
        mov     eax,dword [esp-07ch+088h]
L_49204:
; Line 2315:   } 
        sub     dword [esi+0ch],byte 04h
        mov     ecx,dword [esi+0ch]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    ecx
        push    eax
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-080h+094h],00h
        call    @std@__1@#allocator_traits$#allocator$pp4Icon~~@#__destroy$ppn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$ppn0~pppn0
        add     esp,byte 0ch
L_49296:
L_49283:
L_49156:
L_49132:
        cmp     ebx,dword [esi+0ch]
        jne     L_49130
L_49131:
; Line 304: } 
L_49128:
        pop     esi
        pop     ebx
        add     esp,080h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$p4Icon#allocator$pn0~~@$bctr$qv virtual
        [bits 32]
@std@__1@#__deque_base$p4Icon#allocator$pn0~~@$bctr$qv:
; Line 1174:     : __start_(0), __size_(0, __default_init_tag()) {} 
        add     esp,byte 0ffffffech
        push    ebx
L_49304:
        mov     ebx,dword [esp+04h+018h]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__split_buffer$pp4Icon#allocator$ppn0~~@$bctr$qv
        pop     ecx
        mov     dword [ebx+01ch],00h
        mov     dword [esp-04h+018h],00h
        lea     eax,[esp-04h+018h]
        push    eax
        mov     dword [esp-08h+01ch],00h
        lea     eax,[esp-08h+01ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 020h
        push    eax
        call    @std@__1@#__compressed_pair$ui#allocator$p4Icon~~@$bctr$ir18__default_init_tag~$qRirn1
        add     esp,byte 0ch
; Line 2198:   template <class _Up, class = typename enable_if< 
L_49354:
        mov     eax,ebx
L_49305:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$p4Icon#allocator$pn0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__deque_base$p4Icon#allocator$pn0~~@$bdtr$qv:
        add     esp,byte 0ffffff98h
        push    ebx
        push    esi
        push    edi
L_49360:
        mov     esi,dword [esp+04h+074h]
; Line 1184:     clear(); 
        mov     eax,esi
        push    eax
        call    @std@__1@#__deque_base$p4Icon#allocator$pn0~~@clear$qv
        pop     ecx
        mov     eax,esi
        add     eax,byte 04h
        mov     ebx,dword [eax+08h]
        mov     eax,esi
        add     eax,byte 04h
        mov     edi,dword [eax+0ch]
; Line 1187:     for (; __i != __e; ++__i) 
        cmp     ebx,edi
        je      L_49365
L_49363:
        mov     eax,esi
        add     eax,byte 020h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-068h+074h],eax
L_49463:
L_49464:
; Line 2315:   } 
        mov     eax,dword [ebx]
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_49496:
L_49481:
L_49416:
L_49366:
        add     ebx,byte 04h
L_49364:
        cmp     ebx,edi
        jne     L_49363
L_49365:
; Line 1189: } 
L_49586:
L_49573:
L_49601:
L_49560:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__split_buffer$pp4Icon#allocator$ppn0~~@$bdtr$qv
        pop     ecx
L_49616:
L_49361:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 068h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$p4Icon#allocator$pn0~~@clear$qv virtual
        [bits 32]
@std@__1@#__deque_base$p4Icon#allocator$pn0~~@clear$qv:
        add     esp,0fffffed4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_49622:
        mov     ebx,dword [esp+04h+013ch]
; Line 1245:     allocator_type& __a = __alloc(); 
        mov     eax,ebx
        add     eax,byte 020h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0120h+013ch],eax
        and     eax,eax
        je      L_49699
        mov     eax,dword [esp-0120h+013ch]
        add     eax,byte 04h
        jmp     L_49700
L_49699:
        mov     eax,dword [esp-0120h+013ch]
L_49700:
        mov     esi,eax
; Line 2315:   } 
; Line 1246:     for (iterator __i = begin(), __e = end(); __i != __e; ++__i) 
        mov     eax,ebx
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @std@__1@#__deque_base$p4Icon#allocator$pn0~~@begin$qv
        pop     ecx
        pop     ecx
        mov     eax,ebx
        push    eax
        lea     eax,[esp-018h+0140h]
        push    eax
        call    @std@__1@#__deque_base$p4Icon#allocator$pn0~~@end$qv
        pop     ecx
        pop     ecx
        lea     eax,[esp-018h+013ch]
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @$bneq$qrx#__deque_iterator$p4Iconppn0rpn0pppn0ii?1024?~rx#__deque_iterator$pn0ppn0rpn0pppn0ii?1024?~
        pop     ecx
        pop     ecx
        and     al,al
        je      L_49627
L_49625:
        mov     eax,esi
        mov     ecx,dword [esp-08h+04h+013ch]
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        push    ecx
        push    eax
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-0124h+0148h],00h
        call    @std@__1@#allocator_traits$#allocator$p4Icon~~@#__destroy$pn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$pn0~ppn0
        add     esp,byte 0ch
L_49825:
L_49812:
L_49719:
L_49628:
; Line 323:         if (++__ptr_ - *__m_iter_ == __block_size) 
        mov     eax,dword [@std@__1@#__deque_iterator$p4Iconppn0rpn0pppn0ii?1024?~@__block_size]
        add     dword [esp-08h+04h+013ch],byte 04h
        mov     ecx,dword [esp-08h+013ch]
        mov     ecx,dword [ecx]
        sub     ecx,dword [esp-08h+04h+013ch]
        neg     ecx
        imul    ecx,byte 01h
        sar     ecx,02h
        cmp     ecx,eax
        jne     L_49831
; Line 324:         { 
; Line 325:             ++__m_iter_; 
        add     dword [esp-08h+013ch],byte 04h
        mov     eax,dword [esp-08h+013ch]
        mov     eax,dword [eax]
        mov     dword [esp-08h+04h+013ch],eax
; Line 327:         } 
L_49831:
; Line 329:     } 
L_49626:
        lea     eax,[esp-018h+013ch]
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @$bneq$qrx#__deque_iterator$p4Iconppn0rpn0pppn0ii?1024?~rx#__deque_iterator$pn0ppn0rpn0pppn0ii?1024?~
        pop     ecx
        pop     ecx
        and     al,al
        jne     L_49625
L_49627:
L_49864:
L_49878:
        mov     eax,ebx
        add     eax,byte 020h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0128h+013ch],eax
        and     eax,eax
        je      L_49926
        mov     eax,dword [esp-0128h+013ch]
        jmp     L_49927
L_49926:
        mov     eax,dword [esp-0128h+013ch]
L_49927:
; Line 2305:   } 
        mov     dword [eax],00h
        mov     esi,ebx
        add     esi,byte 04h
        mov     eax,esi
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 02h
        jbe     L_49634
L_49633:
; Line 1250:     { 
; Line 1251:         __alloc_traits::deallocate(__a, __map_.front(), __block_size); 
        mov     eax,esi
        mov     eax,dword [eax+08h]
        mov     eax,dword [eax]
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_50006:
L_49991:
L_49960:
        mov     eax,esi
        mov     edi,eax
        mov     ebp,dword [eax+08h]
        add     ebp,byte 04h
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-012ch+0140h],00h
        lea     eax,[esp-012ch+0140h]
        push    eax
        call    @std@__1@#__libcpp_trivial_destructor$pp4Icon~@$bctr$qv
        pop     ecx
        push    ebp
        push    edi
        call    @std@__1@#__split_buffer$pp4Icon#allocator$ppn0~~@__destruct_at_begin$qpppn0#integral_constant$4bool3_Tp?1?~
        add     esp,byte 0ch
        lea     eax,[esp-012ch+013ch]
        push    eax
        call    @std@__1@#__libcpp_trivial_destructor$pp4Icon~@$bdtr$qv
        pop     ecx
L_50134:
L_50089:
L_50072:
; Line 1253:     } 
L_49635:
; Line 1249:     while (__map_.size() > 2) 
        mov     eax,esi
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 02h
        ja      L_49633
L_49634:
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 01h
        je      L_49645
        cmp     eax,byte 02h
        je      L_49647
        jmp     L_49650
; Line 1255:     { 
; Line 1256:     case 1: 
L_49645:
        mov     eax,dword [@std@__1@#__deque_base$p4Icon#allocator$pn0~~@__block_size]
        mov     ecx,eax
        shr     ecx,01fh
        add     eax,ecx
        sar     eax,01h
        mov     dword [ebx+01ch],eax
; Line 1258:         break; 
        jmp     L_49642
L_49647:
        mov     eax,dword [@std@__1@#__deque_base$p4Icon#allocator$pn0~~@__block_size]
        mov     dword [ebx+01ch],eax
; Line 1261:         break; 
L_49650:
L_49642:
; Line 1263: } 
L_49623:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,012ch
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$pp6Cursor#allocator$ppn0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__split_buffer$pp6Cursor#allocator$ppn0~~@$bdtr$qv:
        add     esp,0ffffff48h
        push    ebx
L_50174:
        mov     ebx,dword [esp+04h+0bch]
; Line 348:     clear(); 
        mov     ecx,ebx
        mov     eax,ecx
        mov     ecx,dword [ecx+08h]
        add     esp,byte 0fffffffch
        mov     edx,esp
        mov     dword [esp-0b0h+0c0h],00h
        push    ecx
        push    eax
        call    @std@__1@#__split_buffer$pp6Cursor#allocator$ppn0~~@__destruct_at_end$qpppn0#integral_constant$4bool3_Tp?0?~
        add     esp,byte 0ch
L_50259:
L_50214:
L_50197:
        cmp     dword [ebx+04h],byte 00h
        je      L_50177
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0b4h+0bch],eax
L_50324:
L_50325:
; Line 2315:   } 
        mov     eax,dword [ebx+04h]
        mov     ecx,ebx
        add     ecx,byte 010h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-0b8h+0bch],ecx
L_50389:
L_50390:
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_50423:
L_50408:
L_50277:
L_50177:
; Line 351: } 
L_50513:
L_50500:
L_50528:
L_50487:
L_50543:
L_50175:
        pop     ebx
        add     esp,0b8h
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$pp6Cursor#allocator$ppn0~~@__destruct_at_end$qpppn0#integral_constant$4bool3_Tp?0?~ virtual
        [bits 32]
@std@__1@#__split_buffer$pp6Cursor#allocator$ppn0~~@__destruct_at_end$qpppn0#integral_constant$4bool3_Tp?0?~:
        add     esp,byte 0ffffff80h
        push    ebx
        push    esi
L_50549:
        mov     ebx,dword [esp+08h+088h]
        mov     esi,dword [esp+04h+088h]
; Line 302:     while (__new_last != __end_) 
        cmp     ebx,dword [esi+0ch]
        je      L_50553
L_50552:
        mov     eax,esi
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-07ch+088h],eax
        and     eax,eax
        je      L_50625
        mov     eax,dword [esp-07ch+088h]
        add     eax,byte 04h
        jmp     L_50626
L_50625:
        mov     eax,dword [esp-07ch+088h]
L_50626:
; Line 2315:   } 
        sub     dword [esi+0ch],byte 04h
        mov     ecx,dword [esi+0ch]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    ecx
        push    eax
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-080h+094h],00h
        call    @std@__1@#allocator_traits$#allocator$pp6Cursor~~@#__destroy$ppn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$ppn0~pppn0
        add     esp,byte 0ch
L_50718:
L_50705:
L_50578:
L_50554:
        cmp     ebx,dword [esi+0ch]
        jne     L_50552
L_50553:
; Line 304: } 
L_50550:
        pop     esi
        pop     ebx
        add     esp,080h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$p6Cursor#allocator$pn0~~@$bctr$qv virtual
        [bits 32]
@std@__1@#__deque_base$p6Cursor#allocator$pn0~~@$bctr$qv:
; Line 1174:     : __start_(0), __size_(0, __default_init_tag()) {} 
        add     esp,byte 0ffffffech
        push    ebx
L_50726:
        mov     ebx,dword [esp+04h+018h]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__split_buffer$pp6Cursor#allocator$ppn0~~@$bctr$qv
        pop     ecx
        mov     dword [ebx+01ch],00h
        mov     dword [esp-04h+018h],00h
        lea     eax,[esp-04h+018h]
        push    eax
        mov     dword [esp-08h+01ch],00h
        lea     eax,[esp-08h+01ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 020h
        push    eax
        call    @std@__1@#__compressed_pair$ui#allocator$p6Cursor~~@$bctr$ir18__default_init_tag~$qRirn1
        add     esp,byte 0ch
; Line 2198:   template <class _Up, class = typename enable_if< 
L_50776:
        mov     eax,ebx
L_50727:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$p6Cursor#allocator$pn0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__deque_base$p6Cursor#allocator$pn0~~@$bdtr$qv:
        add     esp,byte 0ffffff98h
        push    ebx
        push    esi
        push    edi
L_50782:
        mov     esi,dword [esp+04h+074h]
; Line 1184:     clear(); 
        mov     eax,esi
        push    eax
        call    @std@__1@#__deque_base$p6Cursor#allocator$pn0~~@clear$qv
        pop     ecx
        mov     eax,esi
        add     eax,byte 04h
        mov     ebx,dword [eax+08h]
        mov     eax,esi
        add     eax,byte 04h
        mov     edi,dword [eax+0ch]
; Line 1187:     for (; __i != __e; ++__i) 
        cmp     ebx,edi
        je      L_50787
L_50785:
        mov     eax,esi
        add     eax,byte 020h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-068h+074h],eax
L_50885:
L_50886:
; Line 2315:   } 
        mov     eax,dword [ebx]
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_50918:
L_50903:
L_50838:
L_50788:
        add     ebx,byte 04h
L_50786:
        cmp     ebx,edi
        jne     L_50785
L_50787:
; Line 1189: } 
L_51008:
L_50995:
L_51023:
L_50982:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__split_buffer$pp6Cursor#allocator$ppn0~~@$bdtr$qv
        pop     ecx
L_51038:
L_50783:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 068h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$p6Cursor#allocator$pn0~~@clear$qv virtual
        [bits 32]
@std@__1@#__deque_base$p6Cursor#allocator$pn0~~@clear$qv:
        add     esp,0fffffed4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_51044:
        mov     ebx,dword [esp+04h+013ch]
; Line 1245:     allocator_type& __a = __alloc(); 
        mov     eax,ebx
        add     eax,byte 020h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0120h+013ch],eax
        and     eax,eax
        je      L_51121
        mov     eax,dword [esp-0120h+013ch]
        add     eax,byte 04h
        jmp     L_51122
L_51121:
        mov     eax,dword [esp-0120h+013ch]
L_51122:
        mov     esi,eax
; Line 2315:   } 
; Line 1246:     for (iterator __i = begin(), __e = end(); __i != __e; ++__i) 
        mov     eax,ebx
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @std@__1@#__deque_base$p6Cursor#allocator$pn0~~@begin$qv
        pop     ecx
        pop     ecx
        mov     eax,ebx
        push    eax
        lea     eax,[esp-018h+0140h]
        push    eax
        call    @std@__1@#__deque_base$p6Cursor#allocator$pn0~~@end$qv
        pop     ecx
        pop     ecx
        lea     eax,[esp-018h+013ch]
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @$bneq$qrx#__deque_iterator$p6Cursorppn0rpn0pppn0ii?1024?~rx#__deque_iterator$pn0ppn0rpn0pppn0ii?1024?~
        pop     ecx
        pop     ecx
        and     al,al
        je      L_51049
L_51047:
        mov     eax,esi
        mov     ecx,dword [esp-08h+04h+013ch]
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        push    ecx
        push    eax
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-0124h+0148h],00h
        call    @std@__1@#allocator_traits$#allocator$p6Cursor~~@#__destroy$pn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$pn0~ppn0
        add     esp,byte 0ch
L_51247:
L_51234:
L_51141:
L_51050:
; Line 323:         if (++__ptr_ - *__m_iter_ == __block_size) 
        mov     eax,dword [@std@__1@#__deque_iterator$p6Cursorppn0rpn0pppn0ii?1024?~@__block_size]
        add     dword [esp-08h+04h+013ch],byte 04h
        mov     ecx,dword [esp-08h+013ch]
        mov     ecx,dword [ecx]
        sub     ecx,dword [esp-08h+04h+013ch]
        neg     ecx
        imul    ecx,byte 01h
        sar     ecx,02h
        cmp     ecx,eax
        jne     L_51253
; Line 324:         { 
; Line 325:             ++__m_iter_; 
        add     dword [esp-08h+013ch],byte 04h
        mov     eax,dword [esp-08h+013ch]
        mov     eax,dword [eax]
        mov     dword [esp-08h+04h+013ch],eax
; Line 327:         } 
L_51253:
; Line 329:     } 
L_51048:
        lea     eax,[esp-018h+013ch]
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @$bneq$qrx#__deque_iterator$p6Cursorppn0rpn0pppn0ii?1024?~rx#__deque_iterator$pn0ppn0rpn0pppn0ii?1024?~
        pop     ecx
        pop     ecx
        and     al,al
        jne     L_51047
L_51049:
L_51286:
L_51300:
        mov     eax,ebx
        add     eax,byte 020h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0128h+013ch],eax
        and     eax,eax
        je      L_51348
        mov     eax,dword [esp-0128h+013ch]
        jmp     L_51349
L_51348:
        mov     eax,dword [esp-0128h+013ch]
L_51349:
; Line 2305:   } 
        mov     dword [eax],00h
        mov     esi,ebx
        add     esi,byte 04h
        mov     eax,esi
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 02h
        jbe     L_51056
L_51055:
; Line 1250:     { 
; Line 1251:         __alloc_traits::deallocate(__a, __map_.front(), __block_size); 
        mov     eax,esi
        mov     eax,dword [eax+08h]
        mov     eax,dword [eax]
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_51428:
L_51413:
L_51382:
        mov     eax,esi
        mov     edi,eax
        mov     ebp,dword [eax+08h]
        add     ebp,byte 04h
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-012ch+0140h],00h
        lea     eax,[esp-012ch+0140h]
        push    eax
        call    @std@__1@#__libcpp_trivial_destructor$pp6Cursor~@$bctr$qv
        pop     ecx
        push    ebp
        push    edi
        call    @std@__1@#__split_buffer$pp6Cursor#allocator$ppn0~~@__destruct_at_begin$qpppn0#integral_constant$4bool3_Tp?1?~
        add     esp,byte 0ch
        lea     eax,[esp-012ch+013ch]
        push    eax
        call    @std@__1@#__libcpp_trivial_destructor$pp6Cursor~@$bdtr$qv
        pop     ecx
L_51556:
L_51511:
L_51494:
; Line 1253:     } 
L_51057:
; Line 1249:     while (__map_.size() > 2) 
        mov     eax,esi
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 02h
        ja      L_51055
L_51056:
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 01h
        je      L_51067
        cmp     eax,byte 02h
        je      L_51069
        jmp     L_51072
; Line 1255:     { 
; Line 1256:     case 1: 
L_51067:
        mov     eax,dword [@std@__1@#__deque_base$p6Cursor#allocator$pn0~~@__block_size]
        mov     ecx,eax
        shr     ecx,01fh
        add     eax,ecx
        sar     eax,01h
        mov     dword [ebx+01ch],eax
; Line 1258:         break; 
        jmp     L_51064
L_51069:
        mov     eax,dword [@std@__1@#__deque_base$p6Cursor#allocator$pn0~~@__block_size]
        mov     dword [ebx+01ch],eax
; Line 1261:         break; 
L_51072:
L_51064:
; Line 1263: } 
L_51045:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,012ch
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__split_buffer$p#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv:
        add     esp,0ffffff48h
        push    ebx
L_51596:
        mov     ebx,dword [esp+04h+0bch]
; Line 348:     clear(); 
        mov     ecx,ebx
        mov     eax,ecx
        mov     ecx,dword [ecx+08h]
        add     esp,byte 0fffffffch
        mov     edx,esp
        mov     dword [esp-0b0h+0c0h],00h
        push    ecx
        push    eax
        call    @std@__1@#__split_buffer$p#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_end$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?0?~
        add     esp,byte 0ch
L_51681:
L_51636:
L_51619:
        cmp     dword [ebx+04h],byte 00h
        je      L_51599
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0b4h+0bch],eax
L_51746:
L_51747:
; Line 2315:   } 
        mov     eax,dword [ebx+04h]
        mov     ecx,ebx
        add     ecx,byte 010h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-0b8h+0bch],ecx
L_51811:
L_51812:
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_51845:
L_51830:
L_51699:
L_51599:
; Line 351: } 
L_51935:
L_51922:
L_51950:
L_51909:
L_51965:
L_51597:
        pop     ebx
        add     esp,0b8h
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_end$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?0?~ virtual
        [bits 32]
@std@__1@#__split_buffer$p#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_end$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?0?~:
        add     esp,byte 0ffffff80h
        push    ebx
        push    esi
L_51971:
        mov     ebx,dword [esp+08h+088h]
        mov     esi,dword [esp+04h+088h]
; Line 302:     while (__new_last != __end_) 
        cmp     ebx,dword [esi+0ch]
        je      L_51975
L_51974:
        mov     eax,esi
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-07ch+088h],eax
        and     eax,eax
        je      L_52047
        mov     eax,dword [esp-07ch+088h]
        add     eax,byte 04h
        jmp     L_52048
L_52047:
        mov     eax,dword [esp-07ch+088h]
L_52048:
; Line 2315:   } 
        sub     dword [esi+0ch],byte 04h
        mov     ecx,dword [esi+0ch]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    ecx
        push    eax
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-080h+094h],00h
        call    @std@__1@#allocator_traits$#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~
        add     esp,byte 0ch
L_52140:
L_52127:
L_52000:
L_51976:
        cmp     ebx,dword [esi+0ch]
        jne     L_51974
L_51975:
; Line 304: } 
L_51972:
        pop     esi
        pop     ebx
        add     esp,080h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv:
; Line 1174:     : __start_(0), __size_(0, __default_init_tag()) {} 
        add     esp,byte 0ffffffech
        push    ebx
L_52148:
        mov     ebx,dword [esp+04h+018h]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__split_buffer$p#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv
        pop     ecx
        mov     dword [ebx+01ch],00h
        mov     dword [esp-04h+018h],00h
        lea     eax,[esp-04h+018h]
        push    eax
        mov     dword [esp-08h+01ch],00h
        lea     eax,[esp-08h+01ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 020h
        push    eax
        call    @std@__1@#__compressed_pair$ui#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~~@$bctr$ir18__default_init_tag~$qRirn1
        add     esp,byte 0ch
; Line 2198:   template <class _Up, class = typename enable_if< 
L_52198:
        mov     eax,ebx
L_52149:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv:
        add     esp,byte 0ffffff98h
        push    ebx
        push    esi
        push    edi
L_52204:
        mov     esi,dword [esp+04h+074h]
; Line 1184:     clear(); 
        mov     eax,esi
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@clear$qv
        pop     ecx
        mov     eax,esi
        add     eax,byte 04h
        mov     ebx,dword [eax+08h]
        mov     eax,esi
        add     eax,byte 04h
        mov     edi,dword [eax+0ch]
; Line 1187:     for (; __i != __e; ++__i) 
        cmp     ebx,edi
        je      L_52209
L_52207:
        mov     eax,esi
        add     eax,byte 020h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-068h+074h],eax
L_52307:
L_52308:
; Line 2315:   } 
        mov     eax,dword [ebx]
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_52340:
L_52325:
L_52260:
L_52210:
        add     ebx,byte 04h
L_52208:
        cmp     ebx,edi
        jne     L_52207
L_52209:
; Line 1189: } 
L_52430:
L_52417:
L_52445:
L_52404:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__split_buffer$p#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv
        pop     ecx
L_52460:
L_52205:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 068h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@clear$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@clear$qv:
        add     esp,0fffffed4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_52466:
        mov     ebx,dword [esp+04h+013ch]
; Line 1245:     allocator_type& __a = __alloc(); 
        mov     eax,ebx
        add     eax,byte 020h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0120h+013ch],eax
        and     eax,eax
        je      L_52543
        mov     eax,dword [esp-0120h+013ch]
        add     eax,byte 04h
        jmp     L_52544
L_52543:
        mov     eax,dword [esp-0120h+013ch]
L_52544:
        mov     esi,eax
; Line 2315:   } 
; Line 1246:     for (iterator __i = begin(), __e = end(); __i != __e; ++__i) 
        mov     eax,ebx
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@begin$qv
        pop     ecx
        pop     ecx
        mov     eax,ebx
        push    eax
        lea     eax,[esp-018h+0140h]
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@end$qv
        pop     ecx
        pop     ecx
        lea     eax,[esp-018h+013ch]
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @$bneq$qrx#__deque_iterator$#unique_ptr$12ResourceData#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~
        pop     ecx
        pop     ecx
        and     al,al
        je      L_52471
L_52469:
        mov     eax,esi
        mov     ecx,dword [esp-08h+04h+013ch]
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        push    ecx
        push    eax
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-0124h+0148h],00h
        call    @std@__1@#allocator_traits$#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~
        add     esp,byte 0ch
L_52669:
L_52656:
L_52563:
L_52472:
; Line 323:         if (++__ptr_ - *__m_iter_ == __block_size) 
        mov     eax,dword [@std@__1@#__deque_iterator$#unique_ptr$12ResourceData#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~@__block_size]
        add     dword [esp-08h+04h+013ch],byte 08h
        mov     ecx,dword [esp-08h+013ch]
        mov     ecx,dword [ecx]
        sub     ecx,dword [esp-08h+04h+013ch]
        neg     ecx
        imul    ecx,byte 01h
        sar     ecx,03h
        cmp     ecx,eax
        jne     L_52675
; Line 324:         { 
; Line 325:             ++__m_iter_; 
        add     dword [esp-08h+013ch],byte 04h
        mov     eax,dword [esp-08h+013ch]
        mov     eax,dword [eax]
        mov     dword [esp-08h+04h+013ch],eax
; Line 327:         } 
L_52675:
; Line 329:     } 
L_52470:
        lea     eax,[esp-018h+013ch]
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @$bneq$qrx#__deque_iterator$#unique_ptr$12ResourceData#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~
        pop     ecx
        pop     ecx
        and     al,al
        jne     L_52469
L_52471:
L_52708:
L_52722:
        mov     eax,ebx
        add     eax,byte 020h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0128h+013ch],eax
        and     eax,eax
        je      L_52770
        mov     eax,dword [esp-0128h+013ch]
        jmp     L_52771
L_52770:
        mov     eax,dword [esp-0128h+013ch]
L_52771:
; Line 2305:   } 
        mov     dword [eax],00h
        mov     esi,ebx
        add     esi,byte 04h
        mov     eax,esi
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 02h
        jbe     L_52478
L_52477:
; Line 1250:     { 
; Line 1251:         __alloc_traits::deallocate(__a, __map_.front(), __block_size); 
        mov     eax,esi
        mov     eax,dword [eax+08h]
        mov     eax,dword [eax]
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_52850:
L_52835:
L_52804:
        mov     eax,esi
        mov     edi,eax
        mov     ebp,dword [eax+08h]
        add     ebp,byte 04h
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-012ch+0140h],00h
        lea     eax,[esp-012ch+0140h]
        push    eax
        call    @std@__1@#__libcpp_trivial_destructor$p#unique_ptr$12ResourceData#default_delete$n0~~~@$bctr$qv
        pop     ecx
        push    ebp
        push    edi
        call    @std@__1@#__split_buffer$p#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~
        add     esp,byte 0ch
        lea     eax,[esp-012ch+013ch]
        push    eax
        call    @std@__1@#__libcpp_trivial_destructor$p#unique_ptr$12ResourceData#default_delete$n0~~~@$bdtr$qv
        pop     ecx
L_52978:
L_52933:
L_52916:
; Line 1253:     } 
L_52479:
; Line 1249:     while (__map_.size() > 2) 
        mov     eax,esi
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 02h
        ja      L_52477
L_52478:
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 01h
        je      L_52489
        cmp     eax,byte 02h
        je      L_52491
        jmp     L_52494
; Line 1255:     { 
; Line 1256:     case 1: 
L_52489:
        mov     eax,dword [@std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size]
        mov     ecx,eax
        shr     ecx,01fh
        add     eax,ecx
        sar     eax,01h
        mov     dword [ebx+01ch],eax
; Line 1258:         break; 
        jmp     L_52486
L_52491:
        mov     eax,dword [@std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size]
        mov     dword [ebx+01ch],eax
; Line 1261:         break; 
L_52494:
L_52486:
; Line 1263: } 
L_52467:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,012ch
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__split_buffer$p#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv:
        add     esp,0ffffff48h
        push    ebx
L_53018:
        mov     ebx,dword [esp+04h+0bch]
; Line 348:     clear(); 
        mov     ecx,ebx
        mov     eax,ecx
        mov     ecx,dword [ecx+08h]
        add     esp,byte 0fffffffch
        mov     edx,esp
        mov     dword [esp-0b0h+0c0h],00h
        push    ecx
        push    eax
        call    @std@__1@#__split_buffer$p#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_end$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?0?~
        add     esp,byte 0ch
L_53103:
L_53058:
L_53041:
        cmp     dword [ebx+04h],byte 00h
        je      L_53021
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0b4h+0bch],eax
L_53168:
L_53169:
; Line 2315:   } 
        mov     eax,dword [ebx+04h]
        mov     ecx,ebx
        add     ecx,byte 010h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-0b8h+0bch],ecx
L_53233:
L_53234:
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_53267:
L_53252:
L_53121:
L_53021:
; Line 351: } 
L_53357:
L_53344:
L_53372:
L_53331:
L_53387:
L_53019:
        pop     ebx
        add     esp,0b8h
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_end$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?0?~ virtual
        [bits 32]
@std@__1@#__split_buffer$p#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_end$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?0?~:
        add     esp,byte 0ffffff80h
        push    ebx
        push    esi
L_53393:
        mov     ebx,dword [esp+08h+088h]
        mov     esi,dword [esp+04h+088h]
; Line 302:     while (__new_last != __end_) 
        cmp     ebx,dword [esi+0ch]
        je      L_53397
L_53396:
        mov     eax,esi
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-07ch+088h],eax
        and     eax,eax
        je      L_53469
        mov     eax,dword [esp-07ch+088h]
        add     eax,byte 04h
        jmp     L_53470
L_53469:
        mov     eax,dword [esp-07ch+088h]
L_53470:
; Line 2315:   } 
        sub     dword [esi+0ch],byte 04h
        mov     ecx,dword [esi+0ch]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    ecx
        push    eax
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-080h+094h],00h
        call    @std@__1@#allocator_traits$#allocator$p#unique_ptr$7Control#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~
        add     esp,byte 0ch
L_53562:
L_53549:
L_53422:
L_53398:
        cmp     ebx,dword [esi+0ch]
        jne     L_53396
L_53397:
; Line 304: } 
L_53394:
        pop     esi
        pop     ebx
        add     esp,080h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv:
; Line 1174:     : __start_(0), __size_(0, __default_init_tag()) {} 
        add     esp,byte 0ffffffech
        push    ebx
L_53570:
        mov     ebx,dword [esp+04h+018h]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__split_buffer$p#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv
        pop     ecx
        mov     dword [ebx+01ch],00h
        mov     dword [esp-04h+018h],00h
        lea     eax,[esp-04h+018h]
        push    eax
        mov     dword [esp-08h+01ch],00h
        lea     eax,[esp-08h+01ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 020h
        push    eax
        call    @std@__1@#__compressed_pair$ui#allocator$#unique_ptr$7Control#default_delete$n0~~~~@$bctr$ir18__default_init_tag~$qRirn1
        add     esp,byte 0ch
; Line 2198:   template <class _Up, class = typename enable_if< 
L_53620:
        mov     eax,ebx
L_53571:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv:
        add     esp,byte 0ffffff98h
        push    ebx
        push    esi
        push    edi
L_53626:
        mov     esi,dword [esp+04h+074h]
; Line 1184:     clear(); 
        mov     eax,esi
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@clear$qv
        pop     ecx
        mov     eax,esi
        add     eax,byte 04h
        mov     ebx,dword [eax+08h]
        mov     eax,esi
        add     eax,byte 04h
        mov     edi,dword [eax+0ch]
; Line 1187:     for (; __i != __e; ++__i) 
        cmp     ebx,edi
        je      L_53631
L_53629:
        mov     eax,esi
        add     eax,byte 020h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-068h+074h],eax
L_53729:
L_53730:
; Line 2315:   } 
        mov     eax,dword [ebx]
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_53762:
L_53747:
L_53682:
L_53632:
        add     ebx,byte 04h
L_53630:
        cmp     ebx,edi
        jne     L_53629
L_53631:
; Line 1189: } 
L_53852:
L_53839:
L_53867:
L_53826:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__split_buffer$p#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv
        pop     ecx
L_53882:
L_53627:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 068h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@clear$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@clear$qv:
        add     esp,0fffffed4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_53888:
        mov     ebx,dword [esp+04h+013ch]
; Line 1245:     allocator_type& __a = __alloc(); 
        mov     eax,ebx
        add     eax,byte 020h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0120h+013ch],eax
        and     eax,eax
        je      L_53965
        mov     eax,dword [esp-0120h+013ch]
        add     eax,byte 04h
        jmp     L_53966
L_53965:
        mov     eax,dword [esp-0120h+013ch]
L_53966:
        mov     esi,eax
; Line 2315:   } 
; Line 1246:     for (iterator __i = begin(), __e = end(); __i != __e; ++__i) 
        mov     eax,ebx
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@begin$qv
        pop     ecx
        pop     ecx
        mov     eax,ebx
        push    eax
        lea     eax,[esp-018h+0140h]
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@end$qv
        pop     ecx
        pop     ecx
        lea     eax,[esp-018h+013ch]
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @$bneq$qrx#__deque_iterator$#unique_ptr$7Control#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~
        pop     ecx
        pop     ecx
        and     al,al
        je      L_53893
L_53891:
        mov     eax,esi
        mov     ecx,dword [esp-08h+04h+013ch]
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        push    ecx
        push    eax
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-0124h+0148h],00h
        call    @std@__1@#allocator_traits$#allocator$#unique_ptr$7Control#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~
        add     esp,byte 0ch
L_54091:
L_54078:
L_53985:
L_53894:
; Line 323:         if (++__ptr_ - *__m_iter_ == __block_size) 
        mov     eax,dword [@std@__1@#__deque_iterator$#unique_ptr$7Control#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~@__block_size]
        add     dword [esp-08h+04h+013ch],byte 08h
        mov     ecx,dword [esp-08h+013ch]
        mov     ecx,dword [ecx]
        sub     ecx,dword [esp-08h+04h+013ch]
        neg     ecx
        imul    ecx,byte 01h
        sar     ecx,03h
        cmp     ecx,eax
        jne     L_54097
; Line 324:         { 
; Line 325:             ++__m_iter_; 
        add     dword [esp-08h+013ch],byte 04h
        mov     eax,dword [esp-08h+013ch]
        mov     eax,dword [eax]
        mov     dword [esp-08h+04h+013ch],eax
; Line 327:         } 
L_54097:
; Line 329:     } 
L_53892:
        lea     eax,[esp-018h+013ch]
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @$bneq$qrx#__deque_iterator$#unique_ptr$7Control#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~
        pop     ecx
        pop     ecx
        and     al,al
        jne     L_53891
L_53893:
L_54130:
L_54144:
        mov     eax,ebx
        add     eax,byte 020h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0128h+013ch],eax
        and     eax,eax
        je      L_54192
        mov     eax,dword [esp-0128h+013ch]
        jmp     L_54193
L_54192:
        mov     eax,dword [esp-0128h+013ch]
L_54193:
; Line 2305:   } 
        mov     dword [eax],00h
        mov     esi,ebx
        add     esi,byte 04h
        mov     eax,esi
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 02h
        jbe     L_53900
L_53899:
; Line 1250:     { 
; Line 1251:         __alloc_traits::deallocate(__a, __map_.front(), __block_size); 
        mov     eax,esi
        mov     eax,dword [eax+08h]
        mov     eax,dword [eax]
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_54272:
L_54257:
L_54226:
        mov     eax,esi
        mov     edi,eax
        mov     ebp,dword [eax+08h]
        add     ebp,byte 04h
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-012ch+0140h],00h
        lea     eax,[esp-012ch+0140h]
        push    eax
        call    @std@__1@#__libcpp_trivial_destructor$p#unique_ptr$7Control#default_delete$n0~~~@$bctr$qv
        pop     ecx
        push    ebp
        push    edi
        call    @std@__1@#__split_buffer$p#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~
        add     esp,byte 0ch
        lea     eax,[esp-012ch+013ch]
        push    eax
        call    @std@__1@#__libcpp_trivial_destructor$p#unique_ptr$7Control#default_delete$n0~~~@$bdtr$qv
        pop     ecx
L_54400:
L_54355:
L_54338:
; Line 1253:     } 
L_53901:
; Line 1249:     while (__map_.size() > 2) 
        mov     eax,esi
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 02h
        ja      L_53899
L_53900:
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 01h
        je      L_53911
        cmp     eax,byte 02h
        je      L_53913
        jmp     L_53916
; Line 1255:     { 
; Line 1256:     case 1: 
L_53911:
        mov     eax,dword [@std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size]
        mov     ecx,eax
        shr     ecx,01fh
        add     eax,ecx
        sar     eax,01h
        mov     dword [ebx+01ch],eax
; Line 1258:         break; 
        jmp     L_53908
L_53913:
        mov     eax,dword [@std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size]
        mov     dword [ebx+01ch],eax
; Line 1261:         break; 
L_53916:
L_53908:
; Line 1263: } 
L_53889:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,012ch
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__split_buffer$p#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv:
        add     esp,0ffffff48h
        push    ebx
L_54440:
        mov     ebx,dword [esp+04h+0bch]
; Line 348:     clear(); 
        mov     ecx,ebx
        mov     eax,ecx
        mov     ecx,dword [ecx+08h]
        add     esp,byte 0fffffffch
        mov     edx,esp
        mov     dword [esp-0b0h+0c0h],00h
        push    ecx
        push    eax
        call    @std@__1@#__split_buffer$p#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_end$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?0?~
        add     esp,byte 0ch
L_54525:
L_54480:
L_54463:
        cmp     dword [ebx+04h],byte 00h
        je      L_54443
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0b4h+0bch],eax
L_54590:
L_54591:
; Line 2315:   } 
        mov     eax,dword [ebx+04h]
        mov     ecx,ebx
        add     ecx,byte 010h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-0b8h+0bch],ecx
L_54655:
L_54656:
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_54689:
L_54674:
L_54543:
L_54443:
; Line 351: } 
L_54779:
L_54766:
L_54794:
L_54753:
L_54809:
L_54441:
        pop     ebx
        add     esp,0b8h
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_end$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?0?~ virtual
        [bits 32]
@std@__1@#__split_buffer$p#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_end$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?0?~:
        add     esp,byte 0ffffff80h
        push    ebx
        push    esi
L_54815:
        mov     ebx,dword [esp+08h+088h]
        mov     esi,dword [esp+04h+088h]
; Line 302:     while (__new_last != __end_) 
        cmp     ebx,dword [esi+0ch]
        je      L_54819
L_54818:
        mov     eax,esi
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-07ch+088h],eax
        and     eax,eax
        je      L_54891
        mov     eax,dword [esp-07ch+088h]
        add     eax,byte 04h
        jmp     L_54892
L_54891:
        mov     eax,dword [esp-07ch+088h]
L_54892:
; Line 2315:   } 
        sub     dword [esi+0ch],byte 04h
        mov     ecx,dword [esi+0ch]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    ecx
        push    eax
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-080h+094h],00h
        call    @std@__1@#allocator_traits$#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~
        add     esp,byte 0ch
L_54984:
L_54971:
L_54844:
L_54820:
        cmp     ebx,dword [esi+0ch]
        jne     L_54818
L_54819:
; Line 304: } 
L_54816:
        pop     esi
        pop     ebx
        add     esp,080h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv:
; Line 1174:     : __start_(0), __size_(0, __default_init_tag()) {} 
        add     esp,byte 0ffffffech
        push    ebx
L_54992:
        mov     ebx,dword [esp+04h+018h]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__split_buffer$p#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv
        pop     ecx
        mov     dword [ebx+01ch],00h
        mov     dword [esp-04h+018h],00h
        lea     eax,[esp-04h+018h]
        push    eax
        mov     dword [esp-08h+01ch],00h
        lea     eax,[esp-08h+01ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 020h
        push    eax
        call    @std@__1@#__compressed_pair$ui#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~~@$bctr$ir18__default_init_tag~$qRirn1
        add     esp,byte 0ch
; Line 2198:   template <class _Up, class = typename enable_if< 
L_55042:
        mov     eax,ebx
L_54993:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv:
        add     esp,byte 0ffffff98h
        push    ebx
        push    esi
        push    edi
L_55048:
        mov     esi,dword [esp+04h+074h]
; Line 1184:     clear(); 
        mov     eax,esi
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@clear$qv
        pop     ecx
        mov     eax,esi
        add     eax,byte 04h
        mov     ebx,dword [eax+08h]
        mov     eax,esi
        add     eax,byte 04h
        mov     edi,dword [eax+0ch]
; Line 1187:     for (; __i != __e; ++__i) 
        cmp     ebx,edi
        je      L_55053
L_55051:
        mov     eax,esi
        add     eax,byte 020h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-068h+074h],eax
L_55151:
L_55152:
; Line 2315:   } 
        mov     eax,dword [ebx]
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_55184:
L_55169:
L_55104:
L_55054:
        add     ebx,byte 04h
L_55052:
        cmp     ebx,edi
        jne     L_55051
L_55053:
; Line 1189: } 
L_55274:
L_55261:
L_55289:
L_55248:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__split_buffer$p#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv
        pop     ecx
L_55304:
L_55049:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 068h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@clear$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@clear$qv:
        add     esp,0fffffed4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_55310:
        mov     ebx,dword [esp+04h+013ch]
; Line 1245:     allocator_type& __a = __alloc(); 
        mov     eax,ebx
        add     eax,byte 020h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0120h+013ch],eax
        and     eax,eax
        je      L_55387
        mov     eax,dword [esp-0120h+013ch]
        add     eax,byte 04h
        jmp     L_55388
L_55387:
        mov     eax,dword [esp-0120h+013ch]
L_55388:
        mov     esi,eax
; Line 2315:   } 
; Line 1246:     for (iterator __i = begin(), __e = end(); __i != __e; ++__i) 
        mov     eax,ebx
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@begin$qv
        pop     ecx
        pop     ecx
        mov     eax,ebx
        push    eax
        lea     eax,[esp-018h+0140h]
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@end$qv
        pop     ecx
        pop     ecx
        lea     eax,[esp-018h+013ch]
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @$bneq$qrx#__deque_iterator$#unique_ptr$8MenuItem#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~
        pop     ecx
        pop     ecx
        and     al,al
        je      L_55315
L_55313:
        mov     eax,esi
        mov     ecx,dword [esp-08h+04h+013ch]
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        push    ecx
        push    eax
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-0124h+0148h],00h
        call    @std@__1@#allocator_traits$#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~
        add     esp,byte 0ch
L_55513:
L_55500:
L_55407:
L_55316:
; Line 323:         if (++__ptr_ - *__m_iter_ == __block_size) 
        mov     eax,dword [@std@__1@#__deque_iterator$#unique_ptr$8MenuItem#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~@__block_size]
        add     dword [esp-08h+04h+013ch],byte 08h
        mov     ecx,dword [esp-08h+013ch]
        mov     ecx,dword [ecx]
        sub     ecx,dword [esp-08h+04h+013ch]
        neg     ecx
        imul    ecx,byte 01h
        sar     ecx,03h
        cmp     ecx,eax
        jne     L_55519
; Line 324:         { 
; Line 325:             ++__m_iter_; 
        add     dword [esp-08h+013ch],byte 04h
        mov     eax,dword [esp-08h+013ch]
        mov     eax,dword [eax]
        mov     dword [esp-08h+04h+013ch],eax
; Line 327:         } 
L_55519:
; Line 329:     } 
L_55314:
        lea     eax,[esp-018h+013ch]
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @$bneq$qrx#__deque_iterator$#unique_ptr$8MenuItem#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~
        pop     ecx
        pop     ecx
        and     al,al
        jne     L_55313
L_55315:
L_55552:
L_55566:
        mov     eax,ebx
        add     eax,byte 020h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0128h+013ch],eax
        and     eax,eax
        je      L_55614
        mov     eax,dword [esp-0128h+013ch]
        jmp     L_55615
L_55614:
        mov     eax,dword [esp-0128h+013ch]
L_55615:
; Line 2305:   } 
        mov     dword [eax],00h
        mov     esi,ebx
        add     esi,byte 04h
        mov     eax,esi
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 02h
        jbe     L_55322
L_55321:
; Line 1250:     { 
; Line 1251:         __alloc_traits::deallocate(__a, __map_.front(), __block_size); 
        mov     eax,esi
        mov     eax,dword [eax+08h]
        mov     eax,dword [eax]
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_55694:
L_55679:
L_55648:
        mov     eax,esi
        mov     edi,eax
        mov     ebp,dword [eax+08h]
        add     ebp,byte 04h
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-012ch+0140h],00h
        lea     eax,[esp-012ch+0140h]
        push    eax
        call    @std@__1@#__libcpp_trivial_destructor$p#unique_ptr$8MenuItem#default_delete$n0~~~@$bctr$qv
        pop     ecx
        push    ebp
        push    edi
        call    @std@__1@#__split_buffer$p#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~
        add     esp,byte 0ch
        lea     eax,[esp-012ch+013ch]
        push    eax
        call    @std@__1@#__libcpp_trivial_destructor$p#unique_ptr$8MenuItem#default_delete$n0~~~@$bdtr$qv
        pop     ecx
L_55822:
L_55777:
L_55760:
; Line 1253:     } 
L_55323:
; Line 1249:     while (__map_.size() > 2) 
        mov     eax,esi
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 02h
        ja      L_55321
L_55322:
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 01h
        je      L_55333
        cmp     eax,byte 02h
        je      L_55335
        jmp     L_55338
; Line 1255:     { 
; Line 1256:     case 1: 
L_55333:
        mov     eax,dword [@std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size]
        mov     ecx,eax
        shr     ecx,01fh
        add     eax,ecx
        sar     eax,01h
        mov     dword [ebx+01ch],eax
; Line 1258:         break; 
        jmp     L_55330
L_55335:
        mov     eax,dword [@std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size]
        mov     dword [ebx+01ch],eax
; Line 1261:         break; 
L_55338:
L_55330:
; Line 1263: } 
L_55311:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,012ch
        ret
section code
section code
        section vsc@StringTable@$bdtr$qv virtual
        [bits 32]
@StringTable@$bdtr$qv:
; Line 38:     StringTable(const ResourceInfo& info); 
        push    ecx
        push    ebx
L_55862:
        mov     ebx,dword [esp+04h+08h]
L_55878:
        push    byte 014h
        push    byte 010h
        push    dword @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bdtr$qv
        push    byte 00h
        mov     eax,ebx
        add     eax,byte 048h
        push    eax
        call    @__arrCall$qpvpvpvii
        add     esp,byte 014h
        push    ebx
        call    @Resource@$bdtr$qv
        pop     ecx
L_55863:
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__split_buffer$p#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv:
        add     esp,0ffffff48h
        push    ebx
L_55884:
        mov     ebx,dword [esp+04h+0bch]
; Line 348:     clear(); 
        mov     ecx,ebx
        mov     eax,ecx
        mov     ecx,dword [ecx+08h]
        add     esp,byte 0fffffffch
        mov     edx,esp
        mov     dword [esp-0b0h+0c0h],00h
        push    ecx
        push    eax
        call    @std@__1@#__split_buffer$p#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_end$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?0?~
        add     esp,byte 0ch
L_55969:
L_55924:
L_55907:
        cmp     dword [ebx+04h],byte 00h
        je      L_55887
        mov     eax,ebx
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0b4h+0bch],eax
L_56034:
L_56035:
; Line 2315:   } 
        mov     eax,dword [ebx+04h]
        mov     ecx,ebx
        add     ecx,byte 010h
; Line 2309:     return static_cast<_Base1 const&>(*this).__get(); 
        mov     dword [esp-0b8h+0bch],ecx
L_56099:
L_56100:
; Line 2310:   } 
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_56133:
L_56118:
L_55987:
L_55887:
; Line 351: } 
L_56223:
L_56210:
L_56238:
L_56197:
L_56253:
L_55885:
        pop     ebx
        add     esp,0b8h
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_end$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?0?~ virtual
        [bits 32]
@std@__1@#__split_buffer$p#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_end$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?0?~:
        add     esp,byte 0ffffff80h
        push    ebx
        push    esi
L_56259:
        mov     ebx,dword [esp+08h+088h]
        mov     esi,dword [esp+04h+088h]
; Line 302:     while (__new_last != __end_) 
        cmp     ebx,dword [esi+0ch]
        je      L_56263
L_56262:
        mov     eax,esi
        add     eax,byte 010h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-07ch+088h],eax
        and     eax,eax
        je      L_56335
        mov     eax,dword [esp-07ch+088h]
        add     eax,byte 04h
        jmp     L_56336
L_56335:
        mov     eax,dword [esp-07ch+088h]
L_56336:
; Line 2315:   } 
        sub     dword [esi+0ch],byte 04h
        mov     ecx,dword [esi+0ch]
; Line 1123:     static_assert(!is_function<_Tp>::value, "_Tp is a function type"); 
; Line 1125: } 
        push    ecx
        push    eax
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-080h+094h],00h
        call    @std@__1@#allocator_traits$#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~
        add     esp,byte 0ch
L_56428:
L_56415:
L_56288:
L_56264:
        cmp     ebx,dword [esi+0ch]
        jne     L_56262
L_56263:
; Line 304: } 
L_56260:
        pop     esi
        pop     ebx
        add     esp,080h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv:
; Line 1174:     : __start_(0), __size_(0, __default_init_tag()) {} 
        add     esp,byte 0ffffffech
        push    ebx
L_56436:
        mov     ebx,dword [esp+04h+018h]
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__split_buffer$p#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv
        pop     ecx
        mov     dword [ebx+01ch],00h
        mov     dword [esp-04h+018h],00h
        lea     eax,[esp-04h+018h]
        push    eax
        mov     dword [esp-08h+01ch],00h
        lea     eax,[esp-08h+01ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 020h
        push    eax
        call    @std@__1@#__compressed_pair$ui#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~~@$bctr$ir18__default_init_tag~$qRirn1
        add     esp,byte 0ch
; Line 2198:   template <class _Up, class = typename enable_if< 
L_56486:
        mov     eax,ebx
L_56437:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv:
        add     esp,byte 0ffffff98h
        push    ebx
        push    esi
        push    edi
L_56492:
        mov     esi,dword [esp+04h+074h]
; Line 1184:     clear(); 
        mov     eax,esi
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@clear$qv
        pop     ecx
        mov     eax,esi
        add     eax,byte 04h
        mov     ebx,dword [eax+08h]
        mov     eax,esi
        add     eax,byte 04h
        mov     edi,dword [eax+0ch]
; Line 1187:     for (; __i != __e; ++__i) 
        cmp     ebx,edi
        je      L_56497
L_56495:
        mov     eax,esi
        add     eax,byte 020h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-068h+074h],eax
L_56595:
L_56596:
; Line 2315:   } 
        mov     eax,dword [ebx]
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_56628:
L_56613:
L_56548:
L_56498:
        add     ebx,byte 04h
L_56496:
        cmp     ebx,edi
        jne     L_56495
L_56497:
; Line 1189: } 
L_56718:
L_56705:
L_56733:
L_56692:
        mov     eax,esi
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__split_buffer$p#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv
        pop     ecx
L_56748:
L_56493:
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 068h
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@clear$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@clear$qv:
        add     esp,0fffffed4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_56754:
        mov     ebx,dword [esp+04h+013ch]
; Line 1245:     allocator_type& __a = __alloc(); 
        mov     eax,ebx
        add     eax,byte 020h
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-0120h+013ch],eax
        and     eax,eax
        je      L_56831
        mov     eax,dword [esp-0120h+013ch]
        add     eax,byte 04h
        jmp     L_56832
L_56831:
        mov     eax,dword [esp-0120h+013ch]
L_56832:
        mov     esi,eax
; Line 2315:   } 
; Line 1246:     for (iterator __i = begin(), __e = end(); __i != __e; ++__i) 
        mov     eax,ebx
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@begin$qv
        pop     ecx
        pop     ecx
        mov     eax,ebx
        push    eax
        lea     eax,[esp-018h+0140h]
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@end$qv
        pop     ecx
        pop     ecx
        lea     eax,[esp-018h+013ch]
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @$bneq$qrx#__deque_iterator$#unique_ptr$15InternalVerInfo#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~
        pop     ecx
        pop     ecx
        and     al,al
        je      L_56759
L_56757:
        mov     eax,esi
        mov     ecx,dword [esp-08h+04h+013ch]
; Line 603:   return reinterpret_cast<_Tp *>( 
; Line 605: } 
        push    ecx
        push    eax
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-0124h+0148h],00h
        call    @std@__1@#allocator_traits$#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~
        add     esp,byte 0ch
L_56957:
L_56944:
L_56851:
L_56760:
; Line 323:         if (++__ptr_ - *__m_iter_ == __block_size) 
        mov     eax,dword [@std@__1@#__deque_iterator$#unique_ptr$15InternalVerInfo#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~@__block_size]
        add     dword [esp-08h+04h+013ch],byte 08h
        mov     ecx,dword [esp-08h+013ch]
        mov     ecx,dword [ecx]
        sub     ecx,dword [esp-08h+04h+013ch]
        neg     ecx
        imul    ecx,byte 01h
        sar     ecx,03h
        cmp     ecx,eax
        jne     L_56963
; Line 324:         { 
; Line 325:             ++__m_iter_; 
        add     dword [esp-08h+013ch],byte 04h
        mov     eax,dword [esp-08h+013ch]
        mov     eax,dword [eax]
        mov     dword [esp-08h+04h+013ch],eax
; Line 327:         } 
L_56963:
; Line 329:     } 
L_56758:
        lea     eax,[esp-018h+013ch]
        push    eax
        lea     eax,[esp-08h+0140h]
        push    eax
        call    @$bneq$qrx#__deque_iterator$#unique_ptr$15InternalVerInfo#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~
        pop     ecx
        pop     ecx
        and     al,al
        jne     L_56757
L_56759:
L_56996:
L_57010:
        mov     eax,ebx
        add     eax,byte 020h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-0128h+013ch],eax
        and     eax,eax
        je      L_57058
        mov     eax,dword [esp-0128h+013ch]
        jmp     L_57059
L_57058:
        mov     eax,dword [esp-0128h+013ch]
L_57059:
; Line 2305:   } 
        mov     dword [eax],00h
        mov     esi,ebx
        add     esi,byte 04h
        mov     eax,esi
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 02h
        jbe     L_56766
L_56765:
; Line 1250:     { 
; Line 1251:         __alloc_traits::deallocate(__a, __map_.front(), __block_size); 
        mov     eax,esi
        mov     eax,dword [eax+08h]
        mov     eax,dword [eax]
; Line 340:   _DeallocateCaller::__do_deallocate_handle_size_align(__ptr, __size, __align); 
; Line 261:     ((void)__align); 
; Line 291:     ((void)__size); 
; Line 332:     return ::operator delete(__ptr); 
        push    eax
        call    @$bdel$qpv
        pop     ecx
; Line 334:     return __builtin_operator_delete(__ptr); 
; Line 294:     return __do_call(__ptr, __size); 
; Line 264:     if (__is_overaligned_for_new(__align)) { 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 265:       const align_val_t __align_val = static_cast<align_val_t>(__align); 
; Line 341: } 
L_57138:
L_57123:
L_57092:
        mov     eax,esi
        mov     edi,eax
        mov     ebp,dword [eax+08h]
        add     ebp,byte 04h
        add     esp,byte 0fffffffch
        mov     eax,esp
        mov     dword [esp-012ch+0140h],00h
        lea     eax,[esp-012ch+0140h]
        push    eax
        call    @std@__1@#__libcpp_trivial_destructor$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~@$bctr$qv
        pop     ecx
        push    ebp
        push    edi
        call    @std@__1@#__split_buffer$p#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~
        add     esp,byte 0ch
        lea     eax,[esp-012ch+013ch]
        push    eax
        call    @std@__1@#__libcpp_trivial_destructor$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~@$bdtr$qv
        pop     ecx
L_57266:
L_57221:
L_57204:
; Line 1253:     } 
L_56767:
; Line 1249:     while (__map_.size() > 2) 
        mov     eax,esi
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 02h
        ja      L_56765
L_56766:
        mov     eax,ebx
        add     eax,byte 04h
        mov     ecx,dword [eax+08h]
        mov     eax,dword [eax+0ch]
        sub     eax,ecx
        sar     eax,02h
        cmp     eax,byte 01h
        je      L_56777
        cmp     eax,byte 02h
        je      L_56779
        jmp     L_56782
; Line 1255:     { 
; Line 1256:     case 1: 
L_56777:
        mov     eax,dword [@std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size]
        mov     ecx,eax
        shr     ecx,01fh
        add     eax,ecx
        sar     eax,01h
        mov     dword [ebx+01ch],eax
; Line 1258:         break; 
        jmp     L_56774
L_56779:
        mov     eax,dword [@std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size]
        mov     dword [ebx+01ch],eax
; Line 1261:         break; 
L_56782:
L_56774:
; Line 1263: } 
L_56755:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,012ch
        ret
section code
section code
        section vsc@std@__1@#allocator$C~@$basn$qRx#allocator$C~ virtual
        [bits 32]
@std@__1@#allocator$C~@$basn$qRx#allocator$C~:
L_57306:
L_57307:
        ret
section code
section code
        section vsc@std@__1@#allocator$c~@$basn$qRx#allocator$c~ virtual
        [bits 32]
@std@__1@#allocator$c~@$basn$qRx#allocator$c~:
L_57312:
L_57313:
        ret
section code
section code
        section vsc@std@__1@#__str_find_first_not_of$cui#char_traits$c~6_SizeT?4294967295?~$qpxcuipxcuiui virtual
        [bits 32]
@std@__1@#__str_find_first_not_of$cui#char_traits$c~6_SizeT?4294967295?~$qpxcuipxcuiui:
; Line 973: inline _SizeT _LIBCPP_CONSTEXPR_AFTER_CXX11 _LIBCPP_INLINE_VISIBILITY 
        push    ecx
        push    ebx
        push    ebp
        push    esi
        push    edi
L_57318:
        mov     eax,dword [esp+014h+014h]
        mov     dword [esp-04h+014h],eax
        mov     eax,dword [esp+010h+014h]
        mov     edi,dword [esp+0ch+014h]
        mov     ecx,dword [esp+08h+014h]
        mov     ebx,dword [esp+04h+014h]
; Line 977:     if (__pos < __sz) 
        cmp     eax,ecx
        jnc     L_57321
; Line 978:     { 
; Line 979:         const _CharT* __pe = __p + __sz; 
        mov     esi,ebx
        add     esi,ecx
; Line 980:         for (const _CharT* __ps = __p + __pos; __ps != __pe; ++__ps) 
        mov     ebp,ebx
        add     ebp,eax
        cmp     ebp,esi
        je      L_57327
L_57325:
        mov     eax,ebp
        push    eax
        mov     eax,dword [esp-04h+018h]
        push    eax
        mov     eax,edi
        push    eax
        call    @std@__1@#char_traits$c~@find$qpxcuirxc
        add     esp,byte 0ch
        and     eax,eax
        jne     L_57331
        mov     eax,ebp
        sub     eax,ebx
        jmp     L_57319
L_57331:
L_57328:
        inc     ebp
L_57326:
        cmp     ebp,esi
        jne     L_57325
L_57327:
; Line 983:     } 
L_57321:
        or      eax,byte 0ffffffffh
; Line 985: } 
L_57319:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#char_traits$c~@eq$qcc virtual
        [bits 32]
@std@__1@#char_traits$c~@eq$qcc:
; Line 246:             {return __c1 == __c2;} 
L_57346:
        mov     dl,byte [esp+08h]
        mov     al,byte [esp+04h]
        movsx   ecx,al
        mov     al,dl
        cbw
        cwde
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
L_57347:
        ret
section code
section code
        section vsc@std@__1@#__find_first_of_ce$pxcpxcpqcc$4bool~$qpxcpxcpxcpxcpqcc$n0 virtual
        [bits 32]
@std@__1@#__find_first_of_ce$pxcpxcpqcc$4bool~$qpxcpxcpxcpxcpqcc$n0:
; Line 1104: _LIBCPP_CONSTEXPR_AFTER_CXX11 _ForwardIterator1 
        push    ecx
        push    ecx
        push    ebx
        push    ebp
        push    esi
        push    edi
L_57354:
        mov     eax,dword [esp+014h+018h]
        mov     dword [esp-04h+018h],eax
        mov     edi,dword [esp+010h+018h]
        mov     ebp,dword [esp+0ch+018h]
        mov     ebx,dword [esp+08h+018h]
        mov     eax,dword [esp+04h+018h]
        mov     dword [esp-08h+018h],eax
; Line 1108:     for (; __first1 != __last1; ++__first1) 
        mov     ecx,ebx
        cmp     dword [esp-08h+018h],ecx
        je      L_57359
L_57357:
; Line 1109:         for (_ForwardIterator2 __j = __first2; __j != __last2; ++__j) 
        mov     esi,ebp
        cmp     esi,edi
        je      L_57364
L_57362:
        mov     al,byte [esi]
        cbw
        cwde
        push    eax
        mov     eax,dword [esp-08h+01ch]
        mov     al,byte [eax]
        cbw
        cwde
        push    eax
        call    dword [esp-04h+020h]
        pop     ecx
        pop     ecx
        and     al,al
        je      L_57368
        mov     eax,dword [esp-08h+018h]
        jmp     L_57355
L_57368:
L_57365:
        inc     esi
L_57363:
        cmp     esi,edi
        jne     L_57362
L_57364:
L_57360:
        inc     dword [esp-08h+018h]
L_57358:
        mov     ecx,ebx
        cmp     dword [esp-08h+018h],ecx
        jne     L_57357
L_57359:
        mov     eax,ebx
; Line 1113: } 
L_57355:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$51@#basic_string$c#char_traits$c~#allocator$c~~@__repi?0?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$51@#basic_string$c#char_traits$c~#allocator$c~~@__repi?0?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ebx
L_57381:
        mov     ebx,dword [esp+04h+04h]
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@__rep@$bctr$qv
        pop     ecx
        mov     eax,ebx
L_57382:
        pop     ebx
        ret
section code
section code
        section vsc@std@__1@#copy_backward$pxcpc~$qpxcpxcpc virtual
        [bits 32]
@std@__1@#copy_backward$pxcpc~$qpxcpxcpc:
; Line 1783: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17_WITH_IS_CONSTANT_EVALUATED 
        add     esp,byte 0ffffffc4h
        push    ebx
        push    esi
L_57391:
        mov     eax,dword [esp+0ch+044h]
        mov     ebx,dword [esp+08h+044h]
        mov     edx,dword [esp+04h+044h]
; Line 1788:     if (__libcpp_is_constant_evaluated()) { 
; Line 1789:         return _VSTD::__copy_backward_constexpr(__unwrap_iter(__first), 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1750:     while (__first != __last) 
; Line 1753: } 
; Line 1792:     } else { 
L_57394:
; Line 1793:         return _VSTD::__copy_backward(__unwrap_iter(__first), 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1760:     return __copy_backward_constexpr(__first, __last, __result); 
; Line 1750:     while (__first != __last) 
        cmp     edx,ebx
        je      L_57544
L_57543:
        dec     ebx
        mov     ecx,ebx
        mov     cl,byte [ecx]
        dec     eax
        mov     byte [eax],cl
L_57545:
        cmp     edx,ebx
        jne     L_57543
L_57544:
; Line 1753: } 
; Line 1761: } 
; Line 1796:     } 
L_57399:
L_57409:
L_57411:
L_57410:
L_57392:
        pop     esi
        pop     ebx
        add     esp,byte 03ch
        ret
section code
section code
        section vsc@ResourceId@$bdtr$qv virtual
        [bits 32]
@ResourceId@$bdtr$qv:
L_57569:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bdtr$qv
        pop     ecx
L_57570:
        ret
section code
section code
        section vsc@std@__1@#copy_backward$pxCpC~$qpxCpxCpC virtual
        [bits 32]
@std@__1@#copy_backward$pxCpC~$qpxCpxCpC:
; Line 1783: inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17_WITH_IS_CONSTANT_EVALUATED 
        add     esp,byte 0ffffffc4h
        push    ebx
        push    esi
L_57575:
        mov     eax,dword [esp+0ch+044h]
        mov     ebx,dword [esp+08h+044h]
        mov     ecx,dword [esp+04h+044h]
; Line 1788:     if (__libcpp_is_constant_evaluated()) { 
; Line 1789:         return _VSTD::__copy_backward_constexpr(__unwrap_iter(__first), 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1750:     while (__first != __last) 
; Line 1753: } 
; Line 1792:     } else { 
L_57578:
; Line 1793:         return _VSTD::__copy_backward(__unwrap_iter(__first), 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1638:     return __i; 
; Line 1639: } 
; Line 1760:     return __copy_backward_constexpr(__first, __last, __result); 
; Line 1750:     while (__first != __last) 
        cmp     ecx,ebx
        je      L_57728
L_57727:
        sub     ebx,byte 02h
        mov     edx,ebx
        mov     dx,word [edx]
        sub     eax,byte 02h
        mov     word [eax],dx
L_57729:
        cmp     ecx,ebx
        jne     L_57727
L_57728:
; Line 1753: } 
; Line 1761: } 
; Line 1796:     } 
L_57583:
L_57593:
L_57595:
L_57594:
L_57576:
        pop     esi
        pop     ebx
        add     esp,byte 03ch
        ret
section code
section code
        section vsc@ResourceInfo@$bdtr$qv virtual
        [bits 32]
@ResourceInfo@$bdtr$qv:
L_57753:
L_57754:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$51@#basic_string$C#char_traits$C~#allocator$C~~@__repi?0?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$51@#basic_string$C#char_traits$C~#allocator$C~~@__repi?0?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ebx
L_57759:
        mov     ebx,dword [esp+04h+04h]
        mov     eax,ebx
        push    eax
        call    @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__rep@$bctr$qv
        pop     ecx
        mov     eax,ebx
L_57760:
        pop     ebx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$p12ResourceData#default_delete$n0~~@$bctr$pn0r18__default_init_tag~$qRpn0rn1 virtual
        [bits 32]
@std@__1@#__compressed_pair$p12ResourceData#default_delete$n0~~@$bctr$pn0r18__default_init_tag~$qRpn0rn1:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        add     esp,byte 0ffffffe4h
        push    ebx
L_57769:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        mov     eax,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
        mov     ecx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2205:     { 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ecx],eax
; Line 2206:     } 
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair_elem$#default_delete$12ResourceData~i?1?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        mov     eax,ebx
L_57770:
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$ui#allocator$17@Accelerators@Key~~@$bctr$ir18__default_init_tag~$qRirn1 virtual
        [bits 32]
@std@__1@#__compressed_pair$ui#allocator$17@Accelerators@Key~~@$bctr$ir18__default_init_tag~$qRirn1:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        add     esp,byte 0ffffffe4h
        push    ebx
L_57861:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        mov     eax,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
        mov     ecx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2205:     { 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ecx],eax
; Line 2206:     } 
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair_elem$#allocator$17@Accelerators@Key~i?1?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        mov     eax,ebx
L_57862:
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p17@Accelerators@Key#allocator$pn0~~@$bctr$qv virtual
        [bits 32]
@std@__1@#__split_buffer$p17@Accelerators@Key#allocator$pn0~~@$bctr$qv:
        add     esp,byte 0ffffffech
        push    ebx
L_57953:
        mov     ebx,dword [esp+04h+018h]
        mov     dword [ebx+04h],00h
        mov     dword [ebx+08h],00h
        mov     dword [ebx+0ch],00h
        mov     dword [esp-04h+018h],00h
        lea     eax,[esp-04h+018h]
        push    eax
        xor     eax,eax
        mov     dword [esp-08h+01ch],eax
        lea     eax,[esp-08h+01ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 010h
        push    eax
        call    @std@__1@#__compressed_pair$pp17@Accelerators@Key#allocator$pn0~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2
        add     esp,byte 0ch
; Line 329: } 
L_58003:
        mov     eax,ebx
L_57954:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$ui#allocator$p6Cursor~~@$bctr$ir18__default_init_tag~$qRirn1 virtual
        [bits 32]
@std@__1@#__compressed_pair$ui#allocator$p6Cursor~~@$bctr$ir18__default_init_tag~$qRirn1:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        add     esp,byte 0ffffffe4h
        push    ebx
L_58009:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        mov     eax,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
        mov     ecx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2205:     { 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ecx],eax
; Line 2206:     } 
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair_elem$#allocator$p6Cursor~i?1?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        mov     eax,ebx
L_58010:
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$pp6Cursor#allocator$ppn0~~@$bctr$qv virtual
        [bits 32]
@std@__1@#__split_buffer$pp6Cursor#allocator$ppn0~~@$bctr$qv:
        add     esp,byte 0ffffffech
        push    ebx
L_58101:
        mov     ebx,dword [esp+04h+018h]
        mov     dword [ebx+04h],00h
        mov     dword [ebx+08h],00h
        mov     dword [ebx+0ch],00h
        mov     dword [esp-04h+018h],00h
        lea     eax,[esp-04h+018h]
        push    eax
        xor     eax,eax
        mov     dword [esp-08h+01ch],eax
        lea     eax,[esp-08h+01ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 010h
        push    eax
        call    @std@__1@#__compressed_pair$ppp6Cursor#allocator$ppn0~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2
        add     esp,byte 0ch
; Line 329: } 
L_58151:
        mov     eax,ebx
L_58102:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$ui#allocator$#unique_ptr$7Control#default_delete$n0~~~~@$bctr$ir18__default_init_tag~$qRirn1 virtual
        [bits 32]
@std@__1@#__compressed_pair$ui#allocator$#unique_ptr$7Control#default_delete$n0~~~~@$bctr$ir18__default_init_tag~$qRirn1:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        add     esp,byte 0ffffffe4h
        push    ebx
L_58157:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        mov     eax,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
        mov     ecx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2205:     { 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ecx],eax
; Line 2206:     } 
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$7Control#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        mov     eax,ebx
L_58158:
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv virtual
        [bits 32]
@std@__1@#__split_buffer$p#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv:
        add     esp,byte 0ffffffech
        push    ebx
L_58249:
        mov     ebx,dword [esp+04h+018h]
        mov     dword [ebx+04h],00h
        mov     dword [ebx+08h],00h
        mov     dword [ebx+0ch],00h
        mov     dword [esp-04h+018h],00h
        lea     eax,[esp-04h+018h]
        push    eax
        xor     eax,eax
        mov     dword [esp-08h+01ch],eax
        lea     eax,[esp-08h+01ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 010h
        push    eax
        call    @std@__1@#__compressed_pair$pp#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2
        add     esp,byte 0ch
; Line 329: } 
L_58299:
        mov     eax,ebx
L_58250:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$ui#allocator$p4Icon~~@$bctr$ir18__default_init_tag~$qRirn1 virtual
        [bits 32]
@std@__1@#__compressed_pair$ui#allocator$p4Icon~~@$bctr$ir18__default_init_tag~$qRirn1:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        add     esp,byte 0ffffffe4h
        push    ebx
L_58305:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        mov     eax,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
        mov     ecx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2205:     { 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ecx],eax
; Line 2206:     } 
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair_elem$#allocator$p4Icon~i?1?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        mov     eax,ebx
L_58306:
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$pp4Icon#allocator$ppn0~~@$bctr$qv virtual
        [bits 32]
@std@__1@#__split_buffer$pp4Icon#allocator$ppn0~~@$bctr$qv:
        add     esp,byte 0ffffffech
        push    ebx
L_58397:
        mov     ebx,dword [esp+04h+018h]
        mov     dword [ebx+04h],00h
        mov     dword [ebx+08h],00h
        mov     dword [ebx+0ch],00h
        mov     dword [esp-04h+018h],00h
        lea     eax,[esp-04h+018h]
        push    eax
        xor     eax,eax
        mov     dword [esp-08h+01ch],eax
        lea     eax,[esp-08h+01ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 010h
        push    eax
        call    @std@__1@#__compressed_pair$ppp4Icon#allocator$ppn0~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2
        add     esp,byte 0ch
; Line 329: } 
L_58447:
        mov     eax,ebx
L_58398:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$ui#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~~@$bctr$ir18__default_init_tag~$qRirn1 virtual
        [bits 32]
@std@__1@#__compressed_pair$ui#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~~@$bctr$ir18__default_init_tag~$qRirn1:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        add     esp,byte 0ffffffe4h
        push    ebx
L_58453:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        mov     eax,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
        mov     ecx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2205:     { 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ecx],eax
; Line 2206:     } 
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        mov     eax,ebx
L_58454:
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv virtual
        [bits 32]
@std@__1@#__split_buffer$p#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv:
        add     esp,byte 0ffffffech
        push    ebx
L_58545:
        mov     ebx,dword [esp+04h+018h]
        mov     dword [ebx+04h],00h
        mov     dword [ebx+08h],00h
        mov     dword [ebx+0ch],00h
        mov     dword [esp-04h+018h],00h
        lea     eax,[esp-04h+018h]
        push    eax
        xor     eax,eax
        mov     dword [esp-08h+01ch],eax
        lea     eax,[esp-08h+01ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 010h
        push    eax
        call    @std@__1@#__compressed_pair$pp#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2
        add     esp,byte 0ch
; Line 329: } 
L_58595:
        mov     eax,ebx
L_58546:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$ui#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~~@$bctr$ir18__default_init_tag~$qRirn1 virtual
        [bits 32]
@std@__1@#__compressed_pair$ui#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~~@$bctr$ir18__default_init_tag~$qRirn1:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        add     esp,byte 0ffffffe4h
        push    ebx
L_58601:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        mov     eax,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
        mov     ecx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2205:     { 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ecx],eax
; Line 2206:     } 
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        mov     eax,ebx
L_58602:
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv virtual
        [bits 32]
@std@__1@#__split_buffer$p#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv:
        add     esp,byte 0ffffffech
        push    ebx
L_58693:
        mov     ebx,dword [esp+04h+018h]
        mov     dword [ebx+04h],00h
        mov     dword [ebx+08h],00h
        mov     dword [ebx+0ch],00h
        mov     dword [esp-04h+018h],00h
        lea     eax,[esp-04h+018h]
        push    eax
        xor     eax,eax
        mov     dword [esp-08h+01ch],eax
        lea     eax,[esp-08h+01ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 010h
        push    eax
        call    @std@__1@#__compressed_pair$pp#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2
        add     esp,byte 0ch
; Line 329: } 
L_58743:
        mov     eax,ebx
L_58694:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$ui#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~~@$bctr$ir18__default_init_tag~$qRirn1 virtual
        [bits 32]
@std@__1@#__compressed_pair$ui#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~~@$bctr$ir18__default_init_tag~$qRirn1:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        add     esp,byte 0ffffffe4h
        push    ebx
L_58749:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        mov     eax,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
        mov     ecx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2205:     { 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ecx],eax
; Line 2206:     } 
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        mov     eax,ebx
L_58750:
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv virtual
        [bits 32]
@std@__1@#__split_buffer$p#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$qv:
        add     esp,byte 0ffffffech
        push    ebx
L_58841:
        mov     ebx,dword [esp+04h+018h]
        mov     dword [ebx+04h],00h
        mov     dword [ebx+08h],00h
        mov     dword [ebx+0ch],00h
        mov     dword [esp-04h+018h],00h
        lea     eax,[esp-04h+018h]
        push    eax
        xor     eax,eax
        mov     dword [esp-08h+01ch],eax
        lea     eax,[esp-08h+01ch]
        push    eax
        mov     eax,ebx
        add     eax,byte 010h
        push    eax
        call    @std@__1@#__compressed_pair$pp#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2
        add     esp,byte 0ch
; Line 329: } 
L_58891:
        mov     eax,ebx
L_58842:
        pop     ebx
        add     esp,byte 014h
        ret
section code
section code
        section vsc@std@__1@#unique_ptr$11StringTable#default_delete$n0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#unique_ptr$11StringTable#default_delete$n0~~@$bdtr$qv:
; Line 2572:   ~unique_ptr() { reset(); } 
        add     esp,byte 0ffffffb8h
        push    ebx
L_58897:
        mov     eax,dword [esp+04h+04ch]
        xor     edx,edx
; Line 2615:     pointer __tmp = __ptr_.first(); 
        mov     ecx,eax
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-040h+04ch],ecx
        and     ecx,ecx
        je      L_58952
        mov     ecx,dword [esp-040h+04ch]
        jmp     L_58953
L_58952:
        mov     ecx,dword [esp-040h+04ch]
L_58953:
; Line 2305:   } 
        mov     ecx,dword [ecx]
        mov     ebx,eax
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-040h+04ch],ebx
        and     ebx,ebx
        je      L_58986
        mov     ebx,dword [esp-040h+04ch]
        jmp     L_58987
L_58986:
        mov     ebx,dword [esp-040h+04ch]
L_58987:
; Line 2305:   } 
        mov     dword [ebx],edx
        and     ecx,ecx
        je      L_58903
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-044h+04ch],eax
L_59035:
L_59036:
; Line 2315:   } 
; Line 2359:     static_assert(sizeof(_Tp) > 0, 
        mov     dword [esp-048h+04ch],ecx
        and     ecx,ecx
        je      L_59039
        mov     eax,dword [esp-048h+04ch]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax]
        pop     ecx
        mov     eax,dword [esp-048h+04ch]
        push    eax
        call    @$bdel$qpv
        pop     ecx
L_59039:
; Line 2364:   } 
; Line 2365: }; 
; Line 2365: }; 
L_59003:
L_58903:
; Line 2619:   } 
L_58920:
L_59079:
L_59066:
L_59094:
L_59053:
L_58898:
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@__1@#default_delete$11StringTable~@$bdtr$qv virtual
        [bits 32]
@std@__1@#default_delete$11StringTable~@$bdtr$qv:
L_59101:
L_59102:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#default_delete$11StringTable~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#default_delete$11StringTable~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_59107:
L_59121:
L_59108:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$p11StringTablei?0?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$p11StringTablei?0?4bool?0?~@$bdtr$qv:
L_59127:
L_59128:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$p11StringTable#default_delete$n0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$p11StringTable#default_delete$n0~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_59133:
L_59160:
L_59147:
L_59175:
L_59134:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#make_unique$11StringTabler12ResourceInfo~$qrn1 virtual
        [bits 32]
@std@__1@#make_unique$11StringTabler12ResourceInfo~$qrn1:
; Line 3024: inline _LIBCPP_INLINE_VISIBILITY 
        add     esp,byte 0ffffff94h
        push    ebx
        push    esi
        push    edi
L_59181:
        mov     ebx,dword [esp+04h+078h]
        mov     edi,dword [esp+08h+078h]
        push    dword @$xc@std@__1@#make_unique$11StringTabler12ResourceInfo~$qrn1
        lea     eax,[esp-054h+07ch]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_59184:
; Line 3028:     return unique_ptr<_Tp>(new _Tp(_VSTD::forward<_Args>(__args)...)); 
        push    dword 0198h
        call    @$bnew$qui
        pop     ecx
        mov     esi,eax
        and     eax,eax
        je      L_59205
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        push    edi
        mov     eax,esi
        push    eax
        call    @StringTable@$bctr$qrx12ResourceInfo
        pop     ecx
        pop     ecx
L_59205:
        mov     dword [esp-05ch+078h],esi
; Line 2489:   _LIBCPP_INLINE_VISIBILITY 
; Line 2490:   explicit unique_ptr(pointer __p) _NOEXCEPT : __ptr_(__p, __default_init_tag()) {} 
; Line 2490:   explicit unique_ptr(pointer __p) _NOEXCEPT : __ptr_(__p, __default_init_tag()) {} 
        mov     dword [esp-06ch+078h],00h
        lea     eax,[esp-06ch+078h]
        mov     dword [esp-054h+014h+078h],01h
        push    eax
        lea     eax,[esp-05ch+07ch]
        push    eax
        mov     eax,ebx
        push    eax
        call    @std@__1@#__compressed_pair$p11StringTable#default_delete$n0~~@$bctr$rpn0r18__default_init_tag~$qrpn0rn1
        add     esp,byte 0ch
        mov     dword [esp-054h+014h+078h],02h
        mov     dword [esp-054h+014h+078h],03h
L_59249:
        mov     dword [esp-054h+014h+078h],04h
        mov     eax,dword [esp+04h+078h]
; Line 3029: } 
L_59182:
        call    @_RundownException$qv
        pop     edi
        pop     esi
        pop     ebx
        add     esp,byte 06ch
        ret
section code
section code
        section vsc@$xc@std@__1@#make_unique$11StringTabler12ResourceInfo~$qrn1 virtual
        [bits 32]
@$xc@std@__1@#make_unique$11StringTabler12ResourceInfo~$qrn1:
        dd      00h
        dd      0ffffffach
        dd      0400h
        dd      @$xt@18__default_init_tag+0
        dd      0ffffff94h
        dd      01h
        dd      03h
        dd      00h
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$p12ResourceDatai?0?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$p12ResourceDatai?0?4bool?0?~@$bdtr$qv:
L_59256:
L_59257:
        ret
section code
section code
        section vsc@std@__1@#default_delete$12ResourceData~@$bdtr$qv virtual
        [bits 32]
@std@__1@#default_delete$12ResourceData~@$bdtr$qv:
L_59262:
L_59263:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#default_delete$12ResourceData~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#default_delete$12ResourceData~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_59268:
L_59282:
L_59269:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$p12ResourceData#default_delete$n0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$p12ResourceData#default_delete$n0~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_59288:
L_59315:
L_59302:
L_59330:
L_59289:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__deque_base_common$4bool?1?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__deque_base_common$4bool?1?~@$bdtr$qv:
L_59336:
L_59337:
        ret
section code
section code
        section vsc@std@__1@#__split_buffer_common$4bool?1?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__split_buffer_common$4bool?1?~@$bdtr$qv:
L_59342:
L_59343:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$pp17@Accelerators@Keyi?0?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$pp17@Accelerators@Keyi?0?4bool?0?~@$bdtr$qv:
L_59348:
L_59349:
        ret
section code
section code
        section vsc@std@__1@#allocator$p17@Accelerators@Key~@$bdtr$qv virtual
        [bits 32]
@std@__1@#allocator$p17@Accelerators@Key~@$bdtr$qv:
L_59354:
L_59355:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$p17@Accelerators@Key~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$p17@Accelerators@Key~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_59360:
L_59374:
L_59361:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$pp17@Accelerators@Key#allocator$pn0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$pp17@Accelerators@Key#allocator$pn0~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_59380:
L_59407:
L_59394:
L_59422:
L_59381:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#allocator_traits$#allocator$p17@Accelerators@Key~~@#__destroy$pn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$pn0~ppn0 virtual
        [bits 32]
@std@__1@#allocator_traits$#allocator$p17@Accelerators@Key~~@#__destroy$pn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$pn0~ppn0:
; Line 1797:             { 
        add     esp,byte 0ffffffb8h
L_59428:
        push    dword @$xc@std@__1@#allocator_traits$#allocator$p17@Accelerators@Key~~@#__destroy$pn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$pn0~ppn0
        lea     eax,[esp-048h+04ch]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_59431:
; Line 1798:                 __p->~_Tp(); 
; Line 1799:             } 
L_59429:
        call    @_RundownException$qv
        add     esp,byte 048h
        ret
section code
section code
        section vsc@$xc@std@__1@#allocator_traits$#allocator$p17@Accelerators@Key~~@#__destroy$pn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$pn0~ppn0 virtual
        [bits 32]
@$xc@std@__1@#allocator_traits$#allocator$p17@Accelerators@Key~~@#__destroy$pn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$pn0~ppn0:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$uii?0?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$uii?0?4bool?0?~@$bdtr$qv:
L_59438:
L_59439:
        ret
section code
section code
        section vsc@std@__1@#allocator$17@Accelerators@Key~@$bdtr$qv virtual
        [bits 32]
@std@__1@#allocator$17@Accelerators@Key~@$bdtr$qv:
L_59444:
L_59445:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$17@Accelerators@Key~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$17@Accelerators@Key~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_59450:
L_59464:
L_59451:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$ui#allocator$17@Accelerators@Key~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$ui#allocator$17@Accelerators@Key~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_59470:
L_59497:
L_59484:
L_59512:
L_59471:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@begin$qv virtual
        [bits 32]
@std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@begin$qv:
        add     esp,byte 0ffffffe4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_59518:
        mov     ecx,dword [esp+04h+02ch]
        mov     esi,dword [esp+08h+02ch]
; Line 1140:     __map_pointer __mp = __map_.begin() + __start_ / __block_size; 
        mov     eax,esi
        add     eax,byte 04h
        mov     edi,dword [eax+08h]
        mov     eax,dword [esi+01ch]
        mov     ebx,dword [@std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@__block_size]
        sub     edx,edx
        xor     edx,edx
        div     ebx
        shl     eax,02h
        add     edi,eax
        mov     edx,edi
        mov     eax,esi
        add     eax,byte 04h
        mov     ebp,dword [eax+0ch]
        mov     eax,dword [eax+08h]
        cmp     ebp,eax
        sete    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_59556
        xor     edx,edx
        jmp     L_59557
L_59556:
        mov     ebp,dword [edx]
        mov     eax,dword [esi+01ch]
        sub     edx,edx
        xor     edx,edx
        div     ebx
        imul    eax,edx,byte 0ch
        add     eax,ebp
        mov     edx,eax
L_59557:
        mov     eax,edi
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
        mov     eax,dword [esp+04h+02ch]
; Line 1142: } 
L_59519:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@end$qv virtual
        [bits 32]
@std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@end$qv:
        add     esp,byte 0ffffffd4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_59578:
        mov     ebp,dword [esp+04h+03ch]
        mov     edi,dword [esp+08h+03ch]
; Line 1156:     size_type __p = size() + __start_; 
        mov     eax,edi
        add     eax,byte 020h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-02ch+03ch],eax
        and     eax,eax
        je      L_59628
        mov     eax,dword [esp-02ch+03ch]
        jmp     L_59629
L_59628:
        mov     eax,dword [esp-02ch+03ch]
L_59629:
; Line 2305:   } 
        mov     ecx,dword [edi+01ch]
        add     ecx,dword [eax]
        mov     eax,edi
        add     eax,byte 04h
        mov     esi,dword [eax+08h]
        mov     ebx,dword [@std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@__block_size]
        mov     eax,ecx
        sub     edx,edx
        xor     edx,edx
        div     ebx
        shl     eax,02h
        add     eax,esi
        mov     edx,ecx
        mov     ecx,eax
        mov     esi,ebp
        mov     ebp,ecx
        mov     eax,edi
        add     eax,byte 04h
        mov     edi,dword [eax+0ch]
        mov     eax,dword [eax+08h]
        cmp     edi,eax
        sete    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_59666
        xor     edx,edx
        jmp     L_59667
L_59666:
        mov     edi,dword [ebp]
        mov     eax,edx
        sub     edx,edx
        xor     edx,edx
        div     ebx
        imul    eax,edx,byte 0ch
        add     eax,edi
        mov     edx,eax
L_59667:
        mov     eax,ecx
        mov     dword [esi],eax
        mov     dword [esi+04h],edx
        mov     eax,dword [esp+04h+03ch]
; Line 1159: } 
L_59579:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 02ch
        ret
section code
section code
        section vsc@$bneq$qrx#__deque_iterator$17@Accelerators@Keypn0rn0ppn0ii?341?~rx#__deque_iterator$n0pn0rn0ppn0ii?341?~ virtual
        [bits 32]
@$bneq$qrx#__deque_iterator$17@Accelerators@Keypn0rn0ppn0ii?341?~rx#__deque_iterator$n0pn0rn0ppn0ii?341?~:
; Line 418:         {return !(__x == __y);} 
L_59688:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        push    ecx
        push    eax
        call    @$bequ$qrx#__deque_iterator$17@Accelerators@Keypn0rn0ppn0ii?341?~rx#__deque_iterator$n0pn0rn0ppn0ii?341?~
        pop     ecx
        pop     ecx
        and     al,al
        sete    al
        and     eax,byte 01h
        setne   al
L_59689:
        ret
section code
section code
        section vsc@std@__1@#allocator_traits$#allocator$17@Accelerators@Key~~@#__destroy$n0~$q#integral_constant$4bool3_Tp?0?~r#allocator$n0~pn0 virtual
        [bits 32]
@std@__1@#allocator_traits$#allocator$17@Accelerators@Key~~@#__destroy$n0~$q#integral_constant$4bool3_Tp?0?~r#allocator$n0~pn0:
; Line 1797:             { 
        add     esp,byte 0ffffffb4h
L_59696:
        push    dword @$xc@std@__1@#allocator_traits$#allocator$17@Accelerators@Key~~@#__destroy$n0~$q#integral_constant$4bool3_Tp?0?~r#allocator$n0~pn0
        lea     eax,[esp-048h+050h]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_59699:
; Line 1798:                 __p->~_Tp(); 
        mov     dword [esp-048h+014h+04ch],01h
L_59714:
; Line 1799:             } 
L_59697:
        call    @_RundownException$qv
        add     esp,byte 04ch
        ret
section code
section code
        section vsc@$xt@17@Accelerators@Key virtual
        [bits 32]
@$xt@17@Accelerators@Key:
        dd      @Accelerators@Key@$bdtr$qv+0
        dd      0ch
        dd      0400h
        db      041h
        db      063h
        db      063h
        db      065h
        db      06ch
        db      065h
        db      072h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      073h
        db      04bh
        db      065h
        db      079h
        db      00h
        dd      00h
section code
section code
        section vsc@$xc@std@__1@#allocator_traits$#allocator$17@Accelerators@Key~~@#__destroy$n0~$q#integral_constant$4bool3_Tp?0?~r#allocator$n0~pn0 virtual
        [bits 32]
@$xc@std@__1@#allocator_traits$#allocator$17@Accelerators@Key~~@#__destroy$n0~$q#integral_constant$4bool3_Tp?0?~r#allocator$n0~pn0:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#__libcpp_trivial_destructor$p17@Accelerators@Key~@$bctr$qv virtual
        [bits 32]
@std@__1@#__libcpp_trivial_destructor$p17@Accelerators@Key~@$bctr$qv:
        push    ecx
L_59720:
L_59721:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__libcpp_trivial_destructor$p17@Accelerators@Key~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__libcpp_trivial_destructor$p17@Accelerators@Key~@$bdtr$qv:
        push    ecx
L_59744:
L_59758:
L_59745:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p17@Accelerators@Key#allocator$pn0~~@__destruct_at_begin$qppn0#integral_constant$4bool3_Tp?1?~ virtual
        [bits 32]
@std@__1@#__split_buffer$p17@Accelerators@Key#allocator$pn0~~@__destruct_at_begin$qppn0#integral_constant$4bool3_Tp?1?~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
        push    ebx
        push    esi
L_59764:
        mov     ebx,dword [ebp+0ch]
        mov     esi,dword [ebp+08h]
        push    dword @$xc@std@__1@#__split_buffer$p17@Accelerators@Key#allocator$pn0~~@__destruct_at_begin$qppn0#integral_constant$4bool3_Tp?1?~
        lea     eax,[ebp-048h]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_59767:
; Line 294:     __begin_ = __new_begin; 
        mov     dword [esi+08h],ebx
; Line 295: } 
L_59765:
        call    @_RundownException$qv
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@$xc@std@__1@#__split_buffer$p17@Accelerators@Key#allocator$pn0~~@__destruct_at_begin$qppn0#integral_constant$4bool3_Tp?1?~ virtual
        [bits 32]
@$xc@std@__1@#__split_buffer$p17@Accelerators@Key#allocator$pn0~~@__destruct_at_begin$qppn0#integral_constant$4bool3_Tp?1?~:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$ppp6Cursori?0?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$ppp6Cursori?0?4bool?0?~@$bdtr$qv:
L_59774:
L_59775:
        ret
section code
section code
        section vsc@std@__1@#allocator$pp6Cursor~@$bdtr$qv virtual
        [bits 32]
@std@__1@#allocator$pp6Cursor~@$bdtr$qv:
L_59780:
L_59781:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$pp6Cursor~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$pp6Cursor~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_59786:
L_59800:
L_59787:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$ppp6Cursor#allocator$ppn0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$ppp6Cursor#allocator$ppn0~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_59806:
L_59833:
L_59820:
L_59848:
L_59807:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#allocator_traits$#allocator$pp6Cursor~~@#__destroy$ppn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$ppn0~pppn0 virtual
        [bits 32]
@std@__1@#allocator_traits$#allocator$pp6Cursor~~@#__destroy$ppn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$ppn0~pppn0:
; Line 1797:             { 
        add     esp,byte 0ffffffb8h
L_59854:
        push    dword @$xc@std@__1@#allocator_traits$#allocator$pp6Cursor~~@#__destroy$ppn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$ppn0~pppn0
        lea     eax,[esp-048h+04ch]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_59857:
; Line 1798:                 __p->~_Tp(); 
; Line 1799:             } 
L_59855:
        call    @_RundownException$qv
        add     esp,byte 048h
        ret
section code
section code
        section vsc@$xc@std@__1@#allocator_traits$#allocator$pp6Cursor~~@#__destroy$ppn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$ppn0~pppn0 virtual
        [bits 32]
@$xc@std@__1@#allocator_traits$#allocator$pp6Cursor~~@#__destroy$ppn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$ppn0~pppn0:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#allocator$p6Cursor~@$bdtr$qv virtual
        [bits 32]
@std@__1@#allocator$p6Cursor~@$bdtr$qv:
L_59864:
L_59865:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$p6Cursor~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$p6Cursor~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_59870:
L_59884:
L_59871:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$ui#allocator$p6Cursor~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$ui#allocator$p6Cursor~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_59890:
L_59917:
L_59904:
L_59932:
L_59891:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__deque_base$p6Cursor#allocator$pn0~~@begin$qv virtual
        [bits 32]
@std@__1@#__deque_base$p6Cursor#allocator$pn0~~@begin$qv:
        add     esp,byte 0ffffffe4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_59938:
        mov     ecx,dword [esp+04h+02ch]
        mov     esi,dword [esp+08h+02ch]
; Line 1140:     __map_pointer __mp = __map_.begin() + __start_ / __block_size; 
        mov     eax,esi
        add     eax,byte 04h
        mov     edi,dword [eax+08h]
        mov     eax,dword [esi+01ch]
        mov     ebx,dword [@std@__1@#__deque_base$p6Cursor#allocator$pn0~~@__block_size]
        sub     edx,edx
        xor     edx,edx
        div     ebx
        shl     eax,02h
        add     edi,eax
        mov     edx,edi
        mov     eax,esi
        add     eax,byte 04h
        mov     ebp,dword [eax+0ch]
        mov     eax,dword [eax+08h]
        cmp     ebp,eax
        sete    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_59976
        xor     edx,edx
        jmp     L_59977
L_59976:
        mov     ebp,dword [edx]
        mov     eax,dword [esi+01ch]
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
        shl     eax,02h
        add     eax,ebp
        mov     edx,eax
L_59977:
        mov     eax,edi
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
        mov     eax,dword [esp+04h+02ch]
; Line 1142: } 
L_59939:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__deque_base$p6Cursor#allocator$pn0~~@end$qv virtual
        [bits 32]
@std@__1@#__deque_base$p6Cursor#allocator$pn0~~@end$qv:
        add     esp,byte 0ffffffd4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_59998:
        mov     ebp,dword [esp+04h+03ch]
        mov     edi,dword [esp+08h+03ch]
; Line 1156:     size_type __p = size() + __start_; 
        mov     eax,edi
        add     eax,byte 020h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-02ch+03ch],eax
        and     eax,eax
        je      L_60048
        mov     eax,dword [esp-02ch+03ch]
        jmp     L_60049
L_60048:
        mov     eax,dword [esp-02ch+03ch]
L_60049:
; Line 2305:   } 
        mov     ecx,dword [edi+01ch]
        add     ecx,dword [eax]
        mov     eax,edi
        add     eax,byte 04h
        mov     esi,dword [eax+08h]
        mov     ebx,dword [@std@__1@#__deque_base$p6Cursor#allocator$pn0~~@__block_size]
        mov     eax,ecx
        sub     edx,edx
        xor     edx,edx
        div     ebx
        shl     eax,02h
        add     eax,esi
        mov     edx,ecx
        mov     ecx,eax
        mov     esi,ebp
        mov     ebp,ecx
        mov     eax,edi
        add     eax,byte 04h
        mov     edi,dword [eax+0ch]
        mov     eax,dword [eax+08h]
        cmp     edi,eax
        sete    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_60086
        xor     edx,edx
        jmp     L_60087
L_60086:
        mov     edi,dword [ebp]
        mov     eax,edx
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
        shl     eax,02h
        add     eax,edi
        mov     edx,eax
L_60087:
        mov     eax,ecx
        mov     dword [esi],eax
        mov     dword [esi+04h],edx
        mov     eax,dword [esp+04h+03ch]
; Line 1159: } 
L_59999:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 02ch
        ret
section code
section code
        section vsc@$bneq$qrx#__deque_iterator$p6Cursorppn0rpn0pppn0ii?1024?~rx#__deque_iterator$pn0ppn0rpn0pppn0ii?1024?~ virtual
        [bits 32]
@$bneq$qrx#__deque_iterator$p6Cursorppn0rpn0pppn0ii?1024?~rx#__deque_iterator$pn0ppn0rpn0pppn0ii?1024?~:
; Line 418:         {return !(__x == __y);} 
L_60108:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        push    ecx
        push    eax
        call    @$bequ$qrx#__deque_iterator$p6Cursorppn0rpn0pppn0ii?1024?~rx#__deque_iterator$pn0ppn0rpn0pppn0ii?1024?~
        pop     ecx
        pop     ecx
        and     al,al
        sete    al
        and     eax,byte 01h
        setne   al
L_60109:
        ret
section code
section code
        section vsc@std@__1@#allocator_traits$#allocator$p6Cursor~~@#__destroy$pn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$pn0~ppn0 virtual
        [bits 32]
@std@__1@#allocator_traits$#allocator$p6Cursor~~@#__destroy$pn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$pn0~ppn0:
; Line 1797:             { 
        add     esp,byte 0ffffffb8h
L_60116:
        push    dword @$xc@std@__1@#allocator_traits$#allocator$p6Cursor~~@#__destroy$pn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$pn0~ppn0
        lea     eax,[esp-048h+04ch]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_60119:
; Line 1798:                 __p->~_Tp(); 
; Line 1799:             } 
L_60117:
        call    @_RundownException$qv
        add     esp,byte 048h
        ret
section code
section code
        section vsc@$xc@std@__1@#allocator_traits$#allocator$p6Cursor~~@#__destroy$pn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$pn0~ppn0 virtual
        [bits 32]
@$xc@std@__1@#allocator_traits$#allocator$p6Cursor~~@#__destroy$pn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$pn0~ppn0:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#__libcpp_trivial_destructor$pp6Cursor~@$bctr$qv virtual
        [bits 32]
@std@__1@#__libcpp_trivial_destructor$pp6Cursor~@$bctr$qv:
        push    ecx
L_60126:
L_60127:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__libcpp_trivial_destructor$pp6Cursor~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__libcpp_trivial_destructor$pp6Cursor~@$bdtr$qv:
        push    ecx
L_60150:
L_60164:
L_60151:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$pp6Cursor#allocator$ppn0~~@__destruct_at_begin$qpppn0#integral_constant$4bool3_Tp?1?~ virtual
        [bits 32]
@std@__1@#__split_buffer$pp6Cursor#allocator$ppn0~~@__destruct_at_begin$qpppn0#integral_constant$4bool3_Tp?1?~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
        push    ebx
        push    esi
L_60170:
        mov     ebx,dword [ebp+0ch]
        mov     esi,dword [ebp+08h]
        push    dword @$xc@std@__1@#__split_buffer$pp6Cursor#allocator$ppn0~~@__destruct_at_begin$qpppn0#integral_constant$4bool3_Tp?1?~
        lea     eax,[ebp-048h]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_60173:
; Line 294:     __begin_ = __new_begin; 
        mov     dword [esi+08h],ebx
; Line 295: } 
L_60171:
        call    @_RundownException$qv
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@$xc@std@__1@#__split_buffer$pp6Cursor#allocator$ppn0~~@__destruct_at_begin$qpppn0#integral_constant$4bool3_Tp?1?~ virtual
        [bits 32]
@$xc@std@__1@#__split_buffer$pp6Cursor#allocator$ppn0~~@__destruct_at_begin$qpppn0#integral_constant$4bool3_Tp?1?~:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$pp#unique_ptr$7Control#default_delete$n0~~i?0?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$pp#unique_ptr$7Control#default_delete$n0~~i?0?4bool?0?~@$bdtr$qv:
L_60180:
L_60181:
        ret
section code
section code
        section vsc@std@__1@#allocator$p#unique_ptr$7Control#default_delete$n0~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#allocator$p#unique_ptr$7Control#default_delete$n0~~~@$bdtr$qv:
L_60186:
L_60187:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$7Control#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$7Control#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_60192:
L_60206:
L_60193:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$pp#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$pp#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_60212:
L_60239:
L_60226:
L_60254:
L_60213:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#allocator_traits$#allocator$p#unique_ptr$7Control#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~ virtual
        [bits 32]
@std@__1@#allocator_traits$#allocator$p#unique_ptr$7Control#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~:
; Line 1797:             { 
        add     esp,byte 0ffffffb8h
L_60260:
        push    dword @$xc@std@__1@#allocator_traits$#allocator$p#unique_ptr$7Control#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~
        lea     eax,[esp-048h+04ch]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_60263:
; Line 1798:                 __p->~_Tp(); 
; Line 1799:             } 
L_60261:
        call    @_RundownException$qv
        add     esp,byte 048h
        ret
section code
section code
        section vsc@$xc@std@__1@#allocator_traits$#allocator$p#unique_ptr$7Control#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~ virtual
        [bits 32]
@$xc@std@__1@#allocator_traits$#allocator$p#unique_ptr$7Control#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#allocator$#unique_ptr$7Control#default_delete$n0~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#allocator$#unique_ptr$7Control#default_delete$n0~~~@$bdtr$qv:
L_60270:
L_60271:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$7Control#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$7Control#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_60276:
L_60290:
L_60277:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$ui#allocator$#unique_ptr$7Control#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$ui#allocator$#unique_ptr$7Control#default_delete$n0~~~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_60296:
L_60323:
L_60310:
L_60338:
L_60297:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@begin$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@begin$qv:
        add     esp,byte 0ffffffe4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_60344:
        mov     ecx,dword [esp+04h+02ch]
        mov     esi,dword [esp+08h+02ch]
; Line 1140:     __map_pointer __mp = __map_.begin() + __start_ / __block_size; 
        mov     eax,esi
        add     eax,byte 04h
        mov     edi,dword [eax+08h]
        mov     eax,dword [esi+01ch]
        mov     ebx,dword [@std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size]
        sub     edx,edx
        xor     edx,edx
        div     ebx
        shl     eax,02h
        add     edi,eax
        mov     edx,edi
        mov     eax,esi
        add     eax,byte 04h
        mov     ebp,dword [eax+0ch]
        mov     eax,dword [eax+08h]
        cmp     ebp,eax
        sete    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_60382
        xor     edx,edx
        jmp     L_60383
L_60382:
        mov     ebp,dword [edx]
        mov     eax,dword [esi+01ch]
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
        shl     eax,03h
        add     eax,ebp
        mov     edx,eax
L_60383:
        mov     eax,edi
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
        mov     eax,dword [esp+04h+02ch]
; Line 1142: } 
L_60345:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@end$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@end$qv:
        add     esp,byte 0ffffffd4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_60404:
        mov     ebp,dword [esp+04h+03ch]
        mov     edi,dword [esp+08h+03ch]
; Line 1156:     size_type __p = size() + __start_; 
        mov     eax,edi
        add     eax,byte 020h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-02ch+03ch],eax
        and     eax,eax
        je      L_60454
        mov     eax,dword [esp-02ch+03ch]
        jmp     L_60455
L_60454:
        mov     eax,dword [esp-02ch+03ch]
L_60455:
; Line 2305:   } 
        mov     ecx,dword [edi+01ch]
        add     ecx,dword [eax]
        mov     eax,edi
        add     eax,byte 04h
        mov     esi,dword [eax+08h]
        mov     ebx,dword [@std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size]
        mov     eax,ecx
        sub     edx,edx
        xor     edx,edx
        div     ebx
        shl     eax,02h
        add     eax,esi
        mov     edx,ecx
        mov     ecx,eax
        mov     esi,ebp
        mov     ebp,ecx
        mov     eax,edi
        add     eax,byte 04h
        mov     edi,dword [eax+0ch]
        mov     eax,dword [eax+08h]
        cmp     edi,eax
        sete    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_60492
        xor     edx,edx
        jmp     L_60493
L_60492:
        mov     edi,dword [ebp]
        mov     eax,edx
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
        shl     eax,03h
        add     eax,edi
        mov     edx,eax
L_60493:
        mov     eax,ecx
        mov     dword [esi],eax
        mov     dword [esi+04h],edx
        mov     eax,dword [esp+04h+03ch]
; Line 1159: } 
L_60405:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 02ch
        ret
section code
section code
        section vsc@$bneq$qrx#__deque_iterator$#unique_ptr$7Control#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~ virtual
        [bits 32]
@$bneq$qrx#__deque_iterator$#unique_ptr$7Control#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~:
; Line 418:         {return !(__x == __y);} 
L_60514:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        push    ecx
        push    eax
        call    @$bequ$qrx#__deque_iterator$#unique_ptr$7Control#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~
        pop     ecx
        pop     ecx
        and     al,al
        sete    al
        and     eax,byte 01h
        setne   al
L_60515:
        ret
section code
section code
        section vsc@std@__1@#allocator_traits$#allocator$#unique_ptr$7Control#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~ virtual
        [bits 32]
@std@__1@#allocator_traits$#allocator$#unique_ptr$7Control#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~:
; Line 1797:             { 
        add     esp,0ffffff70h
        push    ebx
        push    esi
L_60522:
        mov     ebx,dword [esp+0ch+098h]
        push    dword @$xc@std@__1@#allocator_traits$#allocator$#unique_ptr$7Control#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~
        lea     eax,[esp-048h+09ch]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_60525:
; Line 1798:                 __p->~_Tp(); 
        mov     dword [esp-048h+014h+098h],01h
        mov     ecx,ebx
        xor     edx,edx
; Line 2615:     pointer __tmp = __ptr_.first(); 
        mov     eax,ecx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-088h+098h],eax
        and     eax,eax
        je      L_60594
        mov     eax,dword [esp-088h+098h]
        jmp     L_60595
L_60594:
        mov     eax,dword [esp-088h+098h]
L_60595:
; Line 2305:   } 
        mov     eax,dword [eax]
        mov     esi,ecx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-088h+098h],esi
        and     esi,esi
        je      L_60628
        mov     esi,dword [esp-088h+098h]
        jmp     L_60629
L_60628:
        mov     esi,dword [esp-088h+098h]
L_60629:
; Line 2305:   } 
        mov     dword [esi],edx
        and     eax,eax
        je      L_60545
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-08ch+098h],ecx
L_60677:
L_60678:
; Line 2315:   } 
; Line 2359:     static_assert(sizeof(_Tp) > 0, 
        mov     dword [esp-090h+098h],eax
        and     eax,eax
        je      L_60681
        mov     eax,dword [esp-090h+098h]
        push    eax
        call    @Control@$bdtr$qv
        pop     ecx
        mov     eax,dword [esp-090h+098h]
        push    eax
        call    @$bdel$qpv
        pop     ecx
L_60681:
; Line 2364:   } 
; Line 2365: }; 
; Line 2365: }; 
L_60645:
L_60545:
; Line 2619:   } 
L_60562:
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#default_delete$7Control~@$bdtr$qv
        pop     ecx
L_60708:
L_60722:
L_60695:
L_60542:
; Line 1799:             } 
L_60523:
        call    @_RundownException$qv
        pop     esi
        pop     ebx
        add     esp,090h
        ret
section code
section code
        section vsc@$xt@#__compressed_pair_elem$p7Controli?0?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$p7Controli?0?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$p7Controli?0?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#default_delete$7Control~ virtual
        [bits 32]
@$xt@#default_delete$7Control~:
        dd      @std@__1@#default_delete$7Control~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      064h
        db      065h
        db      066h
        db      061h
        db      075h
        db      06ch
        db      074h
        db      05fh
        db      064h
        db      065h
        db      06ch
        db      065h
        db      074h
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#default_delete$7Control~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#default_delete$7Control~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#default_delete$7Control~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$p7Control#default_delete$n0~~ virtual
        [bits 32]
@$xt@#__compressed_pair$p7Control#default_delete$n0~~:
        dd      @std@__1@#__compressed_pair$p7Control#default_delete$n0~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$p7Controli?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#default_delete$7Control~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#unique_ptr$7Control#default_delete$n0~~ virtual
        [bits 32]
@$xt@#unique_ptr$7Control#default_delete$n0~~:
        dd      @std@__1@#unique_ptr$7Control#default_delete$n0~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xc@std@__1@#allocator_traits$#allocator$#unique_ptr$7Control#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~ virtual
        [bits 32]
@$xc@std@__1@#allocator_traits$#allocator$#unique_ptr$7Control#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#__libcpp_trivial_destructor$p#unique_ptr$7Control#default_delete$n0~~~@$bctr$qv virtual
        [bits 32]
@std@__1@#__libcpp_trivial_destructor$p#unique_ptr$7Control#default_delete$n0~~~@$bctr$qv:
        push    ecx
L_60730:
L_60731:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__libcpp_trivial_destructor$p#unique_ptr$7Control#default_delete$n0~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__libcpp_trivial_destructor$p#unique_ptr$7Control#default_delete$n0~~~@$bdtr$qv:
        push    ecx
L_60754:
L_60768:
L_60755:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~ virtual
        [bits 32]
@std@__1@#__split_buffer$p#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
        push    ebx
        push    esi
L_60774:
        mov     ebx,dword [ebp+0ch]
        mov     esi,dword [ebp+08h]
        push    dword @$xc@std@__1@#__split_buffer$p#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~
        lea     eax,[ebp-048h]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_60777:
; Line 294:     __begin_ = __new_begin; 
        mov     dword [esi+08h],ebx
; Line 295: } 
L_60775:
        call    @_RundownException$qv
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@$xc@std@__1@#__split_buffer$p#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~ virtual
        [bits 32]
@$xc@std@__1@#__split_buffer$p#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$ppp4Iconi?0?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$ppp4Iconi?0?4bool?0?~@$bdtr$qv:
L_60784:
L_60785:
        ret
section code
section code
        section vsc@std@__1@#allocator$pp4Icon~@$bdtr$qv virtual
        [bits 32]
@std@__1@#allocator$pp4Icon~@$bdtr$qv:
L_60790:
L_60791:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$pp4Icon~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$pp4Icon~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_60796:
L_60810:
L_60797:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$ppp4Icon#allocator$ppn0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$ppp4Icon#allocator$ppn0~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_60816:
L_60843:
L_60830:
L_60858:
L_60817:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#allocator_traits$#allocator$pp4Icon~~@#__destroy$ppn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$ppn0~pppn0 virtual
        [bits 32]
@std@__1@#allocator_traits$#allocator$pp4Icon~~@#__destroy$ppn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$ppn0~pppn0:
; Line 1797:             { 
        add     esp,byte 0ffffffb8h
L_60864:
        push    dword @$xc@std@__1@#allocator_traits$#allocator$pp4Icon~~@#__destroy$ppn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$ppn0~pppn0
        lea     eax,[esp-048h+04ch]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_60867:
; Line 1798:                 __p->~_Tp(); 
; Line 1799:             } 
L_60865:
        call    @_RundownException$qv
        add     esp,byte 048h
        ret
section code
section code
        section vsc@$xc@std@__1@#allocator_traits$#allocator$pp4Icon~~@#__destroy$ppn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$ppn0~pppn0 virtual
        [bits 32]
@$xc@std@__1@#allocator_traits$#allocator$pp4Icon~~@#__destroy$ppn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$ppn0~pppn0:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#allocator$p4Icon~@$bdtr$qv virtual
        [bits 32]
@std@__1@#allocator$p4Icon~@$bdtr$qv:
L_60874:
L_60875:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$p4Icon~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$p4Icon~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_60880:
L_60894:
L_60881:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$ui#allocator$p4Icon~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$ui#allocator$p4Icon~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_60900:
L_60927:
L_60914:
L_60942:
L_60901:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__deque_base$p4Icon#allocator$pn0~~@begin$qv virtual
        [bits 32]
@std@__1@#__deque_base$p4Icon#allocator$pn0~~@begin$qv:
        add     esp,byte 0ffffffe4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_60948:
        mov     ecx,dword [esp+04h+02ch]
        mov     esi,dword [esp+08h+02ch]
; Line 1140:     __map_pointer __mp = __map_.begin() + __start_ / __block_size; 
        mov     eax,esi
        add     eax,byte 04h
        mov     edi,dword [eax+08h]
        mov     eax,dword [esi+01ch]
        mov     ebx,dword [@std@__1@#__deque_base$p4Icon#allocator$pn0~~@__block_size]
        sub     edx,edx
        xor     edx,edx
        div     ebx
        shl     eax,02h
        add     edi,eax
        mov     edx,edi
        mov     eax,esi
        add     eax,byte 04h
        mov     ebp,dword [eax+0ch]
        mov     eax,dword [eax+08h]
        cmp     ebp,eax
        sete    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_60986
        xor     edx,edx
        jmp     L_60987
L_60986:
        mov     ebp,dword [edx]
        mov     eax,dword [esi+01ch]
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
        shl     eax,02h
        add     eax,ebp
        mov     edx,eax
L_60987:
        mov     eax,edi
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
        mov     eax,dword [esp+04h+02ch]
; Line 1142: } 
L_60949:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__deque_base$p4Icon#allocator$pn0~~@end$qv virtual
        [bits 32]
@std@__1@#__deque_base$p4Icon#allocator$pn0~~@end$qv:
        add     esp,byte 0ffffffd4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_61008:
        mov     ebp,dword [esp+04h+03ch]
        mov     edi,dword [esp+08h+03ch]
; Line 1156:     size_type __p = size() + __start_; 
        mov     eax,edi
        add     eax,byte 020h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-02ch+03ch],eax
        and     eax,eax
        je      L_61058
        mov     eax,dword [esp-02ch+03ch]
        jmp     L_61059
L_61058:
        mov     eax,dword [esp-02ch+03ch]
L_61059:
; Line 2305:   } 
        mov     ecx,dword [edi+01ch]
        add     ecx,dword [eax]
        mov     eax,edi
        add     eax,byte 04h
        mov     esi,dword [eax+08h]
        mov     ebx,dword [@std@__1@#__deque_base$p4Icon#allocator$pn0~~@__block_size]
        mov     eax,ecx
        sub     edx,edx
        xor     edx,edx
        div     ebx
        shl     eax,02h
        add     eax,esi
        mov     edx,ecx
        mov     ecx,eax
        mov     esi,ebp
        mov     ebp,ecx
        mov     eax,edi
        add     eax,byte 04h
        mov     edi,dword [eax+0ch]
        mov     eax,dword [eax+08h]
        cmp     edi,eax
        sete    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_61096
        xor     edx,edx
        jmp     L_61097
L_61096:
        mov     edi,dword [ebp]
        mov     eax,edx
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
        shl     eax,02h
        add     eax,edi
        mov     edx,eax
L_61097:
        mov     eax,ecx
        mov     dword [esi],eax
        mov     dword [esi+04h],edx
        mov     eax,dword [esp+04h+03ch]
; Line 1159: } 
L_61009:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 02ch
        ret
section code
section code
        section vsc@$bneq$qrx#__deque_iterator$p4Iconppn0rpn0pppn0ii?1024?~rx#__deque_iterator$pn0ppn0rpn0pppn0ii?1024?~ virtual
        [bits 32]
@$bneq$qrx#__deque_iterator$p4Iconppn0rpn0pppn0ii?1024?~rx#__deque_iterator$pn0ppn0rpn0pppn0ii?1024?~:
; Line 418:         {return !(__x == __y);} 
L_61118:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        push    ecx
        push    eax
        call    @$bequ$qrx#__deque_iterator$p4Iconppn0rpn0pppn0ii?1024?~rx#__deque_iterator$pn0ppn0rpn0pppn0ii?1024?~
        pop     ecx
        pop     ecx
        and     al,al
        sete    al
        and     eax,byte 01h
        setne   al
L_61119:
        ret
section code
section code
        section vsc@std@__1@#allocator_traits$#allocator$p4Icon~~@#__destroy$pn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$pn0~ppn0 virtual
        [bits 32]
@std@__1@#allocator_traits$#allocator$p4Icon~~@#__destroy$pn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$pn0~ppn0:
; Line 1797:             { 
        add     esp,byte 0ffffffb8h
L_61126:
        push    dword @$xc@std@__1@#allocator_traits$#allocator$p4Icon~~@#__destroy$pn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$pn0~ppn0
        lea     eax,[esp-048h+04ch]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_61129:
; Line 1798:                 __p->~_Tp(); 
; Line 1799:             } 
L_61127:
        call    @_RundownException$qv
        add     esp,byte 048h
        ret
section code
section code
        section vsc@$xc@std@__1@#allocator_traits$#allocator$p4Icon~~@#__destroy$pn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$pn0~ppn0 virtual
        [bits 32]
@$xc@std@__1@#allocator_traits$#allocator$p4Icon~~@#__destroy$pn0~$q#integral_constant$4bool3_Tp?0?~r#allocator$pn0~ppn0:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#__libcpp_trivial_destructor$pp4Icon~@$bctr$qv virtual
        [bits 32]
@std@__1@#__libcpp_trivial_destructor$pp4Icon~@$bctr$qv:
        push    ecx
L_61136:
L_61137:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__libcpp_trivial_destructor$pp4Icon~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__libcpp_trivial_destructor$pp4Icon~@$bdtr$qv:
        push    ecx
L_61160:
L_61174:
L_61161:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$pp4Icon#allocator$ppn0~~@__destruct_at_begin$qpppn0#integral_constant$4bool3_Tp?1?~ virtual
        [bits 32]
@std@__1@#__split_buffer$pp4Icon#allocator$ppn0~~@__destruct_at_begin$qpppn0#integral_constant$4bool3_Tp?1?~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
        push    ebx
        push    esi
L_61180:
        mov     ebx,dword [ebp+0ch]
        mov     esi,dword [ebp+08h]
        push    dword @$xc@std@__1@#__split_buffer$pp4Icon#allocator$ppn0~~@__destruct_at_begin$qpppn0#integral_constant$4bool3_Tp?1?~
        lea     eax,[ebp-048h]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_61183:
; Line 294:     __begin_ = __new_begin; 
        mov     dword [esi+08h],ebx
; Line 295: } 
L_61181:
        call    @_RundownException$qv
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@$xc@std@__1@#__split_buffer$pp4Icon#allocator$ppn0~~@__destruct_at_begin$qpppn0#integral_constant$4bool3_Tp?1?~ virtual
        [bits 32]
@$xc@std@__1@#__split_buffer$pp4Icon#allocator$ppn0~~@__destruct_at_begin$qpppn0#integral_constant$4bool3_Tp?1?~:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$pp#unique_ptr$8MenuItem#default_delete$n0~~i?0?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$pp#unique_ptr$8MenuItem#default_delete$n0~~i?0?4bool?0?~@$bdtr$qv:
L_61190:
L_61191:
        ret
section code
section code
        section vsc@std@__1@#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~@$bdtr$qv:
L_61196:
L_61197:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_61202:
L_61216:
L_61203:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$pp#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$pp#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_61222:
L_61249:
L_61236:
L_61264:
L_61223:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#allocator_traits$#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~ virtual
        [bits 32]
@std@__1@#allocator_traits$#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~:
; Line 1797:             { 
        add     esp,byte 0ffffffb8h
L_61270:
        push    dword @$xc@std@__1@#allocator_traits$#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~
        lea     eax,[esp-048h+04ch]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_61273:
; Line 1798:                 __p->~_Tp(); 
; Line 1799:             } 
L_61271:
        call    @_RundownException$qv
        add     esp,byte 048h
        ret
section code
section code
        section vsc@$xc@std@__1@#allocator_traits$#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~ virtual
        [bits 32]
@$xc@std@__1@#allocator_traits$#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~@$bdtr$qv:
L_61280:
L_61281:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_61286:
L_61300:
L_61287:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$ui#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$ui#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_61306:
L_61333:
L_61320:
L_61348:
L_61307:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@begin$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@begin$qv:
        add     esp,byte 0ffffffe4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_61354:
        mov     ecx,dword [esp+04h+02ch]
        mov     esi,dword [esp+08h+02ch]
; Line 1140:     __map_pointer __mp = __map_.begin() + __start_ / __block_size; 
        mov     eax,esi
        add     eax,byte 04h
        mov     edi,dword [eax+08h]
        mov     eax,dword [esi+01ch]
        mov     ebx,dword [@std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size]
        sub     edx,edx
        xor     edx,edx
        div     ebx
        shl     eax,02h
        add     edi,eax
        mov     edx,edi
        mov     eax,esi
        add     eax,byte 04h
        mov     ebp,dword [eax+0ch]
        mov     eax,dword [eax+08h]
        cmp     ebp,eax
        sete    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_61392
        xor     edx,edx
        jmp     L_61393
L_61392:
        mov     ebp,dword [edx]
        mov     eax,dword [esi+01ch]
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
        shl     eax,03h
        add     eax,ebp
        mov     edx,eax
L_61393:
        mov     eax,edi
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
        mov     eax,dword [esp+04h+02ch]
; Line 1142: } 
L_61355:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@end$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@end$qv:
        add     esp,byte 0ffffffd4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_61414:
        mov     ebp,dword [esp+04h+03ch]
        mov     edi,dword [esp+08h+03ch]
; Line 1156:     size_type __p = size() + __start_; 
        mov     eax,edi
        add     eax,byte 020h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-02ch+03ch],eax
        and     eax,eax
        je      L_61464
        mov     eax,dword [esp-02ch+03ch]
        jmp     L_61465
L_61464:
        mov     eax,dword [esp-02ch+03ch]
L_61465:
; Line 2305:   } 
        mov     ecx,dword [edi+01ch]
        add     ecx,dword [eax]
        mov     eax,edi
        add     eax,byte 04h
        mov     esi,dword [eax+08h]
        mov     ebx,dword [@std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size]
        mov     eax,ecx
        sub     edx,edx
        xor     edx,edx
        div     ebx
        shl     eax,02h
        add     eax,esi
        mov     edx,ecx
        mov     ecx,eax
        mov     esi,ebp
        mov     ebp,ecx
        mov     eax,edi
        add     eax,byte 04h
        mov     edi,dword [eax+0ch]
        mov     eax,dword [eax+08h]
        cmp     edi,eax
        sete    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_61502
        xor     edx,edx
        jmp     L_61503
L_61502:
        mov     edi,dword [ebp]
        mov     eax,edx
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
        shl     eax,03h
        add     eax,edi
        mov     edx,eax
L_61503:
        mov     eax,ecx
        mov     dword [esi],eax
        mov     dword [esi+04h],edx
        mov     eax,dword [esp+04h+03ch]
; Line 1159: } 
L_61415:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 02ch
        ret
section code
section code
        section vsc@$bneq$qrx#__deque_iterator$#unique_ptr$8MenuItem#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~ virtual
        [bits 32]
@$bneq$qrx#__deque_iterator$#unique_ptr$8MenuItem#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~:
; Line 418:         {return !(__x == __y);} 
L_61524:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        push    ecx
        push    eax
        call    @$bequ$qrx#__deque_iterator$#unique_ptr$8MenuItem#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~
        pop     ecx
        pop     ecx
        and     al,al
        sete    al
        and     eax,byte 01h
        setne   al
L_61525:
        ret
section code
section code
        section vsc@std@__1@#allocator_traits$#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~ virtual
        [bits 32]
@std@__1@#allocator_traits$#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~:
; Line 1797:             { 
        add     esp,0ffffff70h
        push    ebx
        push    esi
L_61532:
        mov     ebx,dword [esp+0ch+098h]
        push    dword @$xc@std@__1@#allocator_traits$#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~
        lea     eax,[esp-048h+09ch]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_61535:
; Line 1798:                 __p->~_Tp(); 
        mov     dword [esp-048h+014h+098h],01h
        mov     ecx,ebx
        xor     edx,edx
; Line 2615:     pointer __tmp = __ptr_.first(); 
        mov     eax,ecx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-088h+098h],eax
        and     eax,eax
        je      L_61604
        mov     eax,dword [esp-088h+098h]
        jmp     L_61605
L_61604:
        mov     eax,dword [esp-088h+098h]
L_61605:
; Line 2305:   } 
        mov     eax,dword [eax]
        mov     esi,ecx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-088h+098h],esi
        and     esi,esi
        je      L_61638
        mov     esi,dword [esp-088h+098h]
        jmp     L_61639
L_61638:
        mov     esi,dword [esp-088h+098h]
L_61639:
; Line 2305:   } 
        mov     dword [esi],edx
        and     eax,eax
        je      L_61555
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-08ch+098h],ecx
L_61687:
L_61688:
; Line 2315:   } 
; Line 2359:     static_assert(sizeof(_Tp) > 0, 
        mov     dword [esp-090h+098h],eax
        and     eax,eax
        je      L_61691
        mov     eax,dword [esp-090h+098h]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax]
        pop     ecx
        mov     eax,dword [esp-090h+098h]
        push    eax
        call    @$bdel$qpv
        pop     ecx
L_61691:
; Line 2364:   } 
; Line 2365: }; 
; Line 2365: }; 
L_61655:
L_61555:
; Line 2619:   } 
L_61572:
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#default_delete$8MenuItem~@$bdtr$qv
        pop     ecx
L_61718:
L_61732:
L_61705:
L_61552:
; Line 1799:             } 
L_61533:
        call    @_RundownException$qv
        pop     esi
        pop     ebx
        add     esp,090h
        ret
section code
section code
        section vsc@$xt@#__compressed_pair_elem$p8MenuItemi?0?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$p8MenuItemi?0?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$p8MenuItemi?0?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#default_delete$8MenuItem~ virtual
        [bits 32]
@$xt@#default_delete$8MenuItem~:
        dd      @std@__1@#default_delete$8MenuItem~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      064h
        db      065h
        db      066h
        db      061h
        db      075h
        db      06ch
        db      074h
        db      05fh
        db      064h
        db      065h
        db      06ch
        db      065h
        db      074h
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#default_delete$8MenuItem~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#default_delete$8MenuItem~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#default_delete$8MenuItem~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$p8MenuItem#default_delete$n0~~ virtual
        [bits 32]
@$xt@#__compressed_pair$p8MenuItem#default_delete$n0~~:
        dd      @std@__1@#__compressed_pair$p8MenuItem#default_delete$n0~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$p8MenuItemi?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#default_delete$8MenuItem~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#unique_ptr$8MenuItem#default_delete$n0~~ virtual
        [bits 32]
@$xt@#unique_ptr$8MenuItem#default_delete$n0~~:
        dd      @std@__1@#unique_ptr$8MenuItem#default_delete$n0~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xc@std@__1@#allocator_traits$#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~ virtual
        [bits 32]
@$xc@std@__1@#allocator_traits$#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#__libcpp_trivial_destructor$p#unique_ptr$8MenuItem#default_delete$n0~~~@$bctr$qv virtual
        [bits 32]
@std@__1@#__libcpp_trivial_destructor$p#unique_ptr$8MenuItem#default_delete$n0~~~@$bctr$qv:
        push    ecx
L_61740:
L_61741:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__libcpp_trivial_destructor$p#unique_ptr$8MenuItem#default_delete$n0~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__libcpp_trivial_destructor$p#unique_ptr$8MenuItem#default_delete$n0~~~@$bdtr$qv:
        push    ecx
L_61764:
L_61778:
L_61765:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~ virtual
        [bits 32]
@std@__1@#__split_buffer$p#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
        push    ebx
        push    esi
L_61784:
        mov     ebx,dword [ebp+0ch]
        mov     esi,dword [ebp+08h]
        push    dword @$xc@std@__1@#__split_buffer$p#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~
        lea     eax,[ebp-048h]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_61787:
; Line 294:     __begin_ = __new_begin; 
        mov     dword [esi+08h],ebx
; Line 295: } 
L_61785:
        call    @_RundownException$qv
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@$xc@std@__1@#__split_buffer$p#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~ virtual
        [bits 32]
@$xc@std@__1@#__split_buffer$p#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$pp#unique_ptr$12ResourceData#default_delete$n0~~i?0?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$pp#unique_ptr$12ResourceData#default_delete$n0~~i?0?4bool?0?~@$bdtr$qv:
L_61794:
L_61795:
        ret
section code
section code
        section vsc@std@__1@#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~@$bdtr$qv:
L_61800:
L_61801:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_61806:
L_61820:
L_61807:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$pp#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$pp#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_61826:
L_61853:
L_61840:
L_61868:
L_61827:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#allocator_traits$#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~ virtual
        [bits 32]
@std@__1@#allocator_traits$#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~:
; Line 1797:             { 
        add     esp,byte 0ffffffb8h
L_61874:
        push    dword @$xc@std@__1@#allocator_traits$#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~
        lea     eax,[esp-048h+04ch]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_61877:
; Line 1798:                 __p->~_Tp(); 
; Line 1799:             } 
L_61875:
        call    @_RundownException$qv
        add     esp,byte 048h
        ret
section code
section code
        section vsc@$xc@std@__1@#allocator_traits$#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~ virtual
        [bits 32]
@$xc@std@__1@#allocator_traits$#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~@$bdtr$qv:
L_61884:
L_61885:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_61890:
L_61904:
L_61891:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$ui#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$ui#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_61910:
L_61937:
L_61924:
L_61952:
L_61911:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@begin$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@begin$qv:
        add     esp,byte 0ffffffe4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_61958:
        mov     ecx,dword [esp+04h+02ch]
        mov     esi,dword [esp+08h+02ch]
; Line 1140:     __map_pointer __mp = __map_.begin() + __start_ / __block_size; 
        mov     eax,esi
        add     eax,byte 04h
        mov     edi,dword [eax+08h]
        mov     eax,dword [esi+01ch]
        mov     ebx,dword [@std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size]
        sub     edx,edx
        xor     edx,edx
        div     ebx
        shl     eax,02h
        add     edi,eax
        mov     edx,edi
        mov     eax,esi
        add     eax,byte 04h
        mov     ebp,dword [eax+0ch]
        mov     eax,dword [eax+08h]
        cmp     ebp,eax
        sete    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_61996
        xor     edx,edx
        jmp     L_61997
L_61996:
        mov     ebp,dword [edx]
        mov     eax,dword [esi+01ch]
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
        shl     eax,03h
        add     eax,ebp
        mov     edx,eax
L_61997:
        mov     eax,edi
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
        mov     eax,dword [esp+04h+02ch]
; Line 1142: } 
L_61959:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@end$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@end$qv:
        add     esp,byte 0ffffffd4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_62018:
        mov     ebp,dword [esp+04h+03ch]
        mov     edi,dword [esp+08h+03ch]
; Line 1156:     size_type __p = size() + __start_; 
        mov     eax,edi
        add     eax,byte 020h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-02ch+03ch],eax
        and     eax,eax
        je      L_62068
        mov     eax,dword [esp-02ch+03ch]
        jmp     L_62069
L_62068:
        mov     eax,dword [esp-02ch+03ch]
L_62069:
; Line 2305:   } 
        mov     ecx,dword [edi+01ch]
        add     ecx,dword [eax]
        mov     eax,edi
        add     eax,byte 04h
        mov     esi,dword [eax+08h]
        mov     ebx,dword [@std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size]
        mov     eax,ecx
        sub     edx,edx
        xor     edx,edx
        div     ebx
        shl     eax,02h
        add     eax,esi
        mov     edx,ecx
        mov     ecx,eax
        mov     esi,ebp
        mov     ebp,ecx
        mov     eax,edi
        add     eax,byte 04h
        mov     edi,dword [eax+0ch]
        mov     eax,dword [eax+08h]
        cmp     edi,eax
        sete    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_62106
        xor     edx,edx
        jmp     L_62107
L_62106:
        mov     edi,dword [ebp]
        mov     eax,edx
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
        shl     eax,03h
        add     eax,edi
        mov     edx,eax
L_62107:
        mov     eax,ecx
        mov     dword [esi],eax
        mov     dword [esi+04h],edx
        mov     eax,dword [esp+04h+03ch]
; Line 1159: } 
L_62019:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 02ch
        ret
section code
section code
        section vsc@$bneq$qrx#__deque_iterator$#unique_ptr$12ResourceData#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~ virtual
        [bits 32]
@$bneq$qrx#__deque_iterator$#unique_ptr$12ResourceData#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~:
; Line 418:         {return !(__x == __y);} 
L_62128:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        push    ecx
        push    eax
        call    @$bequ$qrx#__deque_iterator$#unique_ptr$12ResourceData#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~
        pop     ecx
        pop     ecx
        and     al,al
        sete    al
        and     eax,byte 01h
        setne   al
L_62129:
        ret
section code
section code
        section vsc@std@__1@#allocator_traits$#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~ virtual
        [bits 32]
@std@__1@#allocator_traits$#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~:
; Line 1797:             { 
        add     esp,0ffffff6ch
        push    ebx
        push    esi
L_62136:
        mov     ebx,dword [esp+0ch+09ch]
        push    dword @$xc@std@__1@#allocator_traits$#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~
        lea     eax,[esp-048h+0a0h]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_62139:
; Line 1798:                 __p->~_Tp(); 
        mov     dword [esp-048h+014h+09ch],01h
        mov     ecx,ebx
        xor     edx,edx
; Line 2615:     pointer __tmp = __ptr_.first(); 
        mov     eax,ecx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-08ch+09ch],eax
        and     eax,eax
        je      L_62208
        mov     eax,dword [esp-08ch+09ch]
        jmp     L_62209
L_62208:
        mov     eax,dword [esp-08ch+09ch]
L_62209:
; Line 2305:   } 
        mov     eax,dword [eax]
        mov     esi,ecx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-08ch+09ch],esi
        and     esi,esi
        je      L_62242
        mov     esi,dword [esp-08ch+09ch]
        jmp     L_62243
L_62242:
        mov     esi,dword [esp-08ch+09ch]
L_62243:
; Line 2305:   } 
        mov     dword [esi],edx
        and     eax,eax
        je      L_62159
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-090h+09ch],ecx
L_62291:
L_62292:
; Line 2315:   } 
; Line 2359:     static_assert(sizeof(_Tp) > 0, 
        mov     dword [esp-094h+09ch],eax
        and     eax,eax
        je      L_62295
        mov     eax,dword [esp-094h+09ch]
        add     eax,byte 04h
        push    eax
        call    @std@__1@#unique_ptr$puc#default_delete$puc~~@$bdtr$qv
        pop     ecx
L_62309:
        mov     eax,dword [esp-094h+09ch]
        push    eax
        call    @$bdel$qpv
        pop     ecx
L_62295:
; Line 2364:   } 
; Line 2365: }; 
; Line 2365: }; 
L_62259:
L_62159:
; Line 2619:   } 
L_62176:
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#default_delete$12ResourceData~@$bdtr$qv
        pop     ecx
L_62338:
L_62352:
L_62325:
L_62156:
; Line 1799:             } 
L_62137:
        call    @_RundownException$qv
        pop     esi
        pop     ebx
        add     esp,094h
        ret
section code
section code
        section vsc@$xc@std@__1@#allocator_traits$#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~ virtual
        [bits 32]
@$xc@std@__1@#allocator_traits$#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#__libcpp_trivial_destructor$p#unique_ptr$12ResourceData#default_delete$n0~~~@$bctr$qv virtual
        [bits 32]
@std@__1@#__libcpp_trivial_destructor$p#unique_ptr$12ResourceData#default_delete$n0~~~@$bctr$qv:
        push    ecx
L_62360:
L_62361:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__libcpp_trivial_destructor$p#unique_ptr$12ResourceData#default_delete$n0~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__libcpp_trivial_destructor$p#unique_ptr$12ResourceData#default_delete$n0~~~@$bdtr$qv:
        push    ecx
L_62384:
L_62398:
L_62385:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~ virtual
        [bits 32]
@std@__1@#__split_buffer$p#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
        push    ebx
        push    esi
L_62404:
        mov     ebx,dword [ebp+0ch]
        mov     esi,dword [ebp+08h]
        push    dword @$xc@std@__1@#__split_buffer$p#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~
        lea     eax,[ebp-048h]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_62407:
; Line 294:     __begin_ = __new_begin; 
        mov     dword [esi+08h],ebx
; Line 295: } 
L_62405:
        call    @_RundownException$qv
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@$xc@std@__1@#__split_buffer$p#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~ virtual
        [bits 32]
@$xc@std@__1@#__split_buffer$p#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$pp#unique_ptr$15InternalVerInfo#default_delete$n0~~i?0?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$pp#unique_ptr$15InternalVerInfo#default_delete$n0~~i?0?4bool?0?~@$bdtr$qv:
L_62414:
L_62415:
        ret
section code
section code
        section vsc@std@__1@#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~@$bdtr$qv:
L_62420:
L_62421:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_62426:
L_62440:
L_62427:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$pp#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$pp#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_62446:
L_62473:
L_62460:
L_62488:
L_62447:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#allocator_traits$#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~ virtual
        [bits 32]
@std@__1@#allocator_traits$#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~:
; Line 1797:             { 
        add     esp,byte 0ffffffb8h
L_62494:
        push    dword @$xc@std@__1@#allocator_traits$#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~
        lea     eax,[esp-048h+04ch]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_62497:
; Line 1798:                 __p->~_Tp(); 
; Line 1799:             } 
L_62495:
        call    @_RundownException$qv
        add     esp,byte 048h
        ret
section code
section code
        section vsc@$xc@std@__1@#allocator_traits$#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~ virtual
        [bits 32]
@$xc@std@__1@#allocator_traits$#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~~@#__destroy$p#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$p#unique_ptr$n0#default_delete$n0~~~pp#unique_ptr$n0#default_delete$n0~~:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~@$bdtr$qv:
L_62504:
L_62505:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_62510:
L_62524:
L_62511:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$ui#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$ui#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_62530:
L_62557:
L_62544:
L_62572:
L_62531:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@begin$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@begin$qv:
        add     esp,byte 0ffffffe4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_62578:
        mov     ecx,dword [esp+04h+02ch]
        mov     esi,dword [esp+08h+02ch]
; Line 1140:     __map_pointer __mp = __map_.begin() + __start_ / __block_size; 
        mov     eax,esi
        add     eax,byte 04h
        mov     edi,dword [eax+08h]
        mov     eax,dword [esi+01ch]
        mov     ebx,dword [@std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size]
        sub     edx,edx
        xor     edx,edx
        div     ebx
        shl     eax,02h
        add     edi,eax
        mov     edx,edi
        mov     eax,esi
        add     eax,byte 04h
        mov     ebp,dword [eax+0ch]
        mov     eax,dword [eax+08h]
        cmp     ebp,eax
        sete    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_62616
        xor     edx,edx
        jmp     L_62617
L_62616:
        mov     ebp,dword [edx]
        mov     eax,dword [esi+01ch]
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
        shl     eax,03h
        add     eax,ebp
        mov     edx,eax
L_62617:
        mov     eax,edi
        mov     dword [ecx],eax
        mov     dword [ecx+04h],edx
        mov     eax,dword [esp+04h+02ch]
; Line 1142: } 
L_62579:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@end$qv virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@end$qv:
        add     esp,byte 0ffffffd4h
        push    ebx
        push    ebp
        push    esi
        push    edi
L_62638:
        mov     ebp,dword [esp+04h+03ch]
        mov     edi,dword [esp+08h+03ch]
; Line 1156:     size_type __p = size() + __start_; 
        mov     eax,edi
        add     eax,byte 020h
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-02ch+03ch],eax
        and     eax,eax
        je      L_62688
        mov     eax,dword [esp-02ch+03ch]
        jmp     L_62689
L_62688:
        mov     eax,dword [esp-02ch+03ch]
L_62689:
; Line 2305:   } 
        mov     ecx,dword [edi+01ch]
        add     ecx,dword [eax]
        mov     eax,edi
        add     eax,byte 04h
        mov     esi,dword [eax+08h]
        mov     ebx,dword [@std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size]
        mov     eax,ecx
        sub     edx,edx
        xor     edx,edx
        div     ebx
        shl     eax,02h
        add     eax,esi
        mov     edx,ecx
        mov     ecx,eax
        mov     esi,ebp
        mov     ebp,ecx
        mov     eax,edi
        add     eax,byte 04h
        mov     edi,dword [eax+0ch]
        mov     eax,dword [eax+08h]
        cmp     edi,eax
        sete    al
        and     eax,byte 01h
        setne   al
        and     al,al
        je      L_62726
        xor     edx,edx
        jmp     L_62727
L_62726:
        mov     edi,dword [ebp]
        mov     eax,edx
        sub     edx,edx
        xor     edx,edx
        div     ebx
        mov     eax,edx
        shl     eax,03h
        add     eax,edi
        mov     edx,eax
L_62727:
        mov     eax,ecx
        mov     dword [esi],eax
        mov     dword [esi+04h],edx
        mov     eax,dword [esp+04h+03ch]
; Line 1159: } 
L_62639:
        pop     edi
        pop     esi
        pop     ebp
        pop     ebx
        add     esp,byte 02ch
        ret
section code
section code
        section vsc@$bneq$qrx#__deque_iterator$#unique_ptr$15InternalVerInfo#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~ virtual
        [bits 32]
@$bneq$qrx#__deque_iterator$#unique_ptr$15InternalVerInfo#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~:
; Line 418:         {return !(__x == __y);} 
L_62748:
        mov     ecx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        push    ecx
        push    eax
        call    @$bequ$qrx#__deque_iterator$#unique_ptr$15InternalVerInfo#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~
        pop     ecx
        pop     ecx
        and     al,al
        sete    al
        and     eax,byte 01h
        setne   al
L_62749:
        ret
section code
section code
        section vsc@std@__1@#allocator_traits$#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~ virtual
        [bits 32]
@std@__1@#allocator_traits$#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~:
; Line 1797:             { 
        add     esp,0ffffff70h
        push    ebx
        push    esi
L_62756:
        mov     ebx,dword [esp+0ch+098h]
        push    dword @$xc@std@__1@#allocator_traits$#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~
        lea     eax,[esp-048h+09ch]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_62759:
; Line 1798:                 __p->~_Tp(); 
        mov     dword [esp-048h+014h+098h],01h
        mov     ecx,ebx
        xor     edx,edx
; Line 2615:     pointer __tmp = __ptr_.first(); 
        mov     eax,ecx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-088h+098h],eax
        and     eax,eax
        je      L_62828
        mov     eax,dword [esp-088h+098h]
        jmp     L_62829
L_62828:
        mov     eax,dword [esp-088h+098h]
L_62829:
; Line 2305:   } 
        mov     eax,dword [eax]
        mov     esi,ecx
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-088h+098h],esi
        and     esi,esi
        je      L_62862
        mov     esi,dword [esp-088h+098h]
        jmp     L_62863
L_62862:
        mov     esi,dword [esp-088h+098h]
L_62863:
; Line 2305:   } 
        mov     dword [esi],edx
        and     eax,eax
        je      L_62779
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-08ch+098h],ecx
L_62911:
L_62912:
; Line 2315:   } 
; Line 2359:     static_assert(sizeof(_Tp) > 0, 
        mov     dword [esp-090h+098h],eax
        and     eax,eax
        je      L_62915
        mov     eax,dword [esp-090h+098h]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax+08h]
        pop     ecx
        mov     eax,dword [esp-090h+098h]
        push    eax
        call    @$bdel$qpv
        pop     ecx
L_62915:
; Line 2364:   } 
; Line 2365: }; 
; Line 2365: }; 
L_62879:
L_62779:
; Line 2619:   } 
L_62796:
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#default_delete$15InternalVerInfo~@$bdtr$qv
        pop     ecx
L_62942:
L_62956:
L_62929:
L_62776:
; Line 1799:             } 
L_62757:
        call    @_RundownException$qv
        pop     esi
        pop     ebx
        add     esp,090h
        ret
section code
section code
        section vsc@$xt@#__compressed_pair_elem$p15InternalVerInfoi?0?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$p15InternalVerInfoi?0?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$p15InternalVerInfoi?0?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#default_delete$15InternalVerInfo~ virtual
        [bits 32]
@$xt@#default_delete$15InternalVerInfo~:
        dd      @std@__1@#default_delete$15InternalVerInfo~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      064h
        db      065h
        db      066h
        db      061h
        db      075h
        db      06ch
        db      074h
        db      05fh
        db      064h
        db      065h
        db      06ch
        db      065h
        db      074h
        db      065h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair_elem$#default_delete$15InternalVerInfo~i?1?4bool?0?~ virtual
        [bits 32]
@$xt@#__compressed_pair_elem$#default_delete$15InternalVerInfo~i?1?4bool?0?~:
        dd      @std@__1@#__compressed_pair_elem$#default_delete$15InternalVerInfo~i?1?4bool?0?~@$bdtr$qv+0
        dd      04h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      05fh
        db      065h
        db      06ch
        db      065h
        db      06dh
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#__compressed_pair$p15InternalVerInfo#default_delete$n0~~ virtual
        [bits 32]
@$xt@#__compressed_pair$p15InternalVerInfo#default_delete$n0~~:
        dd      @std@__1@#__compressed_pair$p15InternalVerInfo#default_delete$n0~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      063h
        db      06fh
        db      06dh
        db      070h
        db      072h
        db      065h
        db      073h
        db      073h
        db      065h
        db      064h
        db      05fh
        db      070h
        db      061h
        db      069h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$p15InternalVerInfoi?0?4bool?0?~+0
        dd      00h
        dd      0800h
        dd      @$xt@#__compressed_pair_elem$#default_delete$15InternalVerInfo~i?1?4bool?0?~+0
        dd      04h
        dd      00h
section code
section code
        section vsc@$xt@#unique_ptr$15InternalVerInfo#default_delete$n0~~ virtual
        [bits 32]
@$xt@#unique_ptr$15InternalVerInfo#default_delete$n0~~:
        dd      @std@__1@#unique_ptr$15InternalVerInfo#default_delete$n0~~@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      075h
        db      06eh
        db      069h
        db      071h
        db      075h
        db      065h
        db      05fh
        db      070h
        db      074h
        db      072h
        db      00h
        dd      00h
section code
section code
        section vsc@$xc@std@__1@#allocator_traits$#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~ virtual
        [bits 32]
@$xc@std@__1@#allocator_traits$#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~~@#__destroy$#unique_ptr$n0#default_delete$n0~~~$q#integral_constant$4bool3_Tp?0?~r#allocator$#unique_ptr$n0#default_delete$n0~~~p#unique_ptr$n0#default_delete$n0~~:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#__libcpp_trivial_destructor$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~@$bctr$qv virtual
        [bits 32]
@std@__1@#__libcpp_trivial_destructor$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~@$bctr$qv:
        push    ecx
L_62964:
L_62965:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__libcpp_trivial_destructor$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__libcpp_trivial_destructor$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~@$bdtr$qv:
        push    ecx
L_62988:
L_63002:
L_62989:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__split_buffer$p#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~ virtual
        [bits 32]
@std@__1@#__split_buffer$p#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~:
        push    ebp
        mov     ebp,esp
        add     esp,byte 0ffffffb8h
        push    ebx
        push    esi
L_63008:
        mov     ebx,dword [ebp+0ch]
        mov     esi,dword [ebp+08h]
        push    dword @$xc@std@__1@#__split_buffer$p#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~
        lea     eax,[ebp-048h]
        push    eax
        call    @_InitializeException$qpvpv
        pop     ecx
        pop     ecx
L_63011:
; Line 294:     __begin_ = __new_begin; 
        mov     dword [esi+08h],ebx
; Line 295: } 
L_63009:
        call    @_RundownException$qv
        pop     esi
        pop     ebx
        mov     esp,ebp
        pop     ebp
        ret
section code
section code
        section vsc@$xc@std@__1@#__split_buffer$p#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~ virtual
        [bits 32]
@$xc@std@__1@#__split_buffer$p#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@__destruct_at_begin$qpp#unique_ptr$n0#default_delete$n0~~#integral_constant$4bool3_Tp?1?~:
        dd      00h
        dd      0ffffffb8h
        dd      00h
section code
section code
        section vsc@std@__1@#unique_ptr$7Control#default_delete$n0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#unique_ptr$7Control#default_delete$n0~~@$bdtr$qv:
; Line 2572:   ~unique_ptr() { reset(); } 
        add     esp,byte 0ffffffb8h
        push    ebx
L_63018:
        mov     eax,dword [esp+04h+04ch]
        xor     edx,edx
; Line 2615:     pointer __tmp = __ptr_.first(); 
        mov     ecx,eax
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-040h+04ch],ecx
        and     ecx,ecx
        je      L_63073
        mov     ecx,dword [esp-040h+04ch]
        jmp     L_63074
L_63073:
        mov     ecx,dword [esp-040h+04ch]
L_63074:
; Line 2305:   } 
        mov     ecx,dword [ecx]
        mov     ebx,eax
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-040h+04ch],ebx
        and     ebx,ebx
        je      L_63107
        mov     ebx,dword [esp-040h+04ch]
        jmp     L_63108
L_63107:
        mov     ebx,dword [esp-040h+04ch]
L_63108:
; Line 2305:   } 
        mov     dword [ebx],edx
        and     ecx,ecx
        je      L_63024
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-044h+04ch],eax
L_63156:
L_63157:
; Line 2315:   } 
; Line 2359:     static_assert(sizeof(_Tp) > 0, 
        mov     dword [esp-048h+04ch],ecx
        and     ecx,ecx
        je      L_63160
        mov     eax,dword [esp-048h+04ch]
        push    eax
        call    @Control@$bdtr$qv
        pop     ecx
        mov     eax,dword [esp-048h+04ch]
        push    eax
        call    @$bdel$qpv
        pop     ecx
L_63160:
; Line 2364:   } 
; Line 2365: }; 
; Line 2365: }; 
L_63124:
L_63024:
; Line 2619:   } 
L_63041:
L_63200:
L_63187:
L_63215:
L_63174:
L_63019:
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@__1@#unique_ptr$8MenuItem#default_delete$n0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#unique_ptr$8MenuItem#default_delete$n0~~@$bdtr$qv:
; Line 2572:   ~unique_ptr() { reset(); } 
        add     esp,byte 0ffffffb8h
        push    ebx
L_63222:
        mov     eax,dword [esp+04h+04ch]
        xor     edx,edx
; Line 2615:     pointer __tmp = __ptr_.first(); 
        mov     ecx,eax
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-040h+04ch],ecx
        and     ecx,ecx
        je      L_63277
        mov     ecx,dword [esp-040h+04ch]
        jmp     L_63278
L_63277:
        mov     ecx,dword [esp-040h+04ch]
L_63278:
; Line 2305:   } 
        mov     ecx,dword [ecx]
        mov     ebx,eax
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-040h+04ch],ebx
        and     ebx,ebx
        je      L_63311
        mov     ebx,dword [esp-040h+04ch]
        jmp     L_63312
L_63311:
        mov     ebx,dword [esp-040h+04ch]
L_63312:
; Line 2305:   } 
        mov     dword [ebx],edx
        and     ecx,ecx
        je      L_63228
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-044h+04ch],eax
L_63360:
L_63361:
; Line 2315:   } 
; Line 2359:     static_assert(sizeof(_Tp) > 0, 
        mov     dword [esp-048h+04ch],ecx
        and     ecx,ecx
        je      L_63364
        mov     eax,dword [esp-048h+04ch]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax]
        pop     ecx
        mov     eax,dword [esp-048h+04ch]
        push    eax
        call    @$bdel$qpv
        pop     ecx
L_63364:
; Line 2364:   } 
; Line 2365: }; 
; Line 2365: }; 
L_63328:
L_63228:
; Line 2619:   } 
L_63245:
L_63404:
L_63391:
L_63419:
L_63378:
L_63223:
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
        section vsc@std@__1@#unique_ptr$15InternalVerInfo#default_delete$n0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#unique_ptr$15InternalVerInfo#default_delete$n0~~@$bdtr$qv:
; Line 2572:   ~unique_ptr() { reset(); } 
        add     esp,byte 0ffffffb8h
        push    ebx
L_63426:
        mov     eax,dword [esp+04h+04ch]
        xor     edx,edx
; Line 2615:     pointer __tmp = __ptr_.first(); 
        mov     ecx,eax
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-040h+04ch],ecx
        and     ecx,ecx
        je      L_63481
        mov     ecx,dword [esp-040h+04ch]
        jmp     L_63482
L_63481:
        mov     ecx,dword [esp-040h+04ch]
L_63482:
; Line 2305:   } 
        mov     ecx,dword [ecx]
        mov     ebx,eax
; Line 2304:     return static_cast<_Base1&>(*this).__get(); 
        mov     dword [esp-040h+04ch],ebx
        and     ebx,ebx
        je      L_63515
        mov     ebx,dword [esp-040h+04ch]
        jmp     L_63516
L_63515:
        mov     ebx,dword [esp-040h+04ch]
L_63516:
; Line 2305:   } 
        mov     dword [ebx],edx
        and     ecx,ecx
        je      L_63432
; Line 2314:     return static_cast<_Base2&>(*this).__get(); 
        mov     dword [esp-044h+04ch],eax
L_63564:
L_63565:
; Line 2315:   } 
; Line 2359:     static_assert(sizeof(_Tp) > 0, 
        mov     dword [esp-048h+04ch],ecx
        and     ecx,ecx
        je      L_63568
        mov     eax,dword [esp-048h+04ch]
        push    eax
        mov     eax,dword [eax]
        call    dword [eax+08h]
        pop     ecx
        mov     eax,dword [esp-048h+04ch]
        push    eax
        call    @$bdel$qpv
        pop     ecx
L_63568:
; Line 2364:   } 
; Line 2365: }; 
; Line 2365: }; 
L_63532:
L_63432:
; Line 2619:   } 
L_63449:
L_63608:
L_63595:
L_63623:
L_63582:
L_63427:
        pop     ebx
        add     esp,byte 048h
        ret
section code
section code
section data
        section vsd@Resource@_$vt virtual
        [bits 32]
@Resource@_$vt:
        dd      @$xt@8Resource+0
        dd      00h
        dd      00h
        dd      @Resource@$bdtr$qv+0
        dd      @Resource@WriteRes$qr7ResFile+0
        dd      @Resource@ReadRC$qr6RCFile+0
section data
section data
section code
        section vsc@$xt@#deque$17@Accelerators@Key#allocator$n0~~ virtual
        [bits 32]
@$xt@#deque$17@Accelerators@Key#allocator$n0~~:
        dd      @std@__1@#deque$17@Accelerators@Key#allocator$n0~~@$bdtr$qv+0
        dd      028h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      064h
        db      065h
        db      071h
        db      075h
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@#__deque_base$17@Accelerators@Key#allocator$n0~~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@12Accelerators virtual
        [bits 32]
@$xt@12Accelerators:
        dd      @Accelerators@$bdtr$qv+0
        dd      06ch
        dd      0400h
        db      041h
        db      063h
        db      063h
        db      065h
        db      06ch
        db      065h
        db      072h
        db      061h
        db      074h
        db      06fh
        db      072h
        db      073h
        db      00h
        dd      0800h
        dd      @$xt@8Resource+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@Accelerators@_$vt virtual
        [bits 32]
@Accelerators@_$vt:
        dd      @$xt@12Accelerators+0
        dd      00h
        dd      00h
        dd      @Accelerators@$bdtr$qv+0
        dd      @Accelerators@WriteRes$qr7ResFile+0
        dd      @Accelerators@ReadRC$qr6RCFile+0
section data
section data
section code
        section vsc@$xt@6Bitmap virtual
        [bits 32]
@$xt@6Bitmap:
        dd      @Bitmap@$bdtr$qv+0
        dd      04ch
        dd      0400h
        db      042h
        db      069h
        db      074h
        db      06dh
        db      061h
        db      070h
        db      00h
        dd      0800h
        dd      @$xt@8Resource+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@Bitmap@_$vt virtual
        [bits 32]
@Bitmap@_$vt:
        dd      @$xt@6Bitmap+0
        dd      00h
        dd      00h
        dd      @Bitmap@$bdtr$qv+0
        dd      @Bitmap@WriteRes$qr7ResFile+0
        dd      @Bitmap@ReadRC$qr6RCFile+0
section data
section data
section code
        section vsc@$xt@#deque$p4Icon#allocator$pn0~~ virtual
        [bits 32]
@$xt@#deque$p4Icon#allocator$pn0~~:
        dd      @std@__1@#deque$p4Icon#allocator$pn0~~@$bdtr$qv+0
        dd      028h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      064h
        db      065h
        db      071h
        db      075h
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@#__deque_base$p4Icon#allocator$pn0~~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@9GroupIcon virtual
        [bits 32]
@$xt@9GroupIcon:
        dd      @GroupIcon@$bdtr$qv+0
        dd      06ch
        dd      0400h
        db      047h
        db      072h
        db      06fh
        db      075h
        db      070h
        db      049h
        db      063h
        db      06fh
        db      06eh
        db      00h
        dd      0800h
        dd      @$xt@8Resource+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@GroupIcon@_$vt virtual
        [bits 32]
@GroupIcon@_$vt:
        dd      @$xt@9GroupIcon+0
        dd      00h
        dd      00h
        dd      @GroupIcon@$bdtr$qv+0
        dd      @GroupIcon@WriteRes$qr7ResFile+0
        dd      @GroupIcon@ReadRC$qr6RCFile+0
section data
section data
section code
        section vsc@$xt@#deque$p6Cursor#allocator$pn0~~ virtual
        [bits 32]
@$xt@#deque$p6Cursor#allocator$pn0~~:
        dd      @std@__1@#deque$p6Cursor#allocator$pn0~~@$bdtr$qv+0
        dd      028h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      064h
        db      065h
        db      071h
        db      075h
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@#__deque_base$p6Cursor#allocator$pn0~~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@11GroupCursor virtual
        [bits 32]
@$xt@11GroupCursor:
        dd      @GroupCursor@$bdtr$qv+0
        dd      06ch
        dd      0400h
        db      047h
        db      072h
        db      06fh
        db      075h
        db      070h
        db      043h
        db      075h
        db      072h
        db      073h
        db      06fh
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@8Resource+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@GroupCursor@_$vt virtual
        [bits 32]
@GroupCursor@_$vt:
        dd      @$xt@11GroupCursor+0
        dd      00h
        dd      00h
        dd      @GroupCursor@$bdtr$qv+0
        dd      @GroupCursor@WriteRes$qr7ResFile+0
        dd      @GroupCursor@ReadRC$qr6RCFile+0
section data
section data
section code
        section vsc@$xt@5Point virtual
        [bits 32]
@$xt@5Point:
        dd      @Point@$bdtr$qv+0
        dd      08h
        dd      0400h
        db      050h
        db      06fh
        db      069h
        db      06eh
        db      074h
        db      00h
        dd      00h
section code
section code
        section vsc@$xt@#deque$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#deque$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~:
        dd      @std@__1@#deque$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv+0
        dd      028h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      064h
        db      065h
        db      071h
        db      075h
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@6Dialog virtual
        [bits 32]
@$xt@6Dialog:
        dd      @Dialog@$bdtr$qv+0
        dd      0f4h
        dd      0400h
        db      044h
        db      069h
        db      061h
        db      06ch
        db      06fh
        db      067h
        db      00h
        dd      0800h
        dd      @$xt@8Resource+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@Dialog@_$vt virtual
        [bits 32]
@Dialog@_$vt:
        dd      @$xt@6Dialog+0
        dd      00h
        dd      00h
        dd      @Dialog@$bdtr$qv+0
        dd      @Dialog@WriteRes$qr7ResFile+0
        dd      @Dialog@ReadRC$qr6RCFile+0
section data
section data
section code
        section vsc@$xt@10DlgInclude virtual
        [bits 32]
@$xt@10DlgInclude:
        dd      @DlgInclude@$bdtr$qv+0
        dd      04ch
        dd      0400h
        db      044h
        db      06ch
        db      067h
        db      049h
        db      06eh
        db      063h
        db      06ch
        db      075h
        db      064h
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@8Resource+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@DlgInclude@_$vt virtual
        [bits 32]
@DlgInclude@_$vt:
        dd      @$xt@10DlgInclude+0
        dd      00h
        dd      00h
        dd      @DlgInclude@$bdtr$qv+0
        dd      @DlgInclude@WriteRes$qr7ResFile+0
        dd      @DlgInclude@ReadRC$qr6RCFile+0
section data
section data
section code
        section vsc@$xt@10FileHeader virtual
        [bits 32]
@$xt@10FileHeader:
        dd      @FileHeader@$bdtr$qv+0
        dd      044h
        dd      0400h
        db      046h
        db      069h
        db      06ch
        db      065h
        db      048h
        db      065h
        db      061h
        db      064h
        db      065h
        db      072h
        db      00h
        dd      0800h
        dd      @$xt@8Resource+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@FileHeader@_$vt virtual
        [bits 32]
@FileHeader@_$vt:
        dd      @$xt@10FileHeader+0
        dd      00h
        dd      00h
        dd      @FileHeader@$bdtr$qv+0
        dd      @FileHeader@WriteRes$qr7ResFile+0
        dd      @FileHeader@ReadRC$qr6RCFile+0
section data
section data
section code
        section vsc@$xt@15GenericResource virtual
        [bits 32]
@$xt@15GenericResource:
        dd      @GenericResource@$bdtr$qv+0
        dd      04ch
        dd      0400h
        db      047h
        db      065h
        db      06eh
        db      065h
        db      072h
        db      069h
        db      063h
        db      052h
        db      065h
        db      073h
        db      06fh
        db      075h
        db      072h
        db      063h
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@8Resource+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@GenericResource@_$vt virtual
        [bits 32]
@GenericResource@_$vt:
        dd      @$xt@15GenericResource+0
        dd      00h
        dd      00h
        dd      @GenericResource@$bdtr$qv+0
        dd      @GenericResource@WriteRes$qr7ResFile+0
        dd      @GenericResource@ReadRC$qr6RCFile+0
section data
section data
section code
        section vsc@$xt@#deque$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#deque$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~:
        dd      @std@__1@#deque$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv+0
        dd      028h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      064h
        db      065h
        db      071h
        db      075h
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@4Menu virtual
        [bits 32]
@$xt@4Menu:
        dd      @Menu@$bdtr$qv+0
        dd      074h
        dd      0400h
        db      04dh
        db      065h
        db      06eh
        db      075h
        db      00h
        dd      0800h
        dd      @$xt@8Resource+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@Menu@_$vt virtual
        [bits 32]
@Menu@_$vt:
        dd      @$xt@4Menu+0
        dd      00h
        dd      00h
        dd      @Menu@$bdtr$qv+0
        dd      @Menu@WriteRes$qr7ResFile+0
        dd      @Menu@ReadRC$qr6RCFile+0
section data
section data
section code
        section vsc@$xt@12MessageTable virtual
        [bits 32]
@$xt@12MessageTable:
        dd      @MessageTable@$bdtr$qv+0
        dd      04ch
        dd      0400h
        db      04dh
        db      065h
        db      073h
        db      073h
        db      061h
        db      067h
        db      065h
        db      054h
        db      061h
        db      062h
        db      06ch
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@8Resource+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@MessageTable@_$vt virtual
        [bits 32]
@MessageTable@_$vt:
        dd      @$xt@12MessageTable+0
        dd      00h
        dd      00h
        dd      @MessageTable@$bdtr$qv+0
        dd      @MessageTable@WriteRes$qr7ResFile+0
        dd      @MessageTable@ReadRC$qr6RCFile+0
section data
section data
section code
        section vsc@$xt@#deque$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#deque$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~:
        dd      @std@__1@#deque$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv+0
        dd      028h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      064h
        db      065h
        db      071h
        db      075h
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@6RCData virtual
        [bits 32]
@$xt@6RCData:
        dd      @RCData@$bdtr$qv+0
        dd      06ch
        dd      0400h
        db      052h
        db      043h
        db      044h
        db      061h
        db      074h
        db      061h
        db      00h
        dd      0800h
        dd      @$xt@8Resource+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@RCData@_$vt virtual
        [bits 32]
@RCData@_$vt:
        dd      @$xt@6RCData+0
        dd      00h
        dd      00h
        dd      @RCData@$bdtr$qv+0
        dd      @RCData@WriteRes$qr7ResFile+0
        dd      @RCData@ReadRC$qr6RCFile+0
section data
section data
section code
        section vsc@$xt@#deque$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~ virtual
        [bits 32]
@$xt@#deque$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~:
        dd      @std@__1@#deque$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv+0
        dd      028h
        dd      0400h
        db      073h
        db      074h
        db      064h
        db      03ah
        db      03ah
        db      05fh
        db      05fh
        db      031h
        db      03ah
        db      03ah
        db      064h
        db      065h
        db      071h
        db      075h
        db      065h
        db      00h
        dd      0800h
        dd      @$xt@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~+0
        dd      00h
        dd      00h
section code
section code
        section vsc@$xt@11VersionInfo virtual
        [bits 32]
@$xt@11VersionInfo:
        dd      @VersionInfo@$bdtr$qv+0
        dd      09ch
        dd      0400h
        db      056h
        db      065h
        db      072h
        db      073h
        db      069h
        db      06fh
        db      06eh
        db      049h
        db      06eh
        db      066h
        db      06fh
        db      00h
        dd      0800h
        dd      @$xt@8Resource+0
        dd      00h
        dd      00h
section code
section code
section data
        section vsd@VersionInfo@_$vt virtual
        [bits 32]
@VersionInfo@_$vt:
        dd      @$xt@11VersionInfo+0
        dd      00h
        dd      00h
        dd      @VersionInfo@$bdtr$qv+0
        dd      @VersionInfo@WriteRes$qr7ResFile+0
        dd      @VersionInfo@ReadRC$qr6RCFile+0
section data
section data
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$c~i?1?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$c~i?1?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ecx
L_63630:
        mov     eax,dword [esp+04h+04h]
L_63631:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$C~i?1?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$C~i?1?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ecx
L_63658:
        mov     eax,dword [esp+04h+04h]
L_63659:
        pop     ecx
        ret
section code
section code
        section vsc@Accelerators@$bdtr$qv virtual
        [bits 32]
@Accelerators@$bdtr$qv:
; Line 55:     virtual ~Accelerators() {} 
        push    ecx
        push    ebx
L_63686:
        mov     ebx,dword [esp+04h+08h]
        mov     eax,ebx
        add     eax,byte 044h
        push    eax
        call    @std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@$bdtr$qv
        pop     ecx
L_63702:
        push    ebx
        call    @Resource@$bdtr$qv
        pop     ecx
L_63687:
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@$bequ$qrx#__deque_iterator$17@Accelerators@Keypn0rn0ppn0ii?341?~rx#__deque_iterator$n0pn0rn0ppn0ii?341?~ virtual
        [bits 32]
@$bequ$qrx#__deque_iterator$17@Accelerators@Keypn0rn0ppn0ii?341?~rx#__deque_iterator$n0pn0rn0ppn0ii?341?~:
; Line 414:         {return __x.__ptr_ == __y.__ptr_;} 
L_63708:
        mov     edx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [eax+04h]
        mov     eax,dword [edx+04h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
L_63709:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$17@Accelerators@Key~i?1?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$17@Accelerators@Key~i?1?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ecx
L_63716:
        mov     eax,dword [esp+04h+04h]
L_63717:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#default_delete$12ResourceData~i?1?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#default_delete$12ResourceData~i?1?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ecx
L_63744:
        mov     eax,dword [esp+04h+04h]
L_63745:
        pop     ecx
        ret
section code
section code
        section vsc@GroupIcon@$bdtr$qv virtual
        [bits 32]
@GroupIcon@$bdtr$qv:
; Line 88:     virtual ~GroupIcon() {} 
        push    ecx
        push    ebx
L_63770:
        mov     ebx,dword [esp+04h+08h]
        mov     eax,ebx
        add     eax,byte 044h
        push    eax
        call    @std@__1@#__deque_base$p4Icon#allocator$pn0~~@$bdtr$qv
        pop     ecx
L_63786:
        push    ebx
        call    @Resource@$bdtr$qv
        pop     ecx
L_63771:
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@$bequ$qrx#__deque_iterator$p4Iconppn0rpn0pppn0ii?1024?~rx#__deque_iterator$pn0ppn0rpn0pppn0ii?1024?~ virtual
        [bits 32]
@$bequ$qrx#__deque_iterator$p4Iconppn0rpn0pppn0ii?1024?~rx#__deque_iterator$pn0ppn0rpn0pppn0ii?1024?~:
; Line 414:         {return __x.__ptr_ == __y.__ptr_;} 
L_63792:
        mov     edx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [eax+04h]
        mov     eax,dword [edx+04h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
L_63793:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$p4Icon~i?1?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$p4Icon~i?1?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ecx
L_63800:
        mov     eax,dword [esp+04h+04h]
L_63801:
        pop     ecx
        ret
section code
section code
        section vsc@GroupCursor@$bdtr$qv virtual
        [bits 32]
@GroupCursor@$bdtr$qv:
; Line 57:     virtual ~GroupCursor() {} 
        push    ecx
        push    ebx
L_63828:
        mov     ebx,dword [esp+04h+08h]
        mov     eax,ebx
        add     eax,byte 044h
        push    eax
        call    @std@__1@#__deque_base$p6Cursor#allocator$pn0~~@$bdtr$qv
        pop     ecx
L_63844:
        push    ebx
        call    @Resource@$bdtr$qv
        pop     ecx
L_63829:
        pop     ebx
        pop     ecx
        ret
section code
section code
        section vsc@$bequ$qrx#__deque_iterator$p6Cursorppn0rpn0pppn0ii?1024?~rx#__deque_iterator$pn0ppn0rpn0pppn0ii?1024?~ virtual
        [bits 32]
@$bequ$qrx#__deque_iterator$p6Cursorppn0rpn0pppn0ii?1024?~rx#__deque_iterator$pn0ppn0rpn0pppn0ii?1024?~:
; Line 414:         {return __x.__ptr_ == __y.__ptr_;} 
L_63850:
        mov     edx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [eax+04h]
        mov     eax,dword [edx+04h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
L_63851:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$p6Cursor~i?1?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$p6Cursor~i?1?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ecx
L_63858:
        mov     eax,dword [esp+04h+04h]
L_63859:
        pop     ecx
        ret
section code
section code
        section vsc@$bequ$qrx#__deque_iterator$#unique_ptr$12ResourceData#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~ virtual
        [bits 32]
@$bequ$qrx#__deque_iterator$#unique_ptr$12ResourceData#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~:
; Line 414:         {return __x.__ptr_ == __y.__ptr_;} 
L_63886:
        mov     edx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [eax+04h]
        mov     eax,dword [edx+04h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
L_63887:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$12ResourceData#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ecx
L_63894:
        mov     eax,dword [esp+04h+04h]
L_63895:
        pop     ecx
        ret
section code
section code
        section vsc@$bequ$qrx#__deque_iterator$#unique_ptr$7Control#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~ virtual
        [bits 32]
@$bequ$qrx#__deque_iterator$#unique_ptr$7Control#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~:
; Line 414:         {return __x.__ptr_ == __y.__ptr_;} 
L_63922:
        mov     edx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [eax+04h]
        mov     eax,dword [edx+04h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
L_63923:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$7Control#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$7Control#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ecx
L_63930:
        mov     eax,dword [esp+04h+04h]
L_63931:
        pop     ecx
        ret
section code
section code
        section vsc@FileHeader@$bdtr$qv virtual
        [bits 32]
@FileHeader@$bdtr$qv:
; Line 37:     virtual ~FileHeader() {} 
L_63958:
        mov     eax,dword [esp+04h]
        push    eax
        call    @Resource@$bdtr$qv
        pop     ecx
L_63959:
        ret
section code
section code
        section vsc@FileHeader@ReadRC$qr6RCFile virtual
        [bits 32]
@FileHeader@ReadRC$qr6RCFile:
; Line 39:     virtual void ReadRC(RCFile& rcFile) {}   
L_63966:
L_63967:
        ret
section code
section code
        section vsc@$bequ$qrx#__deque_iterator$#unique_ptr$8MenuItem#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~ virtual
        [bits 32]
@$bequ$qrx#__deque_iterator$#unique_ptr$8MenuItem#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~:
; Line 414:         {return __x.__ptr_ == __y.__ptr_;} 
L_63974:
        mov     edx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [eax+04h]
        mov     eax,dword [edx+04h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
L_63975:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$8MenuItem#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ecx
L_63982:
        mov     eax,dword [esp+04h+04h]
L_63983:
        pop     ecx
        ret
section code
section code
        section vsc@InternalVerInfo@$bdtr$qv virtual
        [bits 32]
@InternalVerInfo@$bdtr$qv:
; Line 47:     virtual void ReadRC(RCFile& rcFile) = 0; 
L_64010:
L_64011:
        ret
section code
section code
        section vsc@$bequ$qrx#__deque_iterator$#unique_ptr$15InternalVerInfo#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~ virtual
        [bits 32]
@$bequ$qrx#__deque_iterator$#unique_ptr$15InternalVerInfo#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~rx#__deque_iterator$#unique_ptr$n0#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~:
; Line 414:         {return __x.__ptr_ == __y.__ptr_;} 
L_64018:
        mov     edx,dword [esp+08h]
        mov     eax,dword [esp+04h]
        mov     ecx,dword [eax+04h]
        mov     eax,dword [edx+04h]
        cmp     ecx,eax
        sete    al
        and     eax,byte 01h
        setne   al
L_64019:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$#unique_ptr$15InternalVerInfo#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ecx
L_64026:
        mov     eax,dword [esp+04h+04h]
L_64027:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$pp17@Accelerators@Key#allocator$pn0~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2 virtual
        [bits 32]
@std@__1@#__compressed_pair$pp17@Accelerators@Key#allocator$pn0~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        add     esp,byte 0ffffffe4h
        push    ebx
L_64054:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        mov     eax,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
        mov     ecx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2205:     { 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ecx],eax
; Line 2206:     } 
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair_elem$#allocator$p17@Accelerators@Key~i?1?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        mov     eax,ebx
L_64055:
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$ppp6Cursor#allocator$ppn0~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2 virtual
        [bits 32]
@std@__1@#__compressed_pair$ppp6Cursor#allocator$ppn0~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        add     esp,byte 0ffffffe4h
        push    ebx
L_64146:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        mov     eax,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
        mov     ecx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2205:     { 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ecx],eax
; Line 2206:     } 
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair_elem$#allocator$pp6Cursor~i?1?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        mov     eax,ebx
L_64147:
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$pp#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2 virtual
        [bits 32]
@std@__1@#__compressed_pair$pp#unique_ptr$7Control#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        add     esp,byte 0ffffffe4h
        push    ebx
L_64238:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        mov     eax,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
        mov     ecx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2205:     { 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ecx],eax
; Line 2206:     } 
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$7Control#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        mov     eax,ebx
L_64239:
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$ppp4Icon#allocator$ppn0~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2 virtual
        [bits 32]
@std@__1@#__compressed_pair$ppp4Icon#allocator$ppn0~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        add     esp,byte 0ffffffe4h
        push    ebx
L_64330:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        mov     eax,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
        mov     ecx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2205:     { 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ecx],eax
; Line 2206:     } 
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair_elem$#allocator$pp4Icon~i?1?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        mov     eax,ebx
L_64331:
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$pp#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2 virtual
        [bits 32]
@std@__1@#__compressed_pair$pp#unique_ptr$8MenuItem#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        add     esp,byte 0ffffffe4h
        push    ebx
L_64422:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        mov     eax,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
        mov     ecx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2205:     { 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ecx],eax
; Line 2206:     } 
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        mov     eax,ebx
L_64423:
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$pp#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2 virtual
        [bits 32]
@std@__1@#__compressed_pair$pp#unique_ptr$12ResourceData#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        add     esp,byte 0ffffffe4h
        push    ebx
L_64514:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        mov     eax,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
        mov     ecx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2205:     { 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ecx],eax
; Line 2206:     } 
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        mov     eax,ebx
L_64515:
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$pp#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2 virtual
        [bits 32]
@std@__1@#__compressed_pair$pp#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$p#unique_ptr$n0#default_delete$n0~~~~@$bctr$9nullptr_tr18__default_init_tag~$qRn1rn2:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        add     esp,byte 0ffffffe4h
        push    ebx
L_64606:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        mov     eax,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
        mov     ecx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2205:     { 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ecx],eax
; Line 2206:     } 
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        mov     eax,ebx
L_64607:
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$p11StringTable#default_delete$n0~~@$bctr$rpn0r18__default_init_tag~$qrpn0rn1 virtual
        [bits 32]
@std@__1@#__compressed_pair$p11StringTable#default_delete$n0~~@$bctr$rpn0r18__default_init_tag~$qrpn0rn1:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        add     esp,byte 0ffffffe4h
        push    ebx
L_64698:
; Line 2289:       : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {} 
        mov     eax,dword [esp+08h+020h]
        mov     ebx,dword [esp+04h+020h]
        mov     ecx,ebx
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
; Line 2205:     { 
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,dword [eax]
        mov     dword [ecx],eax
; Line 2206:     } 
        add     esp,byte 0fffffffch
        mov     eax,esp
; Line 2269:     return static_cast<_Tp&&>(__t); 
; Line 2270: } 
        mov     eax,ebx
        add     eax,byte 04h
        push    eax
        call    @std@__1@#__compressed_pair_elem$#default_delete$11StringTable~i?1?4bool?0?~@$bctr$q18__default_init_tag
        pop     ecx
        pop     ecx
        mov     eax,ebx
L_64699:
        pop     ebx
        add     esp,byte 01ch
        ret
section code
section code
        section vsc@Accelerators@Key@$bdtr$qv virtual
        [bits 32]
@Accelerators@Key@$bdtr$qv:
L_64790:
L_64791:
        ret
section code
section code
        section vsc@std@__1@#default_delete$7Control~@$bdtr$qv virtual
        [bits 32]
@std@__1@#default_delete$7Control~@$bdtr$qv:
L_64796:
L_64797:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#default_delete$7Control~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#default_delete$7Control~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_64802:
L_64816:
L_64803:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$p7Controli?0?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$p7Controli?0?4bool?0?~@$bdtr$qv:
L_64822:
L_64823:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$p7Control#default_delete$n0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$p7Control#default_delete$n0~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_64828:
L_64855:
L_64842:
L_64870:
L_64829:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#default_delete$8MenuItem~@$bdtr$qv virtual
        [bits 32]
@std@__1@#default_delete$8MenuItem~@$bdtr$qv:
L_64876:
L_64877:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#default_delete$8MenuItem~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#default_delete$8MenuItem~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_64882:
L_64896:
L_64883:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$p8MenuItemi?0?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$p8MenuItemi?0?4bool?0?~@$bdtr$qv:
L_64902:
L_64903:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$p8MenuItem#default_delete$n0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$p8MenuItem#default_delete$n0~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_64908:
L_64935:
L_64922:
L_64950:
L_64909:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#default_delete$15InternalVerInfo~@$bdtr$qv virtual
        [bits 32]
@std@__1@#default_delete$15InternalVerInfo~@$bdtr$qv:
L_64956:
L_64957:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#default_delete$15InternalVerInfo~i?1?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#default_delete$15InternalVerInfo~i?1?4bool?0?~@$bdtr$qv:
        push    ecx
L_64962:
L_64976:
L_64963:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$p15InternalVerInfoi?0?4bool?0?~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$p15InternalVerInfoi?0?4bool?0?~@$bdtr$qv:
L_64982:
L_64983:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair$p15InternalVerInfo#default_delete$n0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#__compressed_pair$p15InternalVerInfo#default_delete$n0~~@$bdtr$qv:
        push    ecx
        push    ecx
        push    ecx
L_64988:
L_65015:
L_65002:
L_65030:
L_64989:
        pop     ecx
        pop     ecx
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#deque$17@Accelerators@Key#allocator$n0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#deque$17@Accelerators@Key#allocator$n0~~@$bdtr$qv:
L_65036:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@$bdtr$qv
        pop     ecx
L_65037:
        ret
section code
section code
        section vsc@std@__1@#deque$p4Icon#allocator$pn0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#deque$p4Icon#allocator$pn0~~@$bdtr$qv:
L_65042:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@__1@#__deque_base$p4Icon#allocator$pn0~~@$bdtr$qv
        pop     ecx
L_65043:
        ret
section code
section code
        section vsc@std@__1@#deque$p6Cursor#allocator$pn0~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#deque$p6Cursor#allocator$pn0~~@$bdtr$qv:
L_65048:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@__1@#__deque_base$p6Cursor#allocator$pn0~~@$bdtr$qv
        pop     ecx
L_65049:
        ret
section code
section code
        section vsc@Point@$bdtr$qv virtual
        [bits 32]
@Point@$bdtr$qv:
L_65054:
L_65055:
        ret
section code
section code
        section vsc@std@__1@#deque$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#deque$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv:
L_65060:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv
        pop     ecx
L_65061:
        ret
section code
section code
        section vsc@std@__1@#deque$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#deque$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv:
L_65066:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv
        pop     ecx
L_65067:
        ret
section code
section code
        section vsc@std@__1@#deque$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#deque$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv:
L_65072:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv
        pop     ecx
L_65073:
        ret
section code
section code
        section vsc@std@__1@#deque$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv virtual
        [bits 32]
@std@__1@#deque$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv:
L_65078:
        mov     eax,dword [esp+04h]
        push    eax
        call    @std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@$bdtr$qv
        pop     ecx
L_65079:
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$p17@Accelerators@Key~i?1?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$p17@Accelerators@Key~i?1?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ecx
L_65084:
        mov     eax,dword [esp+04h+04h]
L_65085:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$pp4Icon~i?1?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$pp4Icon~i?1?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ecx
L_65112:
        mov     eax,dword [esp+04h+04h]
L_65113:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$pp6Cursor~i?1?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$pp6Cursor~i?1?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ecx
L_65140:
        mov     eax,dword [esp+04h+04h]
L_65141:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$12ResourceData#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ecx
L_65168:
        mov     eax,dword [esp+04h+04h]
L_65169:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$7Control#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$7Control#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ecx
L_65196:
        mov     eax,dword [esp+04h+04h]
L_65197:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$8MenuItem#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ecx
L_65224:
        mov     eax,dword [esp+04h+04h]
L_65225:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#allocator$p#unique_ptr$15InternalVerInfo#default_delete$n0~~~i?1?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ecx
L_65252:
        mov     eax,dword [esp+04h+04h]
L_65253:
        pop     ecx
        ret
section code
section code
        section vsc@std@__1@#__compressed_pair_elem$#default_delete$11StringTable~i?1?4bool?0?~@$bctr$q18__default_init_tag virtual
        [bits 32]
@std@__1@#__compressed_pair_elem$#default_delete$11StringTable~i?1?4bool?0?~@$bctr$q18__default_init_tag:
; Line 2194:   __compressed_pair_elem(__default_init_tag) {} 
        push    ecx
L_65280:
        mov     eax,dword [esp+04h+04h]
L_65281:
        pop     ecx
        ret
section code
section code
section data
        section vsd@std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@__block_size virtual
        [bits 32]
@std@__1@#__deque_base$17@Accelerators@Key#allocator$n0~~@__block_size:
        dd      0155h
section data
section data
        section vsd@std@__1@#__deque_iterator$17@Accelerators@Keypn0rn0ppn0ii?341?~@__block_size virtual
        [bits 32]
@std@__1@#__deque_iterator$17@Accelerators@Keypn0rn0ppn0ii?341?~@__block_size:
        dd      0155h
section data
section data
        section vsd@std@__1@#__deque_base$p6Cursor#allocator$pn0~~@__block_size virtual
        [bits 32]
@std@__1@#__deque_base$p6Cursor#allocator$pn0~~@__block_size:
        dd      0400h
section data
section data
        section vsd@std@__1@#__deque_iterator$p6Cursorppn0rpn0pppn0ii?1024?~@__block_size virtual
        [bits 32]
@std@__1@#__deque_iterator$p6Cursorppn0rpn0pppn0ii?1024?~@__block_size:
        dd      0400h
section data
section data
        section vsd@std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$7Control#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size:
        dd      0200h
section data
section data
        section vsd@std@__1@#__deque_iterator$#unique_ptr$7Control#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~@__block_size virtual
        [bits 32]
@std@__1@#__deque_iterator$#unique_ptr$7Control#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~@__block_size:
        dd      0200h
section data
section data
        section vsd@std@__1@#__deque_base$p4Icon#allocator$pn0~~@__block_size virtual
        [bits 32]
@std@__1@#__deque_base$p4Icon#allocator$pn0~~@__block_size:
        dd      0400h
section data
section data
        section vsd@std@__1@#__deque_iterator$p4Iconppn0rpn0pppn0ii?1024?~@__block_size virtual
        [bits 32]
@std@__1@#__deque_iterator$p4Iconppn0rpn0pppn0ii?1024?~@__block_size:
        dd      0400h
section data
section data
        section vsd@std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$8MenuItem#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size:
        dd      0200h
section data
section data
        section vsd@std@__1@#__deque_iterator$#unique_ptr$8MenuItem#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~@__block_size virtual
        [bits 32]
@std@__1@#__deque_iterator$#unique_ptr$8MenuItem#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~@__block_size:
        dd      0200h
section data
section data
        section vsd@std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$12ResourceData#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size:
        dd      0200h
section data
section data
        section vsd@std@__1@#__deque_iterator$#unique_ptr$12ResourceData#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~@__block_size virtual
        [bits 32]
@std@__1@#__deque_iterator$#unique_ptr$12ResourceData#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~@__block_size:
        dd      0200h
section data
section data
        section vsd@std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size virtual
        [bits 32]
@std@__1@#__deque_base$#unique_ptr$15InternalVerInfo#default_delete$n0~~#allocator$#unique_ptr$n0#default_delete$n0~~~~@__block_size:
        dd      0200h
section data
section data
        section vsd@std@__1@#__deque_iterator$#unique_ptr$15InternalVerInfo#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~@__block_size virtual
        [bits 32]
@std@__1@#__deque_iterator$#unique_ptr$15InternalVerInfo#default_delete$n0~~p#unique_ptr$n0#default_delete$n0~~r#unique_ptr$n0#default_delete$n0~~pp#unique_ptr$n0#default_delete$n0~~ii?512?~@__block_size:
        dd      0200h
section data
section data

@std@__1@piecewise_construct resb 04h

@std@__1@allocator_arg resb 04h

@std@__1@__RCFile_cpp__130a513f@ignore resb 04h
section bss

@std@__1@placeholders@_1 resb 04h

@std@__1@placeholders@_2 resb 04h

@std@__1@placeholders@_3 resb 04h

@std@__1@placeholders@_4 resb 04h

@std@__1@placeholders@_5 resb 04h

@std@__1@placeholders@_6 resb 04h

@std@__1@placeholders@_7 resb 04h

@std@__1@placeholders@_8 resb 04h

@std@__1@placeholders@_9 resb 04h

@std@__1@placeholders@_10 resb 04h
section data

@Token@GetId$xqv_aa_39205 resb 014h
section bss

_$anontemp321 resb 04h
section data

@std@__1@defer_lock resb 04h

@std@__1@try_to_lock resb 04h

@std@__1@adopt_lock resb 04h
section code
@__DYNAMIC_STARTUP___0_130a513f$q:
        add     esp,byte 0ffffffd0h
L_65306:
        mov     dword [esp-04h+030h],00h
        lea     eax,[esp-04h+030h]
        mov     dword [esp-08h+030h],eax
        mov     eax,dword [esp-04h+030h]
        mov     dword [@std@__1@piecewise_construct],eax
        mov     dword [esp-0ch+030h],00h
        lea     eax,[esp-0ch+030h]
        mov     dword [esp-010h+030h],eax
        mov     eax,dword [esp-0ch+030h]
        mov     dword [@std@__1@allocator_arg],eax
        mov     dword [esp-014h+030h],00h
        lea     eax,[esp-014h+030h]
        mov     dword [esp-018h+030h],eax
        mov     eax,dword [esp-014h+030h]
        mov     dword [@std@__1@__RCFile_cpp__130a513f@ignore],eax
        mov     dword [esp-01ch+030h],00h
        lea     eax,[esp-01ch+030h]
        mov     dword [esp-020h+030h],eax
        mov     eax,dword [esp-01ch+030h]
        mov     dword [@std@__1@defer_lock],eax
        mov     dword [esp-024h+030h],00h
        lea     eax,[esp-024h+030h]
        mov     dword [esp-028h+030h],eax
        mov     eax,dword [esp-024h+030h]
        mov     dword [@std@__1@try_to_lock],eax
        mov     dword [esp-02ch+030h],00h
        lea     eax,[esp-02ch+030h]
        mov     dword [esp-030h+030h],eax
        mov     eax,dword [esp-02ch+030h]
        mov     dword [@std@__1@adopt_lock],eax
L_65307:
        add     esp,byte 030h
        ret
section cstartup
        db      0,32
        dd      @__DYNAMIC_STARTUP___0_130a513f$q
section code
@__DYNAMIC_RUNDOWN___0_130a513f$q:
        add     esp,byte 0ffffffd0h
L_65312:
        cmp     dword [_$anontemp321],byte 00h
        je      L_65315
        push    dword @Token@GetId$xqv_aa_39205
        call    @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@$bdtr$qv
        pop     ecx
L_65315:
L_65313:
        add     esp,byte 030h
        ret
section crundown
        db      0,32
        dd      @__DYNAMIC_RUNDOWN___0_130a513f$q
section code
section data
section string
L_3188:
        db "Invalid resource type"
        db      00h
L_3187:
        db "Expected resource identifier"
        db      00h
L_3186:
        db "Expected resource type"
        db      00h
L_2825:
        db "Expected valid file name"
        db      00h
L_2824:
        db " "
        db      09h
        db      0bh
        db      00h
L_2663:
        db "End expected"
        db      00h
L_2500:
        db "Begin expected"
        db      00h
L_2359:
        db "End of line expected"
        db      00h
L_1912:
        db "identifier expected"
        db      00h
L_1677:
        db "String expected"
        db      00h
L_1676:
        dw      00h
L_3:
        db "vector"
        db      00h
L_2:
        db "basic_string"
        db      00h
L_1:
        db "allocator<T>::allocate(size_t n) "
        db      027h
        db "n"
        db      027h
        db " exceeds maximum supported size"
        db      00h
section const

[extern @std@exception@$bdtr$qv]
[extern @std@__1@__libcpp_refstring@$bdtr$qv]
[extern @std@logic_error@$bdtr$qv]
[extern @std@domain_error@$bdtr$qv]
[extern @std@invalid_argument@$bdtr$qv]
[extern @std@length_error@$bdtr$qv]
[extern @std@out_of_range@$bdtr$qv]
[extern @std@runtime_error@$bdtr$qv]
[extern @std@range_error@$bdtr$qv]
[extern @std@overflow_error@$bdtr$qv]
[extern @std@underflow_error@$bdtr$qv]
[extern @std@__1@bad_weak_ptr@$bdtr$qv]
[extern @std@__1@system_error@$bdtr$qv]
[extern @std@__1@ios_base@failure@$bdtr$qv]
[extern @std@__1@#__basic_string_common$4bool?1?~@$bctr$qv]
[extern _strlen]
[extern @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@__init$qpxcui]
[extern _wcslen]
[extern @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__init$qpxCui]
[extern @Lexer@NextToken$qv]
[extern @Expression@conditional$qv]
[extern @_InitializeException$qpvpv]
[extern @std@runtime_error@$bctr$qrx13runtime_error]
[extern @std@runtime_error@$bctr$qpxc]
[extern @_ThrowException$qpvpvipvpv]
[extern @_RundownException$qv]
[extern @$xt@#basic_string$C#char_traits$C~#allocator$C~~]
[extern _toupper]
[extern @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bdtr$qv]
[extern @Utils@SearchForFile$qrx#basic_string$c#char_traits$c~#allocator$c~~rx#basic_string$c#char_traits$c~#allocator$c~~]
[extern @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@$bdtr$qv]
[extern @Lexer@GetRestOfLine$qv]
[extern @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@erase$quiui]
[extern @Tokenizer@Reset$qrx#basic_string$c#char_traits$c~#allocator$c~~]
[extern @$xt@#basic_string$c#char_traits$c~#allocator$c~~]
[extern @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$basn$qrx#basic_string$C#char_traits$C~#allocator$C~~]
[extern @ResourceId@ReadRC$qr6RCFile4bool]
[extern @$bnew$qui]
[extern @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@$bctr$qrx#basic_string$C#char_traits$C~#allocator$C~~]
[extern @Font@$bctr$qrx10ResourceIdrx12ResourceInfo]
[extern @$bdel$qpv]
[extern @ppInclude@pushFile$qrx#basic_string$c#char_traits$c~#allocator$c~~rx#basic_string$c#char_traits$c~#allocator$c~~4booln0i]
[extern @ResFile@Reset$qv]
[extern @ResFile@Add$qp8Resource]
[extern @std@runtime_error@what$xqv]
[extern @Errors@Error$qrx#basic_string$c#char_traits$c~#allocator$c~~]
[extern @_CatchCleanup$qpv]
[extern _memcmp]
[extern _memchr]
[extern _wmemcmp]
[extern _wmemchr]
[extern @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@__rep@$bctr$qRx51@#basic_string$c#char_traits$c~#allocator$c~~@__rep]
[extern @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@$bctr$qrx#basic_string$c#char_traits$c~#allocator$c~~uiuirx#allocator$c~]
[extern @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@__rep@$basn$qr51@#basic_string$c#char_traits$c~#allocator$c~~@__rep]
[extern @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__rep@$bctr$qRx51@#basic_string$C#char_traits$C~#allocator$C~~@__rep]
[extern @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@append$qpxCui]
[extern @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__rep@$basn$qr51@#basic_string$C#char_traits$C~#allocator$C~~@__rep]
[extern @std@__1@__libcpp_thread_get_current_id$qv]
[extern @$bdla$qpv]
[extern @__arrCall$qpvpvpvii]
[extern @std@__1@#basic_string$c#char_traits$c~#allocator$c~~@__rep@$bctr$qv]
[extern @std@__1@#basic_string$C#char_traits$C~#allocator$C~~@__rep@$bctr$qv]
[extern @StringTable@$bctr$qrx12ResourceInfo]
[extern @Control@$bdtr$qv]
[extern @Resource@WriteRes$qr7ResFile]
[extern @Accelerators@WriteRes$qr7ResFile]
[extern @Accelerators@ReadRC$qr6RCFile]
[extern @Bitmap@$bdtr$qv]
[extern @Bitmap@WriteRes$qr7ResFile]
[extern @Bitmap@ReadRC$qr6RCFile]
[extern @GroupIcon@WriteRes$qr7ResFile]
[extern @GroupIcon@ReadRC$qr6RCFile]
[extern @GroupCursor@WriteRes$qr7ResFile]
[extern @GroupCursor@ReadRC$qr6RCFile]
[extern @Dialog@$bdtr$qv]
[extern @Dialog@WriteRes$qr7ResFile]
[extern @Dialog@ReadRC$qr6RCFile]
[extern @DlgInclude@$bdtr$qv]
[extern @DlgInclude@WriteRes$qr7ResFile]
[extern @DlgInclude@ReadRC$qr6RCFile]
[extern @FileHeader@WriteRes$qr7ResFile]
[extern @GenericResource@$bdtr$qv]
[extern @GenericResource@WriteRes$qr7ResFile]
[extern @GenericResource@ReadRC$qr6RCFile]
[extern @Menu@$bdtr$qv]
[extern @Menu@WriteRes$qr7ResFile]
[extern @Menu@ReadRC$qr6RCFile]
[extern @MessageTable@$bdtr$qv]
[extern @MessageTable@WriteRes$qr7ResFile]
[extern @MessageTable@ReadRC$qr6RCFile]
[extern @RCData@$bdtr$qv]
[extern @RCData@WriteRes$qr7ResFile]
[extern @RCData@ReadRC$qr6RCFile]
[extern @VersionInfo@$bdtr$qv]
[extern @VersionInfo@WriteRes$qr7ResFile]
[extern @VersionInfo@ReadRC$qr6RCFile]
